global proc shelf_C3dC () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Back Face Culling Toggle" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "toggleSurfaceBackfaceCulling();" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "BckF" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "cameraAim.png" 
        -image1 "cameraAim.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "toggleSurfaceBackfaceCulling();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create A Tube From A Curve UI" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "createTube;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Tube" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "addWrapInfluence.png" 
        -image1 "addWrapInfluence.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "createTube;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 39
        -height 39
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Instant Obj Clean" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "/*\n\n\tOBJ Import and Export.\n\tv4, January 2007\n\t- added folder br..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "objC" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "objExport.bmp" 
        -image1 "objExport.bmp" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "/*\n\n\tOBJ Import and Export.\n\tv4, January 2007\n\t- added folder browse button\t\n\n\tby Andrew Butler - knurbs@gmail.com\n\t\t\t\t\thttp://www.andrewbutler.com.au\n\n\tDescription:\n\t\tExports and/or imports your finalised poly models to provide you with a clean,\n\t\tinput-free, history-less mesh ready for rigging using Maya's ObjExport plugin.\n\t\t\n\t\tJune version alows you to export and save the geometry to disk.\n\t\tUsing 'Combine selected' and 'Export to disk' - Specify the directory and filename in the text field. Result is one piece of geometry.\n\t\tUsing 'Individually' and 'Export to disk' - Specify output folder only. Result gives you separate geometry pieces.\n\t\t\n\t\t* Additional specified directories willl be made if they're non existant.\n\t\t* The 'Folder' field has no effect when using the 'Replace' option.\n\t\t* Select objects by their node not the top node of a group.\n\t\t\n\tTo use:\n\t\t- Make this script into a mel shelf button.\n\t\t- Select poly objects and run script.\n\t\t- Select a method...\n\t\t  'Combine Selected' will export the geometry you have selected as one mesh.\n\t\t  'Individually' will export each piece of geometry as individual objects.\n\t\t- Select an operation...\n\t\t\t'Replace' will swap out the geometry in the scene and not save to disk. (like v1)\n\t\t\t'Export to disk' will save out the geometry to a directory.\n\n\t\t* These methods are not undoable. Test the functionality first with temporary geometry.\n*/\n\nglobal proc objExp() {\n\tif (`window -q -ex obj_window`) { deleteUI obj_window; }\n\n\tobjExpUI();\n\t\n\twindow -e -wh 400 145 obj_window;\n\tshowWindow obj_window;\n}\n\nglobal proc objExpUI() {\t\n\tstring $objInitFolder = (`workspace -q -rd` + \"scenes\");\n\n\twindow -t \"OBJ Import / Export 2007               knurbs@gmail.com\" -s 0 obj_window;\n\t\tframeLayout -l \"\" -borderStyle \"etchedIn\" -mw 5 -mh 5;\n\t\t\tcolumnLayout -adj 1;\n\t\t\t\tradioButtonGrp -numberOfRadioButtons 2 -l \"Import - Export method\" -labelArray2 \"Combine selected\" \"Individually\" -sl 2 -on1 \"objChangeText(1)\" -on2 \"objChangeText(2)\" obj_optionCtrl;\n\t\t\t\ttextFieldButtonGrp -l \"Folder\"\n\t\t\t\t\t-tx $objInitFolder\n\t\t\t\t\t-bl \"...\"\n\t\t\t\t\t-bc \"objFolderBrowse()\"\n\t\t\t\t\t-cw 1 60 -cw 2 300\n\t\t\t\t\tobj_folderCtrl;\n\t\t\t\tbutton -l \"Replace\" -c \"objExpProcess(1)\";\n\t\t\t\tbutton -l \"Export to disk\" -c \"objExpProcess(2)\";\n\t\t\tsetParent ..;\n\t\tsetParent ..;\n}\n\nglobal proc objChangeText(int $objChange) {\n\t// 1 = combine\n\t// 2 = individual\n\n\tif ($objChange == 1) {\n\t\ttextFieldButtonGrp -e -tx (`workspace -q -sn` + \"/scenes/exportedObj.obj\") obj_folderCtrl;\n\t} else {\n\t\ttextFieldButtonGrp -e -tx (`workspace -q -sn` + \"/scenes/\") obj_folderCtrl;\n\t}\n}\n\nglobal proc objExpProcess(int $objOpt) {\n\tglobal string $objNamelist[];\n\t\n\tclear $objNamelist;\n\t\n\t// directory to temporarily store mesh...\n\tstring $objExpTempDir = `internalVar -utd`;\n\n\t// load ObjExport plugin if nessacary...\n\tif (!`pluginInfo -query -l objExport`) {\n\t\tloadPlugin objExport;\n\t\tpluginInfo -edit -autoload true objExport;\n\t}\n\t\n\t// replace...\n\tif ($objOpt == 1) {\n\t\t// replace selected as one mesh...\n\t\tif (`radioButtonGrp -q -sl obj_optionCtrl` == 1) {\n\t\t\tfile -op \"groups=0;ptgroups=0;materials=0;smoothing=0;normals=0\" -typ \"OBJexport\" -pr -es ($objExpTempDir + \"objExport\");\n\t\t\tdelete;\n\t\t\tfile -import -type \"OBJ\" -rpr \"objExport\" -options \"mo=1\"  -pr ($objExpTempDir + \"objExport.obj\");\n\t\t\t// delete the temporary obj file...\n\t\t\t\tsysFile -del ($objExpTempDir + \"/objExport.obj\");\n\t\t} else {\t\n\t\t\t// replace each selected object individually...\n\t\t\tstring $objSel[] = `ls -sl`;\n\t\t\tstring $objItem;\n\t\n\t\t\tselect -cl;\n\t\n\t\t\tfor ($objItem in $objSel) {\n\t\t\t\tselect -r $objItem;\n\t\t\t\tfile -op \"groups=0;ptgroups=0;materials=0;smoothing=0;normals=0\" -typ \"OBJexport\" -pr -es ($objExpTempDir + $objItem);\n\t\t\t\tdelete;\n\t\t\t\tfile -import -type \"OBJ\" -rpr \"objExport\" -options \"mo=1\"  -pr ($objExpTempDir + \"/\" + $objItem + \".obj\");\n\t\t\t\t$objNamelist = `ls -tr \"Mesh*\"`;\n\t\t\t\tint $objListSize = `size($objNamelist)`;\n\t\t\t\t\n\t\t\t\tif (`size($objNamelist)` == 1) {\n\t\t\t\t\trename $objNamelist[0] $objItem;\n\t\t\t\t} else {\n\t\t\t\t\trename $objNamelist[$objListSize-1] $objItem;\n\t\t\t\t}\n\t\t\t\t// delete the temporary obj file...\n\t\t\t\t\tsysFile -del ($objExpTempDir + \"/objExport.obj\");\n\t\t\t}\n\t\t}\n\t} else { // export to disk...\n\t\t// as one..\n\t\tif (`radioButtonGrp -q -sl obj_optionCtrl` == 1) {\n\t\t\tstring $objSel[] = `ls -sl`;\n\t\t\tstring $objFolder = `textFieldButtonGrp -q -tx obj_folderCtrl`;\n\t\t\t\n\t\t\t$objFolder = toNativePath($objFolder);\n\n\t\t\t// make directories\n\t\t\tstring $dirArray[], $objMakeDir;\n\t\t\ttokenize  $objFolder \"\\\\\" $dirArray;\n\t\t\t\n\t\t\tint $objDirSize = (`size($dirArray)` - 2);\n\t\t\tint $objzz = 1;\n\t\t\t\n\t\t\t$objMakeDir = $dirArray[0];\n\t\t\t\n\t\t\tfor ($objzz; $objzz <= $objDirSize; $objzz++) {\n\t\t\t\t$objMakeDir = ($objMakeDir + \"/\" + $dirArray[$objzz]);\n\t\t\t} \n\t\t\t\n\t\t\tsysFile -md $objMakeDir;\n\t\t\tfile -op \"groups=0;ptgroups=0;materials=0;smoothing=0;normals=0\" -chn 1 -sh 0 -exp 0 -con 0 -ch 0 -typ \"OBJexport\" -pr -es ($objMakeDir + \"/\" + $dirArray[`size($dirArray)`-1]);\n\t\t} else {\n\t\t\t// individually...\n\t\t\tstring $objSel[] = `ls -sl`;\n\t\t\tstring $objItem;\n\t\t\tstring $objFolder = `textFieldButtonGrp -q -tx obj_folderCtrl`;\n\t\t\t\n\t\t\tsysFile -md $objFolder;\n\t\t\t\n\t\t\tselect -cl;\n\t\n\t\t\tfor ($objItem in $objSel) {\n\t\t\t\tselect -r $objItem;\n\t\t\t\tstring $objOutname = ($objFolder + \"/\" + $objItem + \".obj\");\n\t\t\t\t$objOutname = substituteAllString($objOutname, \"|\", \"\");\n\t\t\t\n\t\t\t\tfile -op \"groups=0;ptgroups=0;materials=0;smoothing=0;normals=0\" -chn 1 -sh 0 -exp 0 -con 0 -ch 0 -typ \"OBJexport\" -pr -es $objOutname;\n\t\t\t}\t\t\n\t\t}\t\t\n\t}\n}\n\nglobal proc objFolderBrowse() {\n\tfileBrowserDialog -m 4 -ds 1 -fc \"objGetFolder\" -ft \"folder\" -an \"Select\";\n}\n\nglobal proc string objGetFolder(string $objFolderName, string $objFileType) {\n\tif ($objFolderName != \"\" && $objFileType == \"directory\") {\n\t\ttextFieldButtonGrp -e -tx $objFolderName obj_folderCtrl;\n\t\tprint $objFolderName;\n\t}\n\t\n\treturn $objFolderName;\n}\n\nobjExp();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Triangulate NGons For GoZ (ZBrush)" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "polyCleanupArgList 3 { \"0\",\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1e-0..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Tris" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "volumeCone.png" 
        -image1 "volumeCone.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "polyCleanupArgList 3 { \"0\",\"1\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1e-05\",\"0\",\"1e-05\",\"0\",\"1e-05\",\"0\",\"-1\",\"0\" };\nsetSelectMode components Components; selectType -smp 1 -sme 0 -smf 0 -smu 0 -pv 1 -pe 0 -pf 0 -puv 0;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set Smooth Preview and Render Levels" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "source smoothControl.mel;\nobjSmoothMenu();" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Smth" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "smoothTangent.png" 
        -image1 "smoothTangent.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source smoothControl.mel;\nobjSmoothMenu();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Dup Along A Path Toolbox" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "DupAlongPathToolbox" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DupP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "curveCV.png" 
        -image1 "curveCV.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DupAlongPathToolbox" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 39
        -height 39
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "spherize" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# /*************************************************************..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "sph" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "/Users/andrewsilke/Library/Preferences/Autodesk/maya/2015-x64/prefs/icons/spherizeSelection.png" 
        -image1 "/Users/andrewsilke/Library/Preferences/Autodesk/maya/2015-x64/prefs/icons/spherizeSelection.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# /************************************************************************************************\n#  ************************************************************************************************\n#  ***                                                                                          ***\n#  ***                                                                                          ***\n#  ***                               Spherize v1.01 2013                                        ***\n#  ***                                                                                          ***\n#  ***                                                                                          ***\n#  ************************************************************************************************\n#  ************************************************************************************************\n\n#   DESCRIPTION:\n#   This script will attempt to 'Spherify' the current selected objects or components.\n#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  \n#   AUTHOR: \n#   Shannon Hochkins\n#   shannon@shannonhochkins.com\n#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  \n#   USAGE:\n#   1. Open script editor and load spherize.py\n#   2. Click File > save script to shelf\n#   3. An icon is provided for the shelf button in your download\n#   Simply select your desired components or objects to be spherified and press the giant button!\n#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n#   INSPIRATION:\n#   I wrote this tool to aid others with the horrible task of modelling cylindrical shapes from a quadrilateral surface.\n#   Blender has had this feature for years and I decided to give it a go!\n#   Please don't hesitate to let me know if any bugs or comments on this tool!\n#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/\n#\n\nimport math as math\nfrom pymel.core import *\nclass sphereizedSelection():\n    messages = [\"Please make sure you have selected something.\", \"Completed! \", \"Performing checks on selection... \"]\n    def __init__(self, *args):\n        if window(\"spherizeSelection\", exists=1): deleteUI(\"spherizeSelection\")\n        window(\"spherizeSelection\", title=\"Spherize Selection - Shannon Hochkins\", w=405, sizeable=0)    \n        with columnLayout('content', adjustableColumn=True):\n            with frameLayout( label='Settings', borderStyle='in'):\n                with columnLayout(columnAttach=('both', 15), rs=15, cal='left', cw=395 ):\n                    text(l=\"Select any component(s) or poly object(s).\", h=30)\n                    checkBox('flatten',l='Attempt to flatten selection ', cc=self.enableRadio)\n                    separator( 'baseSep', height=5, style='in', en=0, vis=0)\n                    radioButtonGrp('flattenRadio', numberOfRadioButtons=3, adj=1, label='Normal Axis ', labelArray3=['X', 'Y', 'Z'], en=0, vis=0)\n                    radioButtonGrp('flattenRadio', e=1, sl=1, cw=[10,100], cal=((1, 'left')), h=50)\n            with columnLayout(columnAttach=('both', 15), rs=15, cal='left', cw=405 ):\n                separator( style='none')\n                button(c=self.average, l='Average Selection', w=380, )\n                button(l='Spherize', c=self.relay, height=50, w=380, backgroundColor=(.2, .2, .2))\n                with rowColumnLayout(nc=2, cal=[(1,'right'), (2,'right')], cw=[(1,200),(2,170)]):        \n                    text('displayInfo', l=self.messages[2],vis=0)\n                    progressBar('buildGridProgBar', maxValue=100, width=150,vis=0)                    \n                    showWindow(\"spherizeSelection\")\n    def relay(self, *args):        \n        b = ls(os=1)\n        select(cl=1)\n        if (len(b) == 0):\n            warning(self.messages[0])\n        else:\n            text('displayInfo',e=1,vis=1)            \n            refresh(f=1)\n            for i in range(0,len(b),1):                \n                selectedType =  listRelatives(b[i])                      \n                if (selectedType != []):\n                    type = PyNode(b[i]).getShape().type()\n                    if (type == 'mesh'):                        \n                        select(polyListComponentConversion(b[i],tv=1),add=1)\n                    if (type == 'nurbsCurve'):                        \n                        select(b[i],add=1)\n                        runtime.SelectCurveCVsAll(b[i])                                                   \n                    self.spherize()\n                else:\n                    select(b[i], add=1)                                \n            if (len(selected(fl=1)) > 0 and selectedType == []):\n                self.convertToVerts(selected())\n                self.spherize() \n    def spherize(self, *args):\n        s = selected(fl=1)\n        setToolTo('Move')\n        s, avd, oda, cs = selected(fl=1), 0, [], manipMoveContext(\"Move\", q=1, p=1)\n        select(cl=1)\n        if (checkBox('flatten', q=1, v=1) == 1):\n            select(s,r=1)\n            self.flatten()        \n        for verts in range(0, len(s), 1):\n            vts = s[verts].getPosition(space='world')\n            dfc = math.sqrt(pow(vts[0] - cs[0],2) + pow(vts[1] - cs[1],2) + pow(vts[2] - cs[2],2))\n            oda += [(dfc)]\n            avd += dfc\n            text('displayInfo',e=1,l='Calculating new positions on '+ listRelatives(listRelatives(s[verts],p=1)[0], p=1)[0] +'... ') \n            progressBar('buildGridProgBar', edit=1, progress=int((float((verts + 1)) / float(len(s))) * 100),vis=1)\n        avd /= len(s)\n        for vert in range(0, len(s), 1):\n            vts = s[vert].getPosition(space='world')\n            x, y, z = (((avd / oda[vert]) * (vts[0] - cs[0])) + cs[0]), (((avd / oda[vert]) * (vts[1] - cs[1])) + cs[1]), (((avd / oda[vert]) * (vts[2] - cs[2])) + cs[2])\n            s[vert].setPosition([x,y,z], space='world')\n            text('displayInfo',e=1,l='Performing Witchcraft on '+ listRelatives(listRelatives(s[verts],p=1)[0], p=1)[0] +'... ')\n            progressBar('buildGridProgBar', edit=1, progress=int((float((vert + 1)) / float(len(s))) * 100),vis=1)\n            refresh()    \n            text('displayInfo',e=1,l=self.messages[1])\n            select(cl=1)\n    def flatten(self, *args):\n        self.convertToVerts(selected())\n        setToolTo('Scale')\n        manipScaleContext(\"Scale\", e=1, mode=9)\n        p, oa, r = manipScaleContext(\"Scale\", q=1, p=1), manipScaleContext(\"Scale\", q=1, oa=1), radioButtonGrp('flattenRadio',q=1,sl=1)\n        scale((0,1,1) if r == 1 else (1,0,1) if r == 2 else (1,1,0), p=(p[0],p[1],p[2]), ls=1, oa=(\"%srad\"%oa[0],\"%srad\"%oa[1],\"%srad\"%oa[2]))\n        text('displayInfo',e=1,l=self.messages[1])\n        select(cl=1)\n    def average(self, *args):\n        if (len(selected(fl=1)) == 0):\n            warning(self.messages[0])\n        else:\n            self.convertToVerts(selected())\n            s = selected()\n            polyAverageVertex(s, ch=1)\n    def enableRadio(self, *args):\n        if (checkBox('flatten',q=1,v=1) == 1):\n            setToolTo('Scale')\n            manipScaleContext(\"Scale\", e=1, mode=9)\n            radioButtonGrp('flattenRadio', e=1,en=1,vis=1)\n            separator('baseSep', e=1,vis=1)\n        else:\n            radioButtonGrp('flattenRadio', e=1,en=0,vis=0)\n            separator('baseSep', e=1,vis=0)\n    def convertToVerts(self, object):\n        runtime.ConvertSelectionToVertices(object)\nsphereizedSelection()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Resolution Gate - 16x9" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "string $camera = \"\";\n\nstring $panel = `getPanel -wf`;\n\nif (`getP..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "16x9" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "cameraAim.png" 
        -image1 "cameraAim.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "string $camera = \"\";\nstring $panel = `getPanel -wf`;\nif (`getPanel -to $panel` == \"modelPanel\")\n    $camera = `modelEditor -q -camera $panel`;\nint $isResGateEnabled = `camera -q -displayResolution $camera`;\nfloat $ratio = 1.0;\nif ($isResGateEnabled) \n    $ratio = 1.0;\nelse \n    $ratio = 1.05;\n    setAttr ($camera + \".filmFit\") 3;\ncamera -e -displayResolution (!$isResGateEnabled) -overscan $ratio $camera;\nsetAttr ($camera + \".horizontalFilmAperture\") ((`getAttr ($camera + \".verticalFilmAperture\")`)*1.7778);\nsetAttr ($camera + \".displayResolution\") 1;\nsetAttr ($camera + \".displayGateMaskOpacity\") 1;\nsetAttr ($camera + \".overscan\") 1.05;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 39
        -height 39
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Gamma Swatches" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "gammaColorSwatch;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "G" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "gammaColorSwatch.png" 
        -image1 "gammaColorSwatch.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "gammaColorSwatch;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Lighters Friend" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "LightersFriend;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "LiteF" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "light.png" 
        -image1 "light.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "LightersFriend;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "convert rotation order on animated" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import ml_convertRotationOrder\nml_convertRotationOrder.ui()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "XYZ" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "angleDim.png" 
        -image1 "angleDim.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import ml_convertRotationOrder\nml_convertRotationOrder.ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Retimer with FPS" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "// Retime Within a Frame Range - andrew silke\n// this script sca..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FPS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "animateSweep.png" 
        -image1 "animateSweep.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Retime Within a Frame Range - andrew silke\n// this script scales keys within a time range and offsets the keys after\n// values input: RangeStart Range End and newFPS (the scale amount) based on a percentage\n//how to use\n//Select objects, run script, type time range start, end and the percentage for that section.\n//Hit go\nglobal proc ST_ScaleRetimer ()\n{\nglobal string $STRangeStartField;\nglobal string $STRangeEndField;\nglobal string $STfpsField;\nif (`window -exists retimeWindow`) deleteUI retimeWindow;\nwindow -title \"Silke's Retime\" -widthHeight 300 200 retimeWindow;\nrowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n-columnWidth 1 100 -columnWidth 2 80;\ntext -label \"Range Start\";\nstring $STRangeStartField = `floatField -pre 1`;\ntext -label \"Range End\";\nstring $STRangeEndField = `floatField -pre 1`;\ntext -label \"Percentage\";\nstring $STfpsField = `floatField -pre 1`;\nbutton -label \"GO\" -command \"ST_main ()\";\nshowWindow retimeWindow;\n}\nglobal proc ST_main ()\n{\nglobal string $STRangeStartField;\nglobal string $STRangeEndField;\nglobal string $STfpsField;\nfloat $STTotalRangeF;\nfloat $STMoveKeys;\nfloat $STTimeScale;\nfloat $STRangeStartF;\nfloat $STfps;\nfloat $STRangeEndF;\n//user input values\n$STRangeStartF = `floatField -q -v $STRangeStartField`;\n$STRangeEndF = `floatField -q -v $STRangeEndField`;\n$STfps = `floatField -q -v $STfpsField`;\n//simple maths\n$STTimeScale = 100/$STfps;\n$STTotalRangeF = $STRangeEndF - $STRangeStartF;\n$STMoveKeys = ($STTotalRangeF - ($STTotalRangeF * $STTimeScale)) * -1;\nselectKey -clear ;\nif ( $STMoveKeys > 0) {\n// if move keys is a positive value\nkeyframe -time (($STRangeEndF + 1) + \":\") -edit -relative -timeChange $STMoveKeys;\nscaleKey -t ($STRangeStartF + \":\" + $STRangeEndF) -timeScale $STTimeScale -timePivot $STRangeStartF;\n} else {\n// if move keys is a negetive value (switch order of scale - move)\nscaleKey -t ($STRangeStartF + \":\" + $STRangeEndF) -timeScale $STTimeScale -timePivot $STRangeStartF;\nkeyframe -time (($STRangeEndF + 1) + \":\") -edit -relative -timeChange $STMoveKeys;\n}\n// snap keys to integer time\nsnapKey -timeMultiple 1 ;\n//end\nprint \"start\";\nprint $STRangeStartF;\nprint \"end\";\nprint $STRangeEndF;\nprint \"fps\";\nprint $STfps;\n}\nglobal proc ST_temp ()\n{\nglobal float $ST_value;\nglobal string $STRangeStartField;\n$ST_value = `floatField -q -v $STRangeStartField`;\nprint $ST_value;\n}\nST_ScaleRetimer ();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Retimer with Percentage" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "// Retime Within a Frame Range - andrew silke\n// this script sca..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "%" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "animateSweep.png" 
        -image1 "animateSweep.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Retime Within a Frame Range - andrew silke\n// this script scales keys within a time range and offsets the keys after\n// values input: RangeStart Range End and newFPS (the scale amount) based on 24fps\n//how to use\n//Select objects, run script, type time range start, end and the new fps for that section.\n//Hit go\nglobal proc ST_ScaleRetimer ()\n{\nglobal string $STRangeStartField;\nglobal string $STRangeEndField;\nglobal string $STfpsField;\nif (`window -exists retimeWindow`) deleteUI retimeWindow;\nwindow -title \"Silke's Retime\" -widthHeight 300 200 retimeWindow;\nrowColumnLayout -numberOfColumns 2 -columnAttach 1 \"right\" 0\n-columnWidth 1 100 -columnWidth 2 80;\ntext -label \"Range Start\";\nstring $STRangeStartField = `floatField -pre 1`;\ntext -label \"Range End\";\nstring $STRangeEndField = `floatField -pre 1`;\ntext -label \"FPS\";\nstring $STfpsField = `floatField -pre 1`;\nbutton -label \"GO\" -command \"ST_main ()\";\nshowWindow retimeWindow;\n}\nglobal proc ST_main ()\n{\nglobal string $STRangeStartField;\nglobal string $STRangeEndField;\nglobal string $STfpsField;\nfloat $STTotalRangeF;\nfloat $STMoveKeys;\nfloat $STTimeScale;\nfloat $STRangeStartF;\nfloat $STfps;\nfloat $STRangeEndF;\n//user input values\n$STRangeStartF = `floatField -q -v $STRangeStartField`;\n$STRangeEndF = `floatField -q -v $STRangeEndField`;\n$STfps = `floatField -q -v $STfpsField`;\n//simple maths\n$STTimeScale = 1/($STfps/24);\n$STTotalRangeF = $STRangeEndF - $STRangeStartF;\n$STMoveKeys = ($STTotalRangeF - ($STTotalRangeF * $STTimeScale)) * -1;\nselectKey -clear ;\nif ( $STMoveKeys > 0) {\n// if move keys is a positive value\nkeyframe -time (($STRangeEndF + 1) + \":\") -edit -relative -timeChange $STMoveKeys;\nscaleKey -t ($STRangeStartF + \":\" + $STRangeEndF) -timeScale $STTimeScale -timePivot $STRangeStartF;\n} else {\n// if move keys is a negetive value (switch order of scale - move)\nscaleKey -t ($STRangeStartF + \":\" + $STRangeEndF) -timeScale $STTimeScale -timePivot $STRangeStartF;\nkeyframe -time (($STRangeEndF + 1) + \":\") -edit -relative -timeChange $STMoveKeys;\n}\n// snap keys to integer time\nsnapKey -timeMultiple 1 ;\n//end\nprint \"start\";\nprint $STRangeStartF;\nprint \"end\";\nprint $STRangeEndF;\nprint \"fps\";\nprint $STfps;\n}\nglobal proc ST_temp ()\n{\nglobal float $ST_value;\nglobal string $STRangeStartField;\n$ST_value = `floatField -q -v $STRangeStartField`;\nprint $ST_value;\n}\nST_ScaleRetimer ();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Scale Keys From Mid Pivot UI" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "source keyScalerButtons.mel;\nkeyScalerButtons;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SclK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "scale_M.png" 
        -image1 "scale_M.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "#source a mel script from a specific subdirectory of maya/scripts/\nimport maya.mel as mel\nimport maya.cmds as cmds\n\nscriptName = 'dpkeyScaler' #(leave out the .mel)\nscriptCommand = 'keyScalerButtons'\nsubdirectory = 'C3dC'\n\n#set paths\ndirectoryPath = cmds.internalVar(userScriptDir=True)\nscriptPath = ( directoryPath + subdirectory + '/' + scriptName + '.mel')\nstring = ('source \"' + scriptPath + '\"')\n#run mel commands\nmel.eval(string)\nmel.eval(scriptCommand)\n\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Connect To Sublime" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\n# Close ports if they were already ope..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "sub" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "connectField.png" 
        -image1 "connectField.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n# Close ports if they were already open under another configuration\ntry: cmds.commandPort(name=\":7001\", close=True)\nexcept: cmds.warning('Could not close port 7001 (maybe it is not opened yet...)')\ntry: cmds.commandPort(name=\":7002\", close=True)\nexcept: cmds.warning('Could not close port 7002 (maybe it is not opened yet...)')\n\n# Open new ports\ncmds.commandPort(name=\":7001\", sourceType=\"mel\")\ncmds.commandPort(name=\":7002\", sourceType=\"python\")" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "incremental save" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "from pymel.core import *\nimport os\nimport maya.cmds as cmds\nimpo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "incS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "animateSnapshot.png" 
        -image1 "animateSnapshot.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from pymel.core import *\nimport os\nimport maya.cmds as cmds\nimport functools\n\ndef createUI ( pWindowTitle, pApplyCallback):\n    windowID = \"cbox\"\n\n    if cmds.window(windowID, exists=True):\n        cmds.deleteUI(windowID)\n\n    if cmds.windowPref(windowID, exists=True):\n        cmds.windowPref(windowID, remove=True)\n\n    cmds.window(windowID, title=pWindowTitle, sizeable=False, resizeToFitChildren=True)\n\n    cmds.columnLayout(columnAttach=('both', 5), columnWidth=400)\n    cmds.rowColumnLayout( numberOfColumns=2, columnWidth=[ (1,75), (2,300) ], columnOffset=[ (1,'right',3) ] )\n\n    cmds.text(label='Description:') #1,1\n    descField = cmds.textField(text='', width=300) #1,2\n\n    cmds.setParent('..')\n    \n    #blank separator to make empty row before buttons\n\n    cmds.separator(h=5, style='none')\n\n    cmds.setParent('..')\n    \n    cmds.rowColumnLayout( numberOfColumns=2, columnWidth=[(1,200), (2,200)])\n\n    cmds.button(label='Apply', width=100, command=functools.partial(pApplyCallback, descField))\n\n    def cancelCallBack (*pArgs):\n        if cmds.window(windowID, exists=True):\n            cmds.deleteUI(windowID)\n\n    cmds.button(label='Cancel', width=100, command=cancelCallBack)\n\n    cmds.showWindow()\n\ndef applyCallback(pDescField, *pArgs):\n    print 'Apply button pressed.'\n\n    desc = cmds.textField(pDescField, query=True, text=True)\n    if (len(desc) > 0):\n        desc = \"_\"+desc\n    print 'desc entered = %s' % (desc)\n\n\n    path = sceneName()\n    fileName = path.split('/')[-1].partition(\".\")[0]\n    newFileName = fileName+\"_0001\"+\".ma\"\n    incSaveFolder = \"incrementalSave\"\n    fileFolder = os.path.abspath(os.path.join(path, os.pardir))\n    incSaveFolderPath = os.path.join(fileFolder,incSaveFolder)\n    projectSaveFolder = os.path.join(incSaveFolderPath, fileName)\n    incSaveFilePath = os.path.join(projectSaveFolder, newFileName)\n     \n    if os.path.exists(incSaveFilePath):\n        savedFiles = os.listdir(projectSaveFolder)\n        savedFiles.sort()\n        incFiles = []\n        for i in savedFiles:\n            if fileName in i:\n                incFiles.append(i)\n        lastFile = incFiles[len(incFiles)-1]\n        name = lastFile.partition(\".\")[0]\n        nameParts=name.split(\"_\")\n        newName=nameParts[0]+\"_\"+(str(int(nameParts[1])+1).zfill(4))+desc+\".ma\"\n        incSaveFilePath = os.path.join(projectSaveFolder, newName)\n        system.saveAs(incSaveFilePath)\n        system.saveAs(path)\n    else:\n        os.makedirs(projectSaveFolder)\n        system.saveAs(incSaveFilePath)\n        system.saveAs(path)\n\n    print 'File saved as: %s' % (newName)\n\ncreateUI('Incremental Save - Add a description', applyCallback)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Load MR" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "//icon lightBulb.png\n\n//DECLVARS\n\n//int $TM_flag_loadMentalPlug;..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "MR" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "lightBulb.png" 
        -image1 "lightBulb.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//icon lightBulb.png\n\n//DECLVARS\n\n//int $TM_flag_loadMentalPlug;\n\n\n//metalrayplugin.  unload mentalRay plugin if it is already loaded  \nif(!`pluginInfo -query -loaded -name \"Mayatomr\"`) \n\n    {\n        \n        loadPlugin Mayatomr;\n        pluginInfo -edit -autoload true Mayatomr; \n        $TM_flag_loadMentalPlug = 1; \n        print \"Success: Mental Ray Plugin Has Been Loaded.  May the force be with you... \";\t\t\n        \n    }\nelse \n    {\n        \n        print \" Maya Already Has Mental Ray Loaded \";\t\t \n    }\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create Turntable 200 frames" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "// icon  rotate_M.png\n\n//It is assumed that mental ray is alread..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Turn" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "rotate_M.png" 
        -image1 "rotate_M.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// icon  rotate_M.png\n\n//It is assumed that mental ray is already loaded\n\nprint \"start\";\n\n//DECLVARS\nstring $TM_ObjList []=`ls -sl`;\nint    $TM_TBLsize = size($TM_ObjList);\n\n\n//create single node camera\ncamera \n-name \"renderCameraTurtable\"\n-centerOfInterest 5 \n-focalLength 35 \n-lensSqueezeRatio 1 \n-cameraScale 1 \n-horizontalFilmAperture 1.4173 \n-horizontalFilmOffset 0 \n-verticalFilmAperture 0.9449 \n-verticalFilmOffset 0 \n-filmFit Fill -overscan 1 \n-motionBlur 0 \n-shutterAngle 144 \n-nearClipPlane 0.1 \n-farClipPlane 10000 \n-orthographic 0 \n-orthographicWidth 30 \n-panZoomEnabled 0 \n-horizontalPan 0 \n-verticalPan 0 \n-zoom 1; \nobjectMoveCommand; \n\nrename \"renderCameraTurtable\";                             /* renames last active/selected item */\n\n//get camera name  not required\n\nsetAttr \"|renderCameraTurtable.translateY\" 50;\nsetAttr \"|renderCameraTurtable.translateZ\" 225;\n\nsetKeyframe  -time 1 \"renderCameraTurtable.tx\";\nsetKeyframe  -time 1 \"renderCameraTurtable.ty\";\nsetKeyframe  -time 1 \"renderCameraTurtable.tz\";\n\nsetKeyframe  -time 1 \"renderCameraTurtable.rx\";\nsetKeyframe  -time 1 \"renderCameraTurtable.ry\";\nsetKeyframe  -time 1 \"renderCameraTurtable.rz\";\n\n\n// really kewl sets panel to outliner/perspective... this is needed to ensure the lookthrough command will work (it needs a perspective panel open */\nsetNamedPanelLayout \"Persp/Outliner\"; updateToolbox();\nfindNewCurrentModelView;\nlookThru -nearClip 10 -farClip 1000 perspView renderCameraTurtable;  \n\nsetAttr \"renderCameraTurtableShape.displayResolution\" 1;\nsetAttr \"renderCameraTurtableShape.displayGateMaskOpacity\" 1;\nsetAttr \"renderCameraTurtableShape.overscan\" 1.05;\n\npolyPlane -w 1 -h 1 -sx 10 -sy 10 -ax 0 1 0 -cuv 2 -ch 1;  /* create standard polyplane */\nrename \"groundPlane\";                                      /* renames last active/selected item */\nsetAttr \"groundPlane.scaleX\" 400;\nsetAttr \"groundPlane.scaleY\" 400;\nsetAttr \"groundPlane.scaleZ\" 400;\n\nselect -r groundPlane ;\ndoGroup 0 1 1;\nrename \"rotation_grp\";                                     /* renames last active/selected item */\n\nsetAttr \"rotation_grp.rotateY\" 0;\nsetKeyframe  -time 1 \"rotation_grp.ry\";\nsetAttr \"rotation_grp.rotateY\" 360;\nsetKeyframe  -time 200 \"rotation_grp.ry\";\n\nselect -r rotation_grp ;\nselectKey -clear ;\nselectKey -add -k -t 1 -t 200 rotation_grp_rotateY ;    /* select keyframes 0 and 200 in graph Editor */\nkeyTangent -e -itt linear -ott linear;                   /*  change animation curve to tangent  */\n\n//defaultDirectionalLight(1, 1,1,1, \"0\", 0,0,0, 0);\n//rename \"directionalLight\";                                /* renames last active/selected item */\n//setAttr \"directionalLight.scaleX\" 20;\n//setAttr \"directionalLight.scaleY\" 20;\n//setAttr \"directionalLight.scaleZ\" 20;\n//setAttr \"directionalLight.translateX\" 90;\n//setAttr \"directionalLight.translateY\" 70;\n//setAttr \"directionalLight.translateZ\"  0;\n//setAttr \"directionalLight.rotateX\" -30;\n//setAttr \"directionalLight.rotateY\" 30;\n//setAttr \"directionalLight.rotateZ\" 0;\n//setAttr \"directionalLightShape.lightAngle\" 5;\n//setAttr \"directionalLightShape.shadowRays\" 50;\n\nselect -r renderCameraTurtable ;\nselect -add rotation_grp|groundPlane ;\n//select -add directionalLight ;\ndoGroup 0 1 1;\n\nrename \"turntableScale\";                                /* renames last active/selected item */\n\n//connectAttr -f rotation_grp.rotateY turntableScale|groundPlane.rotateY;\n\n\n//set first and last frames in Render Settings\nsetAttr \"defaultRenderGlobals.startFrame\" 1;\nsetAttr \"defaultRenderGlobals.endFrame\" 200;\n\n\n\n//add shaders to objects selected and group them into the rotate grp\n$i = 0;\nfor ( $i = 0; $i < $TM_TBLsize; $i++) \n    {\n        \n        select  $TM_ObjList[$i];\n        doGroup 0 1 1;\n        rename    (\"user_model\" + $i + \"_grp\");  \n        select -r (\"user_model\" + $i + \"_grp\");  \n        parent (\"user_model\" + $i + \"_grp\")  rotation_grp;\n        \n    }\n\n//playback settings\nint $endTime = 200;\nint $startTime = 1;\nplaybackOptions -max $endTime;\nplaybackOptions -min $startTime;\n\nprint \"Success:  A Turntable Group rotation_grp, Ground Plane and Camera Has Been Created\";\n\n//end backend Code\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
