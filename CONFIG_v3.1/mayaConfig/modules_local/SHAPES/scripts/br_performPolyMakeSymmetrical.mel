// --------------------------------------------------------------------------------------------------
//
// SHAPES
//
// blend shape editing tool for Maya
//
// required plugins:
//   SHAPESTools
//
// Ingo Clemens
// www.braverabbit.com
//
// copyright brave rabbit, Ingo Clemens 2014-2016
//
// --------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------
//
// THE SOFTWARE PRODUCT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
// IMPLIED, INCLUDING, BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NON-INFRINGEMENT OF THIRD-PARTY RIGHTS. THE ENTIRE RISK AS TO THE QUALITY AND
// PERFORMANCE OF THE SOFTWARE PRODUCT IS WITH YOU.
// NEITHER BRAVE RABBIT NOR ITS SUPPLIERS WARRANT THAT THE FUNCTIONS CONTAINED IN THE SOFTWARE
// PRODUCT WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE PRODUCT WILL BE
// UNINTERRUPTED OR ERROR-FREE. BRAVE RABBIT IS NOT OBLIGATED TO PROVIDE ANY UPDATES TO THE
// SOFTWARE.
// IN NO EVENT SHALL THE AUTHOR OF THIS SOFTWARE PRODUCT BE LIABLE FOR ANY SPECIAL, CONSEQUENTIAL,
// INCIDENTAL, DIRECT OR INDIRECT DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR
// LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, FOR PERSONAL INJURY, LOSS OF BUSINESS
// INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS
// PRODUCT, EVEN IF THE AUTHOR OF THIS SOFTWARE PRODUCT IS AWARE OF THE POSSIBILITY OF SUCH
// DAMAGES AND KNOWN DEFECTS, ANY CLAIM BY A THIRD PARTY AND EVEN IF THE REMEDY FAILS OF ITS
// ESSENTIAL PURPOSE.
//
// --------------------------------------------------------------------------------------------------


proc setOptionVars( int $forceFactorySettings )
{
	if ($forceFactorySettings || !`optionVar -ex br_polyMakeSymmetricalApply`)
		optionVar -iv br_polyMakeSymmetricalApply 0;
	
	if ($forceFactorySettings || !`optionVar -ex br_polyMakeSymmetricalAxis`)
		optionVar -iv br_polyMakeSymmetricalAxis 1;
	
	if ($forceFactorySettings || !`optionVar -ex br_polyMakeSymmetricalAverage`)
		optionVar -iv br_polyMakeSymmetricalAverage 0;
	
	if ($forceFactorySettings || !`optionVar -ex br_polyMakeSymmetricalDirection`)
		optionVar -iv br_polyMakeSymmetricalDirection 1;
	
	if ($forceFactorySettings || !`optionVar -ex br_polyMakeSymmetricalTolerance`)
		optionVar -fv br_polyMakeSymmetricalTolerance 0.001;
}


global proc br_polyMakeSymmetricalSetup( string $parent, int $forceFactorySettings )
{
	setOptionVars($forceFactorySettings);
	setParent $parent;
	
	radioButtonGrp -e -sl `optionVar -query br_polyMakeSymmetricalAxis` polyMakeSymmetricalAxis;
	checkBoxGrp -e -v1 `optionVar -query br_polyMakeSymmetricalDirection` polyMakeSymmetricalDirection;
	checkBoxGrp -e -v1 `optionVar -query br_polyMakeSymmetricalApply` polyMakeSymmetricalApply;
	checkBoxGrp -e -v1 `optionVar -query br_polyMakeSymmetricalAverage` polyMakeSymmetricalAverage;
	floatSliderGrp -e -v `optionVar -query br_polyMakeSymmetricalTolerance` polyMakeSymmetricalTolerance;
}


global proc br_polyMakeSymmetricalCallback (string $parent, int $doIt)
{
	setParent $parent;
	
	optionVar -iv br_polyMakeSymmetricalAxis
		`radioButtonGrp -q -sl polyMakeSymmetricalAxis`;
	
	optionVar -iv br_polyMakeSymmetricalDirection
		`checkBoxGrp -q -v1 polyMakeSymmetricalDirection`;
	
	optionVar -iv br_polyMakeSymmetricalApply
		`checkBoxGrp -q -v1 polyMakeSymmetricalApply`;
	
	optionVar -iv br_polyMakeSymmetricalAverage
		`checkBoxGrp -q -v1 polyMakeSymmetricalAverage`;
	
	optionVar -fv br_polyMakeSymmetricalTolerance
		`floatSliderGrp -q -v polyMakeSymmetricalTolerance`;
	
	if ($doIt) 
	{
		br_performPolyMakeSymmetrical 0;
		string $tmpCmd = "br_performPolyMakeSymmetrical 0 ";
		addToRecentCommandQueue $tmpCmd "Make Symmetrical";
	}
}


global proc br_polyMakeSymmetricalToggleDirectionLabel( int $val )
{
	string $label = "Direction (positive to negative)";
	if (!$val)
		$label = "Direction (negative to positive)";
	checkBoxGrp -e -l1 $label polyMakeSymmetricalDirection;
}


proc polyMakeSymmetricalOptions()
{
	// global template variable for form spacing
	global int $gOptionBoxTemplateFrameSpacing;
	
	string $commandName = "br_polyMakeSymmetrical";
	string $callback = $commandName + "Callback";
	string $setup = $commandName + "Setup";
	
	setOptionVars 0;
	
	// get the option box
	string $layout = getOptionBox();
	setParent $layout;
	
	// pass the command to the option box
	setOptionBoxCommandName($commandName);
	
	// activate the option box template
	setUITemplate -pushTemplate OptionBoxTemplate;
	
	// create the content
	waitCursor -state 1;
	
	// form layout
	string $parent = `formLayout polyMakeSymmetricalOptions`;
	
		// settings frame
		string $settingsFrame = 
		`frameLayout -label "Settings"`;
		
			columnLayout;
			
				radioButtonGrp 
					-numberOfRadioButtons 3
					-label "Symmetry Axis"
					-labelArray3 "X" "Y" "Z"
					-select 1
					-vertical
					polyMakeSymmetricalAxis;
				
				checkBoxGrp
					-label1 "Direction (positive to negative)"
					-value1 `optionVar -query br_polyMakeSymmetricalDirection`
					polyMakeSymmetricalDirection;
				
				checkBoxGrp -e -cc ("br_polyMakeSymmetricalToggleDirectionLabel #1") polyMakeSymmetricalDirection;
				br_polyMakeSymmetricalToggleDirectionLabel (`optionVar -query br_polyMakeSymmetricalDirection`);
				
				checkBoxGrp
					-label1 "Apply Symmetry (off for checking only)"
					-value1 `optionVar -query br_polyMakeSymmetricalApply`
					polyMakeSymmetricalApply;
				
				checkBoxGrp
					-label1 "Average (better but slower)"
					-value1 `optionVar -query br_polyMakeSymmetricalAverage`
					polyMakeSymmetricalAverage;
				
				floatSliderGrp
					-field true
					-minValue 0.00001
					-maxValue 1.0
					-value `optionVar -query br_polyMakeSymmetricalTolerance`
					-fieldMinValue 0.00001 
					-fieldMaxValue 10.0
					-label "Tolerance"
					polyMakeSymmetricalTolerance;
			
			setParent ..;
		
		setParent $parent;
	
	setParent ..;
	
	// attach description/settings frames to form layout
	formLayout -e
		-af $settingsFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $settingsFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $settingsFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $settingsFrame "bottom"
	$parent;
	
	waitCursor -state 0;
	
	// deactivate the template
	setUITemplate -popTemplate;
	
	// customize the buttons
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit 
		-label "Apply"
		-command ($callback + " " + $parent + " " + 1) 
		$applyBtn;
	
	string $applyAndCloseBtn = getOptionBoxApplyAndCloseBtn();
	button -edit 
		-label "Apply And Close"
		$applyAndCloseBtn;
	
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + " " + "; hideOptionBox")
		$saveBtn;
	
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;
	
	
	// set the window title
	setOptionBoxTitle("Make Symmetrical Options");
	
	// edit the help text
	setOptionBoxHelpTag("MakeSymmetrical");
	
	// set the current values
	eval (($setup + " " + $parent + " " + 0));
	
	// show the option box
	showOptionBox();
}


proc string assembleCmd()
{
	setOptionVars 0;
	
	string $cmd = "br_polyMakeSymmetrical -a ";
	$cmd += `optionVar -q br_polyMakeSymmetricalApply`;
	$cmd += " -ax ";
	string $axis = "x";
	if (`optionVar -q br_polyMakeSymmetricalAxis` == 2)
		$axis = "y";
	else if (`optionVar -q br_polyMakeSymmetricalAxis` == 3)
		$axis = "z";
	$cmd += $axis;
	$cmd += " -avg ";
	$cmd += `optionVar -q br_polyMakeSymmetricalAverage`;
	$cmd += " -dir ";
	$cmd += `optionVar -q br_polyMakeSymmetricalDirection`;
	$cmd += " -tol ";
	$cmd += `optionVar -q br_polyMakeSymmetricalTolerance`;
	
	return $cmd;
}


global proc string br_performPolyMakeSymmetrical( int $option )
{
	string $cmd = "";
	
	switch ($option) 
	{
		case 0:
			$cmd = `assembleCmd`;
			eval $cmd;
			break;
		case 1:
			polyMakeSymmetricalOptions;
			break;
		case 2:
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}
