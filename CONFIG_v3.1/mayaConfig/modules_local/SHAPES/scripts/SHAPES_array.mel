// --------------------------------------------------------------------------------------------------
//
// SHAPES
//
// blend shape editing tool for Maya
//
// required plugins:
//   SHAPESTools
//
// Ingo Clemens
// www.braverabbit.com
//
// copyright brave rabbit, Ingo Clemens 2014-2016
//
// --------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------
//
// THE SOFTWARE PRODUCT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
// IMPLIED, INCLUDING, BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NON-INFRINGEMENT OF THIRD-PARTY RIGHTS. THE ENTIRE RISK AS TO THE QUALITY AND
// PERFORMANCE OF THE SOFTWARE PRODUCT IS WITH YOU.
// NEITHER BRAVE RABBIT NOR ITS SUPPLIERS WARRANT THAT THE FUNCTIONS CONTAINED IN THE SOFTWARE
// PRODUCT WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE PRODUCT WILL BE
// UNINTERRUPTED OR ERROR-FREE. BRAVE RABBIT IS NOT OBLIGATED TO PROVIDE ANY UPDATES TO THE
// SOFTWARE.
// IN NO EVENT SHALL THE AUTHOR OF THIS SOFTWARE PRODUCT BE LIABLE FOR ANY SPECIAL, CONSEQUENTIAL,
// INCIDENTAL, DIRECT OR INDIRECT DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR
// LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, FOR PERSONAL INJURY, LOSS OF BUSINESS
// INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS
// PRODUCT, EVEN IF THE AUTHOR OF THIS SOFTWARE PRODUCT IS AWARE OF THE POSSIBILITY OF SUCH
// DAMAGES AND KNOWN DEFECTS, ANY CLAIM BY A THIRD PARTY AND EVEN IF THE REMEDY FAILS OF ITS
// ESSENTIAL PURPOSE.
//
// --------------------------------------------------------------------------------------------------


global proc int shapesArray_intArrayContains( int $item, int $array[] )
{
	int $exists = 0;
	for ($a in $array)
	{
		if ($item == $a)
			$exists = 1;
	}
	return $exists;
}


global proc float[] shapesArray_stringToFloatArray( string $valueString, string $separator )
{
	string $array[] = stringToStringArray($valueString, $separator);
	float $values[];
	for ($a in $array)
		$values[size($values)] = $a;
	return $values;
}


global proc float[] shapesArray_stringArrayToFloatArray( string $array[] )
{
	float $values[];
	for ($a in $array)
		$values[size($values)] = $a;
	return $values;
}


global proc string[] shapesArray_stringToQuotedArray( string $valueString, string $separator, string $quote )
{
	string $items[] = stringToStringArray($valueString, $separator);
	string $result[];
	for ($i in $items)
		$result[size($result)] = $quote + $i + $quote;
	return $result;
}

global proc string[] shapesArray_stringArrayToQuotedArray( string $array[], string $quote )
{
	string $result[];
	for ($i in $array)
		$result[size($result)] = $quote + $i + $quote;
	return $result;
}

global proc string shapesArray_floatArrayToString( float $array[], string $separator )
{
	string $result;
	for ($i in $array)
	{
		if ($result == "")
			$result = $i;
		else
			$result += $separator + $i;
	}

	return $result;
}

global proc string shapesArray_intArrayToString( int $array[], string $separator )
{
	string $result;
	for ($i in $array)
	{
		if ($result == "")
			$result = $i;
		else
			$result += $separator + $i;
	}

	return $result;
}

global proc int shapesArray_stringArrayFind( string $item, int $index, string $array[] )
{
	if ($index >= 0)
	{
		for ($i = $index; $i < size($array); $i++)
		{
			if ($array[$i] == $item)
				return $i;
		}
	}
	return -1;
}

global proc int shapesArray_floatArrayFind( float $item, int $index, float $array[] )
{
	if ($index >= 0)
	{
		for ($i = $index; $i < size($array); $i++)
		{
			if ($array[$i] == $item)
				return $i;
		}
	}
	return -1;
}

global proc int shapesArray_floatArrayInsertAtIndex( int $index, float $array[], float $item )
{
	int $len = size($array);

	if ($index < 0)
		return 0;

	if ($index >= $len)
	{
		$array[$len] = $item;
		return 1;
	}

	for ($i = $len - 1; $i >= $index; $i--)
		$array[$i + 1] = $array[$i];

	$array[$index] = $item;

	return 1;
}

global proc SHAPES_array(){}
