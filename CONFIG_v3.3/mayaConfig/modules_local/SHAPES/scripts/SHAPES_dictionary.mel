// --------------------------------------------------------------------------------------------------
//
// SHAPES
//
// blend shape editing tool for Maya
//
// required plugins:
//   SHAPESTools
//
// Ingo Clemens
// www.braverabbit.com
//
// copyright brave rabbit, Ingo Clemens 2014-2016
//
// --------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------
//
// THE SOFTWARE PRODUCT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
// IMPLIED, INCLUDING, BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NON-INFRINGEMENT OF THIRD-PARTY RIGHTS. THE ENTIRE RISK AS TO THE QUALITY AND
// PERFORMANCE OF THE SOFTWARE PRODUCT IS WITH YOU.
// NEITHER BRAVE RABBIT NOR ITS SUPPLIERS WARRANT THAT THE FUNCTIONS CONTAINED IN THE SOFTWARE
// PRODUCT WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE PRODUCT WILL BE
// UNINTERRUPTED OR ERROR-FREE. BRAVE RABBIT IS NOT OBLIGATED TO PROVIDE ANY UPDATES TO THE
// SOFTWARE.
// IN NO EVENT SHALL THE AUTHOR OF THIS SOFTWARE PRODUCT BE LIABLE FOR ANY SPECIAL, CONSEQUENTIAL,
// INCIDENTAL, DIRECT OR INDIRECT DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR
// LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, FOR PERSONAL INJURY, LOSS OF BUSINESS
// INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS
// PRODUCT, EVEN IF THE AUTHOR OF THIS SOFTWARE PRODUCT IS AWARE OF THE POSSIBILITY OF SUCH
// DAMAGES AND KNOWN DEFECTS, ANY CLAIM BY A THIRD PARTY AND EVEN IF THE REMEDY FAILS OF ITS
// ESSENTIAL PURPOSE.
//
// --------------------------------------------------------------------------------------------------


global proc string[] dict_getValueArray( string $dict, string $key )
{
	string $result = `python("SHAPES().dict_getValueArray(\"" + $dict + "\", \"" + $key + "\")")`;
	if ($result == "")
		return {};
	return stringToStringArray($result, "%");
}


global proc float[] dict_getFloatValueArray( string $dict, string $key )
{
	string $result = `python("SHAPES().dict_getValueArray(\"" + $dict + "\", \"" + $key + "\")")`;
	if ($result == "")
		return {};
	return shapesArray_stringToFloatArray($result, "%");
}


global proc string dict_getStringValue( string $dict, string $key )
{
	string $result = `python("SHAPES().dict_getValue(\"" + $dict + "\", \"" + $key + "\")")`;
	return $result;
}


global proc float dict_getValue( string $dict, string $key )
{
	string $result = `python("SHAPES().dict_getValue(\"" + $dict + "\", \"" + $key + "\")")`;
	if ($result == "")
		return -1;
	float $value = $result;
	return $value;
}


global proc int dict_getBoolValue( string $dict, string $key )
{
	string $result = `python("SHAPES().dict_getValue(\"" + $dict + "\", \"" + $key + "\")")`;
	if ($result == "")
		return -1;
	int $val;
	if ($result == "true")
		$val = 1;
	return $val;
}


global proc string dict_setBoolValue( string $dict, string $key, int $value )
{
	string $bool = "true";
	if (!$value)
		$bool = "false";
	string $result = `python("SHAPES().dict_setValue(\"" + $dict + "\", \"" + $key + "\", \"" + $bool + "\")")`;
	return $result;
}


global proc string[] dict_getArrayValueArrayItemAtIndex( string $dict, string $key, int $index )
{
	string $result = `python("SHAPES().dict_getArrayValueArrayItemAtIndex(\"" + $dict + "\", \"" + $key + "\", " + $index + ")")`;
	if ($result == "")
		return {};
	// compensate for any array entries which contain an empty string
	// which get lost during regular string to array conversion
	$result = substituteAllString($result, "%%", "%-%");
	if (startsWith($result, "%"))
		$result = "-" + $result;
	if (endsWith($result, "%"))
		$result += "-";
	return dict_stringToCleanArray($result, "%");
}


global proc string dict_addArrayValueArrayItems( string $dict, string $key, string $values[] )
{
	for ($i = 0; $i < size($values); $i ++)
		$values[$i] = "'" + $values[$i] + "'";
	string $result = `python("SHAPES().dict_addArrayValueArrayItems(\"" + $dict + "\", \"" + $key + "\", \"[" + stringArrayToString($values, ",") + "]\")")`;
	return $result;
}


global proc string[] dict_getIndexedSubValue( string $dict, string $key, int $subIndex, string $subKey )
{
	string $result = `python("SHAPES().dict_getIndexedSubValue(\"" + $dict + "\", \"" + $key + "\", " + $subIndex + ", \"" + $subKey + "\")")`;
	if ($result == "")
		return {};
	return stringToStringArray($result, "%");
}


global proc string dict_setIndexedSubValue( string $dict, string $key, int $subIndex, string $subKey, string $value )
{
	string $result = `python("SHAPES().dict_setIndexedSubValue(\"" + $dict + "\", \"" + $key + "\", " + $subIndex + ", \"" + $subKey + "\", \"" + $value + "\")")`;
	return $result;
}


global proc string dict_setSubValue( string $dict[], int $id, string $key, string $subKey, string $value )
{
	$dict[$id] = `python("SHAPES().dict_setSubValue(\"" + $dict[$id] + "\", \"" + $key + "\", \"" + $subKey + "\", \"" + $value + "\")")`;
	return $dict[$id];
}


global proc string[] dict_getKeys( string $dict )
{
	string $result = `python("SHAPES().dict_getKeys(\"" + $dict + "\")")`;
	return stringToStringArray($result, "%");
}


global proc int[] dict_getIntKeys( string $dict )
{
	string $result = `python("SHAPES().dict_getKeys(\"" + $dict + "\")")`;
	string $items[] = stringToStringArray($result, "%");
	int $keys[];
	for ($i = 0; $i < size($items); $i ++)
		$keys[size($keys)] = $items[$i];
	return $keys;
}


global proc string dict_setValue( string $dict[], int $index, string $key, string $value )
{
	$dict[$index] = `python("SHAPES().dict_setValue(\"" + $dict[$index] + "\", \"" + $key + "\", \"" + $value + "\")")`;
	return $dict[$index];
}


global proc string dict_setArrayValue( string $dict[], int $index, string $key, float $values[] )
{
	$dict[$index] = `python("SHAPES().dict_setValue(\"" + $dict[$index] + "\", \"" + $key + "\", \"[" + shapesArray_floatArrayToString($values, ",") + "]\")")`;
	return $dict[$index];
}


global proc string dict_setStringArrayValue( string $dict[], int $index, string $key, string $values[] )
{
	if (!startsWith($values[0], "[") && !startsWith($values[0], "{"))
	{
		for ($i = 0; $i < size($values); $i ++)
			$values[$i] = "'" + $values[$i] + "'";
	}
	$dict[$index] = `python("SHAPES().dict_setValue(\"" + $dict[$index] + "\", \"" + $key + "\", \"[" + stringArrayToString($values, ",") + "]\")")`;
	return $dict[$index];
}


global proc string dict_addArrayValue( string $dict[], int $index, string $key, string $value )
{
	$dict[$index] = `python("SHAPES().dict_addArrayValue(\"" + $dict[$index] + "\", \"" + $key + "\", \"" + $value + "\")")`;
	return $dict[$index];
}


global proc string dict_removeArrayValue( string $dict[], int $index, string $key, string $value )
{
	$dict[$index] = `python("SHAPES().dict_removeArrayValue(\"" + $dict[$index] + "\", \"" + $key + "\", \"" + $value + "\")")`;
	return $dict[$index];
}


global proc string dict_removeKey( string $dict, string $key )
{
	$dict = `python("SHAPES().dict_removeKey(\"" + $dict + "\", \"" + $key + "\")")`;
	return $dict;
}


global proc string[] dict_stringToCleanArray( string $input, string $separator )
{
	string $returnArray[] = stringToStringArray($input, $separator);
	for ($i = 0; $i < size($returnArray); $i ++)
		$returnArray[$i] = substitute("-", $returnArray[$i], "");
	return $returnArray;
}


global proc string[] dict_sortDictArray( string $array[], string $key )
{
	//for ($i = 0; $i < size($array); $i ++)
	//	$array[$i] = "'" + $array[$i] + "'";
	string $result = `python("SHAPES().dict_sortDictArray(\"[" + stringArrayToString($array, ",") + "]\", \"" + $key + "\")")`;
	if ($result == "")
		return {};
	return stringToStringArray($result, "%");
}


global proc SHAPES_dictionary(){}
