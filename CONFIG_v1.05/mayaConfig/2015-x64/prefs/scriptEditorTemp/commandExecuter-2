//------------------------wblend--------------------------------
// Julian Mann and Elie Jamaa July 1998-------------------------

// blend animated hierarchies (sources) onto a target  hierarchy

// hierarchies must match
// this version only works on joints as it is at its most powerfull 
// for character blending.

// If start and end time are set to the same value, no timing  attributes or connections will be created

// If start time is after end time timing control attributes with no min or max value 
// will be created for each source hierarchy

// If start time is before end time  timing control attributes with min and max values
// will be created for each source hierarchy

// timing attributes will only affect channels which are animated and are selected in the channel mask
// at the time wblend is invoked (i.e. when the blend button is pressed)

// blending attributes are created for each source and will blend between all channels selected
// in the channel mask at the time wblend is invoked (i.e. when the blend button is pressed)

//
global proc theBlender (string $channels[], int  $rnge[] ) {
	
	
	// gather some information about the selections
	string $parents[] = `ls -sl -type "joint"`;
	string $sources[];
	string $cmd;
	int $target_index = (size($parents) - 1);
	string $target = $parents[$target_index];

	for ($i = 0; $i < $target_index; $i++) {
		 $sources[$i] = $parents[$i];
	}
	int $num_sources = size($sources);
	select -hi $target;
	//specialbit......................
	//select -d "*hook*";
	//specialbit......................

	string $target_children[] = `ls -sl -type "joint"`;
	int $num_target_children = size($target_children);
	string $source_children[];

	int $mismatch = 0;
	// find out if the hierarchies match
	for ($item in  $parents) {
		select -hi $item;
	//specialbit......................
	//select -d "*hook*";
	//specialbit......................

		string $children[] = `ls -sl -type "joint"`;
		if ( size($children) !=  $num_target_children) {
			$mismatch = 1;
		}
	}
	if ($mismatch) {
		print "hierarchy does not match";
	} else {
		print "hierarchy does match";
		// doit
		// convert the current angular unit to radians
		// this prevents the creation of redundent unit conversion nodes
		currentUnit -a rad;
		// if start and end range is equal then do not make time controls
		// if start is before end then do not limit the slider
		// else use normal limits
		string $limit_string;
		if ($rnge[0] != $rnge[1]) {
			// do the time control bit
			if ($rnge[0] > $rnge[1]) {
				$limit_string = " ";
			} else {
				$limit_string = (" -min " + $rnge[0] + " -max " + $rnge[1] + " -dv " + $rnge[0] + " ");
			}
			// add the controlling attributes
			float $conv_factor = `get_conv_factor`;
			for ($source in $sources) {


				//  make the time slider
				string $time_add_command = ("addAttr -at double -ln " + $source  + "Time " + $limit_string +  $target);
				if (!`objExists ($target + "." + $source + "Time")`) {
					eval $time_add_command ;
					setAttr -e -keyable true  ($target + "." + $source + "Time");
				}
				string $unitToTime = `createNode unitToTimeConversion`;
				setAttr ($unitToTime + ".cf") $conv_factor;
				connectAttr -f ($target + "." + $source + "Time") ($unitToTime + ".input");

				// connect the targets's sourceTimeControl attribute (via a unit conversion node ) to the 
				// to the animated channels of the source
				select -r -hi $source;
	//specialbit......................
	//select -d "*hook*";
	//specialbit......................

				string $source_children[] = `ls -sl -type "joint"`;
				for ($child in $source_children) {
					string $conns[] = `listIOConnections  $child nodes`;
					string $in_channels[] = `listIOConnections $child outChannels`;
					int $siz = `size $conns`;
					for ($i = 0; $i < $siz; $i ++) { 	
						string $type = `nodeType $conns[$i]`;
						if( $type == "animCurveTL" || $type == "animCurveTA" || $type == "animCurveTU" ) { 
							for  ($channel in $channels) {
								print ($in_channels[$i] + " " + $channel +"\n");
								if ($in_channels[$i] == $channel) {
									connectAttr -f ($unitToTime + ".output") ($conns[$i] + ".input");
								}
							}
						}
					}
				}	
			}
		}
		// do the blending bit
		for ($source in $sources) {
			//create an influence attribute for the source
			if (!`objExists ($target + "." + $source + "Influence")`) {
				addAttr -at double -ln ($source + "Influence") -min 0 -max 1 -dv 0  $target ;
				setAttr -e -keyable true  ($target + "." + $source + "Influence");
			}
		}

		// connect the output channels of the source's children and the influence attribute to the blend node
		for ($i = 0; $i < $num_target_children; $i++) {
			for ( $channel in $channels ) {
				string $existing_connections[] = `listConnections -s 1 -d 0 ($target_children[$i] + "." + $channel)`;
				string $blend_node;
				if ((`size $existing_connections` > 0) && (`nodeType $existing_connections[0]` == "blendWeighted")) {
					$blend_node = $existing_connections[0];
				} else {
					$blend_node = `createNode blendWeighted`;
					// connect the blend node output to the target's children's channels
					connectAttr -f ($blend_node + ".output") ($target_children[$i] + "." + $channel);
				}
				for ($source in $sources) {
					
					select -r -hi $source;
	//specialbit......................
	//select -d "*hook*";
	//specialbit......................

					string $source_children[] = `ls -sl -type "joint"`;
					int $next_available = `findNextIndex ($blend_node + ".input")`;
					print ("NA = "+ $next_available  + "\n");
					connectAttr -f ($source_children[$i]+"."+$channel) ($blend_node+".input["+$next_available+"]");
					print ("LEFT = " + $target + "." + $source + "Influence");
					print ("RIGHT = " + $blend_node + ".weight[" + $next_available + "]");
					connectAttr -f  ($target + "." + $source + "Influence")   ($blend_node + ".weight[" + $next_available + "]");
				}
			}
		}
		// return the units to degrees
		currentUnit -a deg;
		select -r $target;
	}
}
global proc int findNextIndex ( string $conn ) {
	string $myarr[] = `listIOConnections $conn "outChannels"`;
	string $buf[];
	int $conns[];
	int $count;
	if (`size  $myarr` == 0) {
		return 0 ;
	}
	
	for ($item in $myarr) {
		tokenize $item "[]" $buf;
		$conns[$count] = $buf[1];
		$count ++;
	}
	
	$conns = `sort $conns`;
	for ($i = 0; $i < `size $conns`; $i ++) {
		if ($conns[$i] != $i) {
			return $i;
		}
	}
	return ($i + 1);
}






global proc string[] listIOConnections ( string $node, string $what ) {
	// proc to return specified components of a list connections command
	// i.e. either output attribute of the given node, or connected nodes name
	int $buf_index;
	int $pair_index;
	int $j;
	if ($what == "nodes" ) {
		$buf_index = 0;
		$pair_index = 1;
	}
	if ($what == "outChannels" ) { 
		$buf_index = 1;
		$pair_index = 0;
	}
	string $conns[];
	string $c[] = `listConnections -c 1 -d 0 -s 1 -p 1  $node`;
	int $siz = `size $c`;
	int $count;
	// the output of listConnections is pairs of connected attributes
	// so we do a 2 step
	for ($i = 0; $i < $siz; $i += 2) {
		$j = $i + $pair_index;
		string $buffer[];
                tokenize  $c[$j] "." $buffer;
		$conns[$count] = $buffer[$buf_index];
		$count++;
	}
	return $conns;
}





// turn the channel checkbox values into an array of channel names----------------------------------
// the  channel checkbox values are in the form of 3 boolean triplets 
// so we turn them into a string array where only the channels turned on are returned
global proc string[] chanArray (string $tcs, string $rcs, string $scs) {
	string $sArray[] = {$tcs, $rcs, $scs};
	string $channel_prefix[] = {"translate", "rotate", "scale"};
	string $channels[];
	int $count = 0;
	for ($index = 0; $index <= 2; $index++) {	
		if ( `checkBoxGrp -q -v1 $sArray[$index]`) {
			$channels[$count] = ($channel_prefix[$index] + "X");
			$count ++;	
		};
		if ( `checkBoxGrp -q -v2 $sArray[$index]`) {
			$channels[$count] = ($channel_prefix[$index] + "Y");
			$count ++;	
		};
		if ( `checkBoxGrp -q -v3 $sArray[$index]`) {
			$channels[$count] = ($channel_prefix[$index] + "Z");
			$count ++;	
		};
	}
	return $channels;
}
// query the range slider values and make an array ----------------------------------
global proc int[]  rangeArray (string $sfs, string $efs ) {
	int $rnge[];
	$rnge[0] =  `intSliderGrp -q -v $sfs`;
	$rnge[1] =  `intSliderGrp -q -v $efs`;
	
	return $rnge;
}


// Build UI ---------------------------------------------------------------------------------------------
global proc wblend() {
	
	

	string $wbwin = `window	-w 400 -h 256
		-t "  Elian wblend         - July 1998 -"
		-in "- wblend -"
		-s 0 -rtf 1` ;

	string $form = `formLayout`;
		
		string $blendCmd;
		$bottomLine = `rowLayout -nc 2 -ct2 both both -cw2 200 200`;
	formLayout -e -attachForm $bottomLine "bottom" 6 $form;
		setParent ..;

	menuBarLayout;
		menu -l "Help" -hm 1;
		menuItem -l "Help..." -c BLanimHelp;
		menuItem -l "About the wBlend" -c BLanimHelp;

	columnLayout -adj 1;
		separator; separator; separator;

	frameLayout -cl 1 -cll 1 -l "Channels" -mw 0 -mh 10 -bs etchedIn;
		columnLayout;
				
			string $tcs = `checkBoxGrp	-ncb 3 -l "Translate" -cat 1 right 20 -cw 1 150 -cw 2 50 -cw 3 50
					-la3 "X" "Y" "Z" -v1 0 -v2 0 -v3 0`;
			string $rcs = `checkBoxGrp	-ncb 3 -l "Rotate" -cat 1 right 20 -cw 1 150 -cw 2 50 -cw 3 50
					-la3 "X" "Y" "Z" -v1 1 -v2 1 -v3 1`;
			string $scs = `checkBoxGrp	-ncb 3 -l "Scale" -cat 1 right 20 -cw 1 150 -cw 2 50 -cw 3 50
					-la3 "X" "Y" "Z" -v1 0 -v2 0 -v3 0`;

			text -l " ";

			setParent ..;
			setParent ..;

	frameLayout -cl 1 -cll 1 -l "Frame Range" -mw 0 -mh 16 -bs etchedIn;
		columnLayout;
			
			string $sfs = `intSliderGrp	-l "Start Frame"
					-field true
					-min 0 -max 100 -fmn -1000 -fmx 1000`;
			string $efs = `intSliderGrp	-l "End Frame"
					-field true
					-min 0 -max 100 -fmn -1000 -fmx 1000`;

			text -l " ";

			setParent ..;
			setParent ..;
			$blendCmd = ("theBlender `chanArray " + $tcs + " " + $rcs + " " + $scs + "`  `rangeArray " + $sfs + " " + $efs + "`");
			print ($blendCmd + "\n");
	button -vis 0 -w 400 -h 36;
		setParent $bottomLine;
		button -l "BLEND !"	-al center	-command $blendCmd;
		button -l "Cancel"	-al center	-command ("deleteUI " + $wbwin + ";");



	showWindow;
}


global proc BLanimHelp () {
	print " --- Sorry, Not Available Yet. ---";
}

global proc float get_conv_factor () {
	// make a temporary setup to find the conversion factor for the unit conversion nodes
	string $tmp_nd = `createNode transform`;
	string $tmp_at = `addAttr -at double -ln tmp_at`;
	string $tmp_crv = `createNode animCurveTL`;
	connectAttr -f ($tmp_nd + ".tmp_at") ( $tmp_crv + ".input");
	string 	 $tmp_ut[] = `listConnections $tmp_nd`;
	float $conv_factor = `getAttr ($tmp_ut[0] + ".cf")`;
	delete $tmp_nd $tmp_crv $tmp_ut;
	return $conv_factor;
}

wblend();