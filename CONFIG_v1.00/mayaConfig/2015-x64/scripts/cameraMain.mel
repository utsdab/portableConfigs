/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: cameraMain v1.0
''    Author: Big Idea Productions and anonymous
''    Last Updated: August 16, 2001
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=rendering#1202
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

//----BEGINDOC----------------------------------------------------------------
// Name:	cameraMain.mel - MEL Script
//----------------------------------------------------------------------------
//
// Synopsis:	cameraMain
//
// Description: This script creates a camera called cameraMain. This camera
//		can be keyframed to "match" other cameras based upon
//		a cameraNumber.  This provides the functionality of being able
//		to "look-through" and "render-through" multiple cameras.
//
// Arguments:	NONE
//
// Returns:	NONE
//
// Requires:	NONE
//
// Authors:	Not Sure, modified by Henry Vera
//
//----ENDDOC------------------------------------------------------------------

global proc cameraMain() {
  if (! `objExists cameraMain`) {
    camera -n cameraMain -centerOfInterest 5 -focalLength 35 -lensSqueezeRatio 1 -cameraScale 1 -horizontalFilmAperture 0.864 -horizontalFilmOffset 0 -verticalFilmAperture 0.630 -verticalFilmOffset 0 -filmFit Overscan -overscan 1.01 -motionBlur 0 -shutterAngle 144 -nearClipPlane 1 -farClipPlane 10000 -orthographic 0 -orthographicWidth 30;
    setAttr cameraMain1.inheritsTransform 0;
    rename "cameraMainShape2" "cameraMainShape";
    rename "cameraMain1" "cameraMain";
    setAttr -k on cameraMainShape.dof;
  }
  
  if (! `objExists cameraMain.cameraNumber`) {
    addAttr -ln cameraNumber -at long  |cameraMain;
    setAttr -e -keyable true |cameraMain.cameraNumber;
  }
  if (! `objExists cameraMain.numberOfCameras`) {
   addAttr -ln numberOfCameras -at long |cameraMain;
   setAttr -e -keyable true |cameraMain.numberOfCameras;
  }
  
  if (! `objExists cameraMainExpr`) {
    expression -s "// NOTE: When rendering, make sure that cameraMain is renderable and the other cameras\n// are not. The main camera will render out the various cut frames.\n// Set a variable for the cameraNumber that you want to cut to.\n\nint $cameraNumber = cameraMain.cameraNumber;\n\n// Set a string variable for the word camera plus the cameraNumber then\n// set string variables for the desired channels\n// Note that you must set up strings for various attributes on the camera's \n// transform and shape nodes. This expression only covers the main camera attributes.\n// You can add more attributes by editting the script at various levels.\n\nstring $cameraCut = \"camera\" + $cameraNumber;\nstring $cameraCutShape = \"cameraShape\" + $cameraNumber;\n\n// Check to see if the cameraCut camera exists. If it does, set the various attributes on the \n// Main camera to match the cut camera. If it doesn't then use some default values\n\nif (`objExists $cameraCut` == 1){\n  string $cameraCutShape_horizontalFilmAperture = $cameraCutShape + \".horizontalFilmAperture\";\n  string $cameraCutShape_verticalFilmAperture = $cameraCutShape + \".verticalFilmAperture \";\n  string $cameraCutShape_focalLength = $cameraCutShape + \".focalLength\";\n  string $cameraCutShape_squeezeRatio = $cameraCutShape + \".lensSqueezeRatio\";\n  string $cameraCutShape_fStop = $cameraCutShape + \".fStop\";\n  string $cameraCutShape_focusDistance = $cameraCutShape + \".focusDistance\";\n  string $cameraCutShape_focusRegionScale = $cameraCutShape + \".focusRegionScale\";\n  string $cameraCutShape_shutterAngle = $cameraCutShape + \".shutterAngle\";\n  string $cameraCutShape_centerOfInterest = $cameraCutShape + \".centerOfInterest\";\n  string $cameraCutShape_nearClipPlane = $cameraCutShape + \".nearClipPlane\";\n  string $cameraCutShape_farClipPlane = $cameraCutShape + \".farClipPlane\";\n\n  // Set float variables for the values of the various attributes\n  float $cameraCutShapeValue_horizontalFilmAperture = `getAttr $cameraCutShape_horizontalFilmAperture`;\n  float $cameraCutShapeValue_verticalFilmAperture = `getAttr $cameraCutShape_verticalFilmAperture`;\n  float $cameraCutShapeValue_focalLength = `getAttr $cameraCutShape_focalLength`;\n  float $cameraCutShapeValue_squeezeRatio = `getAttr $cameraCutShape_squeezeRatio`;\n  float $cameraCutShapeValue_fStop = `getAttr $cameraCutShape_fStop`;\n  float $cameraCutShapeValue_focusDistance = `getAttr $cameraCutShape_focusDistance`;\n  float $cameraCutShapeValue_focusRegionScale = `getAttr $cameraCutShape_focusRegionScale`;\n  float $cameraCutShapeValue_shutterAngle = `getAttr $cameraCutShape_shutterAngle`;\n  float $cameraCutShapeValue_centerOfInterest = `getAttr $cameraCutShape_centerOfInterest`;\n  float $cameraCutShapeValue_nearClipPlane = `getAttr $cameraCutShape_nearClipPlane`;\n  float $cameraCutShapeValue_farClipPlane = `getAttr $cameraCutShape_farClipPlane`;\n\n  // Set the various attributes on the Main camera to match the cut camera.\n  // NOTE: Some of the attributes have been commented out so that by default you are \n  // able to use cameraMain to set the attribute instead of the cut camera. If you \n  // want to use the cut cameras values then uncomment these parts of the script.\n  float $tV[3] = `xform -q -ws -t $cameraCut`;\n  cameraMain.translateX = $tV[0];\n  cameraMain.translateY = $tV[1];\n  cameraMain.translateZ = $tV[2];\n  float $rV[3] = `xform -q -ws -ro $cameraCut`;\n  cameraMain.rotateX = $rV[0];\n  cameraMain.rotateY = $rV[1];\n  cameraMain.rotateZ = $rV[2];\n  cameraMainShape.horizontalFilmAperture = $cameraCutShapeValue_horizontalFilmAperture;\n  cameraMainShape.verticalFilmAperture = $cameraCutShapeValue_verticalFilmAperture;\n  cameraMainShape.focalLength = $cameraCutShapeValue_focalLength;\n  cameraMainShape.lensSqueezeRatio = $cameraCutShapeValue_squeezeRatio;\n  cameraMainShape.fStop = $cameraCutShapeValue_fStop;\n  cameraMainShape.focusDistance = $cameraCutShapeValue_focusDistance;\n  cameraMainShape.focusRegionScale = $cameraCutShapeValue_focusRegionScale;\n  cameraMainShape.shutterAngle = $cameraCutShapeValue_shutterAngle;\n  cameraMainShape.centerOfInterest = $cameraCutShapeValue_centerOfInterest;\n  cameraMainShape.nearClipPlane = $cameraCutShapeValue_nearClipPlane;\n  cameraMainShape.farClipPlane = $cameraCutShapeValue_farClipPlane;\n\n}\nelse{\n  // set cameraMain to default values if there is no camera to match the cameraNumber\n  cameraMain.translateX = 0;\n  cameraMain.translateY = 0;\n  cameraMain.translateZ = 0;\n  cameraMain.rotateX = 0;\n  cameraMain.rotateY = 0;\n  cameraMain.rotateZ = 0;\n  cameraMainShape.horizontalFilmAperture = 1.42;\n  cameraMainShape.verticalFilmAperture = 0.945;\n  cameraMainShape.focalLength = 35;\n  cameraMainShape.lensSqueezeRatio = 1;\n  cameraMainShape.fStop = 5.6;\n  cameraMainShape.focusDistance = 5;\n  cameraMainShape.focusRegionScale = 1;\n  cameraMainShape.shutterAngle = 144;\n  cameraMainShape.centerOfInterest = 5;\n  cameraMainShape.nearClipPlane = 1;\n  cameraMainShape.farClipPlane = 10000;\n}"  -o cameraMain -ae 1 -uc all -n cameraMainExpr;
  }
  else {
    expression -e -s "// NOTE: When rendering, make sure that cameraMain is renderable and the other cameras\n// are not. The main camera will render out the various cut frames.\n// Set a variable for the cameraNumber that you want to cut to.\n\nint $cameraNumber = cameraMain.cameraNumber;\n\n// Set a string variable for the word camera plus the cameraNumber then\n// set string variables for the desired channels\n// Note that you must set up strings for various attributes on the camera's \n// transform and shape nodes. This expression only covers the main camera attributes.\n// You can add more attributes by editting the script at various levels.\n\nstring $cameraCut = \"camera\" + $cameraNumber;\nstring $cameraCutShape = \"cameraShape\" + $cameraNumber;\n\n// Check to see if the cameraCut camera exists. If it does, set the various attributes on the \n// Main camera to match the cut camera. If it doesn't then use some default values\n\nif (`objExists $cameraCut` == 1){\n  string $cameraCutShape_horizontalFilmAperture = $cameraCutShape + \".horizontalFilmAperture\";\n  string $cameraCutShape_verticalFilmAperture = $cameraCutShape + \".verticalFilmAperture \";\n  string $cameraCutShape_focalLength = $cameraCutShape + \".focalLength\";\n  string $cameraCutShape_squeezeRatio = $cameraCutShape + \".lensSqueezeRatio\";\n  string $cameraCutShape_fStop = $cameraCutShape + \".fStop\";\n  string $cameraCutShape_focusDistance = $cameraCutShape + \".focusDistance\";\n  string $cameraCutShape_focusRegionScale = $cameraCutShape + \".focusRegionScale\";\n  string $cameraCutShape_shutterAngle = $cameraCutShape + \".shutterAngle\";\n  string $cameraCutShape_centerOfInterest = $cameraCutShape + \".centerOfInterest\";\n  string $cameraCutShape_nearClipPlane = $cameraCutShape + \".nearClipPlane\";\n  string $cameraCutShape_farClipPlane = $cameraCutShape + \".farClipPlane\";\n\n  // Set float variables for the values of the various attributes\n  float $cameraCutShapeValue_horizontalFilmAperture = `getAttr $cameraCutShape_horizontalFilmAperture`;\n  float $cameraCutShapeValue_verticalFilmAperture = `getAttr $cameraCutShape_verticalFilmAperture`;\n  float $cameraCutShapeValue_focalLength = `getAttr $cameraCutShape_focalLength`;\n  float $cameraCutShapeValue_squeezeRatio = `getAttr $cameraCutShape_squeezeRatio`;\n  float $cameraCutShapeValue_fStop = `getAttr $cameraCutShape_fStop`;\n  float $cameraCutShapeValue_focusDistance = `getAttr $cameraCutShape_focusDistance`;\n  float $cameraCutShapeValue_focusRegionScale = `getAttr $cameraCutShape_focusRegionScale`;\n  float $cameraCutShapeValue_shutterAngle = `getAttr $cameraCutShape_shutterAngle`;\n  float $cameraCutShapeValue_centerOfInterest = `getAttr $cameraCutShape_centerOfInterest`;\n  float $cameraCutShapeValue_nearClipPlane = `getAttr $cameraCutShape_nearClipPlane`;\n  float $cameraCutShapeValue_farClipPlane = `getAttr $cameraCutShape_farClipPlane`;\n\n  // Set the various attributes on the Main camera to match the cut camera.\n  // NOTE: Some of the attributes have been commented out so that by default you are \n  // able to use cameraMain to set the attribute instead of the cut camera. If you \n  // want to use the cut cameras values then uncomment these parts of the script.\n  float $tV[3] = `xform -q -ws -t $cameraCut`;\n  cameraMain.translateX = $tV[0];\n  cameraMain.translateY = $tV[1];\n  cameraMain.translateZ = $tV[2];\n  float $rV[3] = `xform -q -ws -ro $cameraCut`;\n  cameraMain.rotateX = $rV[0];\n  cameraMain.rotateY = $rV[1];\n  cameraMain.rotateZ = $rV[2];\n  cameraMainShape.horizontalFilmAperture = $cameraCutShapeValue_horizontalFilmAperture;\n  cameraMainShape.verticalFilmAperture = $cameraCutShapeValue_verticalFilmAperture;\n  cameraMainShape.focalLength = $cameraCutShapeValue_focalLength;\n  cameraMainShape.lensSqueezeRatio = $cameraCutShapeValue_squeezeRatio;\n  cameraMainShape.fStop = $cameraCutShapeValue_fStop;\n  cameraMainShape.focusDistance = $cameraCutShapeValue_focusDistance;\n  cameraMainShape.focusRegionScale = $cameraCutShapeValue_focusRegionScale;\n  cameraMainShape.shutterAngle = $cameraCutShapeValue_shutterAngle;\n  cameraMainShape.centerOfInterest = $cameraCutShapeValue_centerOfInterest;\n  cameraMainShape.nearClipPlane = $cameraCutShapeValue_nearClipPlane;\n  cameraMainShape.farClipPlane = $cameraCutShapeValue_farClipPlane;\n\n}\nelse{\n  // set cameraMain to default values if there is no camera to match the cameraNumber\n  cameraMain.translateX = 0;\n  cameraMain.translateY = 0;\n  cameraMain.translateZ = 0;\n  cameraMain.rotateX = 0;\n  cameraMain.rotateY = 0;\n  cameraMain.rotateZ = 0;\n  cameraMainShape.horizontalFilmAperture = 1.42;\n  cameraMainShape.verticalFilmAperture = 0.945;\n  cameraMainShape.focalLength = 35;\n  cameraMainShape.lensSqueezeRatio = 1;\n  cameraMainShape.fStop = 5.6;\n  cameraMainShape.focusDistance = 5;\n  cameraMainShape.focusRegionScale = 1;\n  cameraMainShape.shutterAngle = 144;\n  cameraMainShape.centerOfInterest = 5;\n  cameraMainShape.nearClipPlane = 1;\n  cameraMainShape.farClipPlane = 10000;\n}"  -o cameraMain -ae 1 -uc all  cameraMainExpr;
  }
}
