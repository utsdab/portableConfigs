//  Gamma Correct Color Swatches
//  By Valen Wagner
//  www.vraphix.com
//  Version 1.0
//  8/29/2012

// Instructions: Select a supported shader node, and run this script.  From the window that opens, you can
// choose which attributes of the shader you want a gamma node applied to.  You can also choose the value of the 
// gamma correction, and there is also a swatch that lets you adjust the current color.  This swatch is the same
// as the swatch that is associated with the particular attribute in the main shader.  If you adjust the
// swatch in this window, it will update on the actual material even if you "cancel" out of this script.
//
// You can run this script on a "fresh" shader with no other maps connected to it, or you can run it on a shader
// that already has maps connected to it.  For example, if you run this script on a "Blinn" material with a "file texture"
// attached to it's "color" attribute, the script will insert the gamma node between the "file texture" and the "color".
//
// If you try to use the script to attach a gamma node to an attribute that already has a gamma node applied, it
// will not create a new node and you'll get a warning displayed.
//
// There is a "Refresh Selection" button.  You can use this to update the window based on the currently selected shader.
// For example, if you run this script with a particular shader selected, you can select a different shader and then
// press the "Refresh Selection" button, it will update the window for that new material.  Note that you will lose any
// settings in the window for the previously selected material as soon as you do this.  You should press "Apply" to write
// the changes to your current shader before pressing "Refresh Selection" for a differnt shader.

// Use and your own risk.

// Installation:
//    Method 1: Copy this MEL file to your local "\Documents\maya\[current version]\scripts\" folder, restart
//              Maya and run the command "gammaColorSwatch;" from the MEL command line or put "gammaColorSwatch;" in a
//              new custom Shelf button.
//    Method 2: Copy and paste the full contents of this file into a new custom Shelf button.

// Accompanying icon image: gammaColorSwatch.png
// You can copy this icon image to your "\Documents\maya\[current version]\scripts\" folder and assign this image to a Shelf button.

/* Currently Supported Shaders:

	Maya:
		anisotropic
		blinn
		hairTubeShader
		lambert
		oceanShader
		phong
		phongE
		shadingMap
		surfaceShader
		useBackground
		envFog

	Mental Ray:
		dgs_material
		dielectric_material
		mi_car_paint_phen
		mi_car_paint_phen_x
		mi_car_paint_phen_x_passes
		mi_metallic_paint
		mi_metallic_paint_x
		mi_metallic_paint_x_passes
		mia_material
		mia_material_x
		mia_material_x_passes

  Please let me know if you'd like support added for other shaders.

*/

// Installation:
//    Method 1: Copy this MEL file to your local "\Documents\maya\[current version]\scripts\" folder, restart
//              Maya and run the command "gammaColorSwatch;" from the MEL command line or put "gammaColorSwatch;" in a
//              new custom Shelf button.
//    Method 2: Copy and paste the contents of this file into a new custom Shelf button.

global proc gammaColorSwatch()
{
if (`window -q -ex gammaColorSwatchWindow`)
    deleteUI gammaColorSwatchWindow;

string $sel[] = `ls -sl`;
global string $selName; $selName = $sel[0];
global string $selectedType; $selectedType = `objectType $selName`;
global string $curAttr;
global string $prefix;

//                                    Test if supported object is selected.  If not, then exit with error message.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if (($selectedType != "anisotropic") && ($selectedType != "blinn") && ($selectedType != "hairTubeShader") && ($selectedType != "lambert") &&      //
    ($selectedType != "oceanShader") && ($selectedType != "phong") && ($selectedType != "phongE") && ($selectedType != "shadingMap") &&           //
    ($selectedType != "surfaceShader") && ($selectedType != "useBackground") && ($selectedType != "envFog") &&                                    //
    ($selectedType != "dgs_material") && ($selectedType != "dielectric_material") && ($selectedType != "mi_car_paint_phen") &&                    //
    ($selectedType != "mi_car_paint_phen_x") && ($selectedType != "mi_car_paint_phen_x_passes") && ($selectedType != "mi_metallic_paint") &&      //
    ($selectedType != "mi_metallic_paint_x") && ($selectedType != "mi_metallic_paint_x_passes") && ($selectedType != "mia_material") &&           //
    ($selectedType != "mia_material_x") && ($selectedType != "mia_material_x_passes"))                                                            //
    {                                                                                                                                             //
        error "Select a supported shader first!";                                                                                                 //
        deleteUI gammaColorSwatchWindow;                                                                                                          //
    }                                                                                                                                             //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

window -title "Gamma Adjust Color Swatches" -sizeable false -rtf true gammaColorSwatchWindow;

columnLayout -adjustableColumn true; 

separator -height 10 -style "none";

rowLayout -numberOfColumns 2
-columnWidth2 100 85
-columnAttach 1 "left" 6
-columnAttach 2 "left" -7
materialNameRow;
    text -label "Current Material: " materialTypeText;
    text -label $selName -font "boldLabelFont" materialTypeNameText;
setParent..;

separator -height 10 -style "none";

rowLayout -numberOfColumns 2
-columnWidth2 150 100
-columnAttach 1 "left" 2
-columnAttach 2 "left" 0
getNewSelectionRow;
    button -label "Refresh Selection" -c getNewSelection refreshMaterialButton;
    text -label "" dummyText2;
setParent..;

separator -height 10 -style "none";

frameLayout -label "Create Gamma Nodes"
-labelIndent 142
-borderStyle "etchedIn";

    columnLayout -adjustableColumn true;
        rowLayout -numberOfColumns 1
        -columnAttach 1 "left" 0
        selectAllRow;

              button -label "Select All" 
              -c selectAllCheckBoxes
              selectAllButton;
              
        setParent..;

separator -style "in";

int $buildUIComplete = `buildUI`; //  Build the necessary rows for the selected materials swatches

separator -height 20 -style "none";

rowLayout -numberOfColumns 5
-columnWidth5 76 80 100 80 50
-columnAttach 1 "left" 0
-columnAttach 2 "both" 0
-columnAttach 3 "both" 0
-columnAttach 4 "both" 0
-columnAttach 5 "right" 0
applyCancelRow;

    text -label "" dummyText1;
    button -label "Apply" -c applyPressed applyButton;
    button -label "Apply and Close" -c applyClosePressed applyCloseButton;
    button -label "Cancel" -c cancelPressed cancelButton;
    text -label "" dummyText2;
    
setParent..;

showWindow gammaColorSwatchWindow;
}

global proc int buildUI()
{
    global string $selName;
    global string $selectedType;
    global string $curAttr;
    global string $prefix;
    
    //                        Define sizes and defaults for menus
    //////////////////////////////////////////////////////////////////////////////////////////
    int $rowColumnWidth1 = 130; int $rowColumnWidth2 = 100; int $rowColumnWidth3 = 100;     //
    string $rowColumnAttachPos1 = "left"; int $rowColumnAttachOffset1 = 0;                  //
    string $rowColumnAttachPos2 = "both"; int $rowColumnAttachOffset2 = -90;                //
    string $rowColumnAttachPos3 = "left"; int $rowColumnAttachOffset3 = 30;                 //
    int $gammaColumnWidth = 50; float $gammaDefaultValue = .4545;                           //
    int $colorSwatchColumnWidth1 = 50; int $colorSwatchColumnWidth3 = 0;                    //
    //////////////////////////////////////////////////////////////////////////////////////////

    int $numberOfRowsForType = 0;
    string $attributes[] = {};

    switch ($selectedType) //  Define amount of rows in menu and assign variables based on the selected shader type.
    {
        case "anisotropic":
            $numberOfRowsForType = 6;
            $prefix = "anisotropic";
            $attributes[0] = "color"; $attributes[1] = "transparency"; $attributes[2] = "ambientColor"; $attributes[3] = "incandescence";
            $attributes[4] = "specularColor"; $attributes[5] = "reflectedColor";            
        break;

        case "blinn":
            $numberOfRowsForType = 6;
            $prefix = "blinn";
            $attributes[0] = "color"; $attributes[1] = "transparency"; $attributes[2] = "ambientColor"; $attributes[3] = "incandescence";
            $attributes[4] = "specularColor"; $attributes[5] = "reflectedColor";
        break;    

        case "hairTubeShader":
            $numberOfRowsForType = 6;
            $prefix = "hairTubeShader";
            $attributes[0] = "color"; $attributes[1] = "transparency"; $attributes[2] = "ambientColor"; $attributes[3] = "incandescence";
            $attributes[4] = "specularColor"; $attributes[5] = "reflectedColor";
        break;               

        case "lambert":
            $numberOfRowsForType = 4;
            $prefix = "lambert";
            $attributes[0] = "color"; $attributes[1] = "transparency"; $attributes[2] = "ambientColor"; $attributes[3] = "incandescence";
        break;      

        case "oceanShader":
            $numberOfRowsForType = 7;
            $prefix = "oceanShader";
            $attributes[0] = "waterColor"; $attributes[1] = "foamColor"; $attributes[2] = "transparency"; $attributes[3] = "incandescence";
            $attributes[4] = "ambientColor"; $attributes[5] = "specularColor"; $attributes[6] = "reflectedColor";
        break;                  
        
        case "phong":
            $numberOfRowsForType = 6;
            $prefix = "phong";
            $attributes[0] = "color"; $attributes[1] = "transparency"; $attributes[2] = "ambientColor"; $attributes[3] = "incandescence";
            $attributes[4] = "specularColor"; $attributes[5] = "reflectedColor";
        break; 

        case "phongE":
            $numberOfRowsForType = 7;
            $prefix = "phongE";
            $attributes[0] = "color"; $attributes[1] = "transparency"; $attributes[2] = "ambientColor"; $attributes[3] = "incandescence";
            $attributes[4] = "whiteness"; $attributes[5] = "specularColor"; $attributes[6] = "reflectedColor";
        break;      

        case "shadingMap":
            $numberOfRowsForType = 1;
            $prefix = "shadingMap";
            $attributes[0] = "shadingMapColor";
        break;

        case "surfaceShader":
            $numberOfRowsForType = 4;
            $prefix = "surfaceShader";
            $attributes[0] = "outColor"; $attributes[1] = "outTransparency"; $attributes[2] = "outGlowColor"; $attributes[3] = "outMatteOpacity";
        break;
        
        case "useBackground":
            $numberOfRowsForType = 1;
            $prefix = "useBackground";
            $attributes[0] = "specularColor";
        break;

        case "envFog":
            $numberOfRowsForType = 8;
            $prefix = "envFog";
            $attributes[0] = "color"; $attributes[1] = "fogColor"; $attributes[2] = "fogOpacity"; $attributes[3] = "airColor";
            $attributes[4] = "airOpacity"; $attributes[5] = "waterColor"; $attributes[6] = "waterOpacity"; $attributes[7] = "sunColor";
        break;              

        case "dgs_material":
            $numberOfRowsForType = 3;
            $prefix = "dgs_material";
            $attributes[0] = "diffuse"; $attributes[1] = "glossy"; $attributes[2] = "specular";
        break;

        case "dielectric_material":
            $numberOfRowsForType = 2;
            $prefix = "dielectric_material";
            $attributes[0] = "col"; $attributes[1] = "col_out";
        break;

        case "mi_car_paint_phen_x":
        case "mi_car_paint_phen_x_passes":
        case "mi_car_paint_phen":
            $numberOfRowsForType = 9;
            $prefix = "mi_car_paint_phen";
            $attributes[0] = "ambient"; $attributes[1] = "base_color"; $attributes[2] = "edge_color"; $attributes[3] = "lit_color";
            $attributes[4] = "spec"; $attributes[5] = "spec_sec"; $attributes[6] = "flake_color"; $attributes[7] = "reflection_color";
            $attributes[8] = "dirt_color";
        break;

        case "mi_metallic_paint_x":
        case "mi_metallic_paint_x_passes":
        case "mi_metallic_paint":
            $numberOfRowsForType = 7;
            $prefix = "mi_metallic_paint";
            $attributes[0] = "ambient"; $attributes[1] = "base_color"; $attributes[2] = "edge_color"; $attributes[3] = "lit_color";
            $attributes[4] = "spec"; $attributes[5] = "spec_sec"; $attributes[6] = "flake_color";
        break;

        case "mia_material_x":
        case "mia_material_x_passes":
        case "mia_material":
            $numberOfRowsForType = 9;
            $prefix = "mia_material";
            $attributes[0] = "diffuse"; $attributes[1] = "refl_color"; $attributes[2] = "refl_falloff_color"; $attributes[3] = "refr_color";
            $attributes[4] = "refr_falloff_color"; $attributes[5] = "refr_trans_color"; $attributes[6] = "ao_dark"; $attributes[7] = "ao_ambient";
            $attributes[8] = "additional_color";
        break;
        
        default:
            error ("something went wrong in Build UI" + "\n");
    }

        for ($i = 1; $i <= $numberOfRowsForType; $i++)
        {
            $curAttr = $attributes[$i - 1];
            
            string $checkBoxOnCmd;
            string $checkBoxOffCmd;            

            switch ($curAttr)  //  Define the attribute that the check box will control based on current attribute type.
            {
                case "color":
                    $checkBoxOnCmd = "checkBox 1 color";
                    $checkBoxOffCmd = "checkBox 0 color";
                    break;

                case "transparency":
                    $checkBoxOnCmd = "checkBox 1 transparency";
                    $checkBoxOffCmd = "checkBox 0 transparency";
                    break;

                case "ambientColor":
                    $checkBoxOnCmd = "checkBox 1 ambientColor";
                    $checkBoxOffCmd = "checkBox 0 ambientColor";
                    break;

                case "incandescence":
                    $checkBoxOnCmd = "checkBox 1 incandescence";
                    $checkBoxOffCmd = "checkBox 0 incandescence";
                    break;
                
                case "specularColor":
                    $checkBoxOnCmd = "checkBox 1 specularColor";
                    $checkBoxOffCmd = "checkBox 0 specularColor";
                    break;

                case "reflectedColor":
                    $checkBoxOnCmd = "checkBox 1 reflectedColor";
                    $checkBoxOffCmd = "checkBox 0 reflectedColor";
                    break;     

                case "waterColor":
                    $checkBoxOnCmd = "checkBox 1 waterColor";
                    $checkBoxOffCmd = "checkBox 0 waterColor";
                    break;                         

                case "foamColor":
                    $checkBoxOnCmd = "checkBox 1 foamColor";
                    $checkBoxOffCmd = "checkBox 0 foamColor";
                    break;   

                case "whiteness":
                    $checkBoxOnCmd = "checkBox 1 whiteness";
                    $checkBoxOffCmd = "checkBox 0 whiteness";
                    break;

                case "shadingMapColor":
                    $checkBoxOnCmd = "checkBox 1 shadingMapColor";
                    $checkBoxOffCmd = "checkBox 0 shadingMapColor";
                    break;
                
                case "outColor":
                    $checkBoxOnCmd = "checkBox 1 outColor";
                    $checkBoxOffCmd = "checkBox 0 outColor";
                    break;

                case "outTransparency":
                    $checkBoxOnCmd = "checkBox 1 outTransparency";
                    $checkBoxOffCmd = "checkBox 0 outTransparency";
                    break;                    

                case "outGlowColor":
                    $checkBoxOnCmd = "checkBox 1 outGlowColor";
                    $checkBoxOffCmd = "checkBox 0 outGlowColor";
                    break;   

                case "outMatteOpacity":
                    $checkBoxOnCmd = "checkBox 1 outMatteOpacity";
                    $checkBoxOffCmd = "checkBox 0 outMatteOpacity";
                    break;

                case "fogColor":
                    $checkBoxOnCmd = "checkBox 1 fogColor";
                    $checkBoxOffCmd = "checkBox 0 fogColor";
                    break;  

                case "fogOpacity":
                    $checkBoxOnCmd = "checkBox 1 fogOpacity";
                    $checkBoxOffCmd = "checkBox 0 fogOpacity";
                    break;  

                case "airColor":
                    $checkBoxOnCmd = "checkBox 1 airColor";
                    $checkBoxOffCmd = "checkBox 0 airColor";
                    break;  

                case "airOpacity":
                    $checkBoxOnCmd = "checkBox 1 airOpacity";
                    $checkBoxOffCmd = "checkBox 0 airOpacity";
                    break;   

                case "waterOpacity":
                    $checkBoxOnCmd = "checkBox 1 waterOpacity";
                    $checkBoxOffCmd = "checkBox 0 waterOpacity";
                    break;  

                case "sunColor":
                    $checkBoxOnCmd = "checkBox 1 sunColor";
                    $checkBoxOffCmd = "checkBox 0 sunColor";
                    break;

                case "diffuse":
                    $checkBoxOnCmd = "checkBox 1 diffuse";
                    $checkBoxOffCmd = "checkBox 0 diffuse";
                    break;   

                case "glossy":
                    $checkBoxOnCmd = "checkBox 1 glossy";
                    $checkBoxOffCmd = "checkBox 0 glossy";
                    break;  

                case "specular":
                    $checkBoxOnCmd = "checkBox 1 specular";
                    $checkBoxOffCmd = "checkBox 0 specular";
                    break;

                case "col":
                    $checkBoxOnCmd = "checkBox 1 col";
                    $checkBoxOffCmd = "checkBox 0 col";
                    break;  

                case "col_out":
                    $checkBoxOnCmd = "checkBox 1 col_out";
                    $checkBoxOffCmd = "checkBox 0 col_out";
                    break;

                case "ambient":
                    $checkBoxOnCmd = "checkBox 1 ambient";
                    $checkBoxOffCmd = "checkBox 0 ambient";
                    break;

                case "base_color":
                    $checkBoxOnCmd = "checkBox 1 base_color";
                    $checkBoxOffCmd = "checkBox 0 base_color";
                    break;  

                case "edge_color":
                    $checkBoxOnCmd = "checkBox 1 edge_color";
                    $checkBoxOffCmd = "checkBox 0 edge_color";
                    break;

                case "lit_color":
                    $checkBoxOnCmd = "checkBox 1 lit_color";
                    $checkBoxOffCmd = "checkBox 0 lit_color";
                    break;

                case "spec":
                    $checkBoxOnCmd = "checkBox 1 spec";
                    $checkBoxOffCmd = "checkBox 0 spec";
                    break;  

                case "spec_sec":
                    $checkBoxOnCmd = "checkBox 1 spec_sec";
                    $checkBoxOffCmd = "checkBox 0 spec_sec";
                    break;

                case "flake_color":
                    $checkBoxOnCmd = "checkBox 1 flake_color";
                    $checkBoxOffCmd = "checkBox 0 flake_color";
                    break;

                case "reflection_color":
                    $checkBoxOnCmd = "checkBox 1 reflection_color";
                    $checkBoxOffCmd = "checkBox 0 reflection_color";
                    break;  

                case "dirt_color":
                    $checkBoxOnCmd = "checkBox 1 dirt_color";
                    $checkBoxOffCmd = "checkBox 0 dirt_color";
                    break;

                case "refl_color":
                    $checkBoxOnCmd = "checkBox 1 refl_color";
                    $checkBoxOffCmd = "checkBox 0 refl_color";
                    break;

                case "refl_falloff_color":
                    $checkBoxOnCmd = "checkBox 1 refl_falloff_color";
                    $checkBoxOffCmd = "checkBox 0 refl_falloff_color";
                    break;  

                case "refr_color":
                    $checkBoxOnCmd = "checkBox 1 refr_color";
                    $checkBoxOffCmd = "checkBox 0 refr_color";
                    break;

                case "refr_falloff_color":
                    $checkBoxOnCmd = "checkBox 1 refr_falloff_color";
                    $checkBoxOffCmd = "checkBox 0 refr_falloff_color";
                    break;

                case "refr_trans_color":
                    $checkBoxOnCmd = "checkBox 1 refr_trans_color";
                    $checkBoxOffCmd = "checkBox 0 refr_trans_color";
                    break;  

                case "ao_dark":
                    $checkBoxOnCmd = "checkBox 1 ao_dark";
                    $checkBoxOffCmd = "checkBox 0 ao_dark";
                    break;

                case "ao_ambient":
                    $checkBoxOnCmd = "checkBox 1 ao_ambient";
                    $checkBoxOffCmd = "checkBox 0 ao_ambient";
                    break;

                case "additional_color":
                    $checkBoxOnCmd = "checkBox 1 additional_color";
                    $checkBoxOffCmd = "checkBox 0 additional_color";
                    break;                                                           
                                     
                default:
                    error ("something went wrong in Build UI build set check box calls" + "\n");
            }
            
            //  Build the rows
            
            rowLayout -numberOfColumns 3
            -columnWidth3 $rowColumnWidth1 $rowColumnWidth2 $rowColumnWidth3
            -columnAttach 1 $rowColumnAttachPos1 $rowColumnAttachOffset1
            -columnAttach 2 $rowColumnAttachPos2 $rowColumnAttachOffset2
            -columnAttach 3 $rowColumnAttachPos3 $rowColumnAttachOffset3
            ($prefix + "_" + $curAttr + "_Row");
        
                checkBoxGrp 
                  -numberOfCheckBoxes 1 -label1 $curAttr
                  -onc $checkBoxOnCmd
                  -ofc $checkBoxOffCmd
                  ($prefix + "_" + $curAttr + "_CheckBox");
            
                floatFieldGrp -numberOfFields 1 
                 -label "gamma>>" 
                 -columnWidth 2 $gammaColumnWidth
                 -pre 4
                 -value1 $gammaDefaultValue
                 -enable 0 
                  ($prefix + "_" + $curAttr + "_GammaField");
            
                attrColorSliderGrp -label "Set Color" -enable 0
                 -columnWidth 1 $colorSwatchColumnWidth1
                 -columnWidth 3 $colorSwatchColumnWidth3
                     -showButton false 
                 -attribute ($selName + "." + $curAttr)
                  ($prefix + "_" + $curAttr + "_Swatch");
              
             setParent..;

        separator -style "in";
        }
        
    return 1;
}

global proc checkBox(int $bool, string $curAttr)
{
    global string $prefix;
    string $fullName = ($prefix + "_" + $curAttr);
    
    switch ($fullName)
    {
        case "anisotropic_color":
            floatFieldGrp -e -enable $bool anisotropic_color_GammaField;
            attrColorSliderGrp -e -enable $bool anisotropic_color_Swatch;
            break;
            
        case "anisotropic_transparency":
            floatFieldGrp -e -enable $bool anisotropic_transparency_GammaField;
            attrColorSliderGrp -e -enable $bool anisotropic_transparency_Swatch;
            break;
            
        case "anisotropic_ambientColor":
            floatFieldGrp -e -enable $bool anisotropic_ambientColor_GammaField;
            attrColorSliderGrp -e -enable $bool anisotropic_ambientColor_Swatch;
            break;

        case "anisotropic_incandescence":
            floatFieldGrp -e -enable $bool anisotropic_incandescence_GammaField;
            attrColorSliderGrp -e -enable $bool anisotropic_incandescence_Swatch;
            break;

        case "anisotropic_specularColor":
            floatFieldGrp -e -enable $bool anisotropic_specularColor_GammaField;
            attrColorSliderGrp -e -enable $bool anisotropic_specularColor_Swatch;
            break;

        case "anisotropic_reflectedColor":
            floatFieldGrp -e -enable $bool anisotropic_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable $bool anisotropic_reflectedColor_Swatch;
            break;

        case "blinn_color":
            floatFieldGrp -e -enable $bool blinn_color_GammaField;
            attrColorSliderGrp -e -enable $bool blinn_color_Swatch;
            break;
            
        case "blinn_transparency":
            floatFieldGrp -e -enable $bool blinn_transparency_GammaField;
            attrColorSliderGrp -e -enable $bool blinn_transparency_Swatch;
            break;
            
        case "blinn_ambientColor":
            floatFieldGrp -e -enable $bool blinn_ambientColor_GammaField;
            attrColorSliderGrp -e -enable $bool blinn_ambientColor_Swatch;
            break;

        case "blinn_incandescence":
            floatFieldGrp -e -enable $bool blinn_incandescence_GammaField;
            attrColorSliderGrp -e -enable $bool blinn_incandescence_Swatch;
            break;           

        case "blinn_specularColor":
            floatFieldGrp -e -enable $bool blinn_specularColor_GammaField;
            attrColorSliderGrp -e -enable $bool blinn_specularColor_Swatch;
            break;

        case "blinn_reflectedColor":
            floatFieldGrp -e -enable $bool blinn_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable $bool blinn_reflectedColor_Swatch;
            break;

        case "hairTubeShader_color":
            floatFieldGrp -e -enable $bool hairTubeShader_color_GammaField;
            attrColorSliderGrp -e -enable $bool hairTubeShader_color_Swatch;
            break;
            
        case "hairTubeShader_transparency":
            floatFieldGrp -e -enable $bool hairTubeShader_transparency_GammaField;
            attrColorSliderGrp -e -enable $bool hairTubeShader_transparency_Swatch;
            break;
            
        case "hairTubeShader_ambientColor":
            floatFieldGrp -e -enable $bool hairTubeShader_ambientColor_GammaField;
            attrColorSliderGrp -e -enable $bool hairTubeShader_ambientColor_Swatch;
            break;

        case "hairTubeShader_incandescence":
            floatFieldGrp -e -enable $bool hairTubeShader_incandescence_GammaField;
            attrColorSliderGrp -e -enable $bool hairTubeShader_incandescence_Swatch;
            break;           

        case "hairTubeShader_specularColor":
            floatFieldGrp -e -enable $bool hairTubeShader_specularColor_GammaField;
            attrColorSliderGrp -e -enable $bool hairTubeShader_specularColor_Swatch;
            break;

        case "hairTubeShader_reflectedColor":
            floatFieldGrp -e -enable $bool hairTubeShader_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable $bool hairTubeShader_reflectedColor_Swatch;
            break;            

        case "lambert_color":
            floatFieldGrp -e -enable $bool lambert_color_GammaField;
            attrColorSliderGrp -e -enable $bool lambert_color_Swatch;
            break;
            
        case "lambert_transparency":
            floatFieldGrp -e -enable $bool lambert_transparency_GammaField;
            attrColorSliderGrp -e -enable $bool lambert_transparency_Swatch;
            break;
            
        case "lambert_ambientColor":
            floatFieldGrp -e -enable $bool lambert_ambientColor_GammaField;
            attrColorSliderGrp -e -enable $bool lambert_ambientColor_Swatch;
            break;

        case "lambert_incandescence":
            floatFieldGrp -e -enable $bool lambert_incandescence_GammaField;
            attrColorSliderGrp -e -enable $bool lambert_incandescence_Swatch;
            break;  

        case "oceanShader_waterColor":
            floatFieldGrp -e -enable $bool oceanShader_waterColor_GammaField;
            attrColorSliderGrp -e -enable $bool oceanShader_waterColor_Swatch;
            break;

        case "oceanShader_foamColor":
            floatFieldGrp -e -enable $bool oceanShader_foamColor_GammaField;
            attrColorSliderGrp -e -enable $bool oceanShader_foamColor_Swatch;
            break;            
            
        case "oceanShader_transparency":
            floatFieldGrp -e -enable $bool oceanShader_transparency_GammaField;
            attrColorSliderGrp -e -enable $bool oceanShader_transparency_Swatch;
            break;

        case "oceanShader_incandescence":
            floatFieldGrp -e -enable $bool oceanShader_incandescence_GammaField;
            attrColorSliderGrp -e -enable $bool oceanShader_incandescence_Swatch;
            break;            
            
        case "oceanShader_ambientColor":
            floatFieldGrp -e -enable $bool oceanShader_ambientColor_GammaField;
            attrColorSliderGrp -e -enable $bool oceanShader_ambientColor_Swatch;
            break;

        case "oceanShader_specularColor":
            floatFieldGrp -e -enable $bool oceanShader_specularColor_GammaField;
            attrColorSliderGrp -e -enable $bool oceanShader_specularColor_Swatch;
            break;

        case "oceanShader_reflectedColor":
            floatFieldGrp -e -enable $bool oceanShader_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable $bool oceanShader_reflectedColor_Swatch;
            break;            

        case "phong_color":
            floatFieldGrp -e -enable $bool phong_color_GammaField;
            attrColorSliderGrp -e -enable $bool phong_color_Swatch;
            break;
            
        case "phong_transparency":
            floatFieldGrp -e -enable $bool phong_transparency_GammaField;
            attrColorSliderGrp -e -enable $bool phong_transparency_Swatch;
            break;
            
        case "phong_ambientColor":
            floatFieldGrp -e -enable $bool phong_ambientColor_GammaField;
            attrColorSliderGrp -e -enable $bool phong_ambientColor_Swatch;
            break;

        case "phong_incandescence":
            floatFieldGrp -e -enable $bool phong_incandescence_GammaField;
            attrColorSliderGrp -e -enable $bool phong_incandescence_Swatch;
            break;

        case "phong_specularColor":
            floatFieldGrp -e -enable $bool phong_specularColor_GammaField;
            attrColorSliderGrp -e -enable $bool phong_specularColor_Swatch;
            break;

        case "phong_reflectedColor":
            floatFieldGrp -e -enable $bool phong_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable $bool phong_reflectedColor_Swatch;
            break;

        case "phongE_color":
            floatFieldGrp -e -enable $bool phongE_color_GammaField;
            attrColorSliderGrp -e -enable $bool phongE_color_Swatch;
            break;
            
        case "phongE_transparency":
            floatFieldGrp -e -enable $bool phongE_transparency_GammaField;
            attrColorSliderGrp -e -enable $bool phongE_transparency_Swatch;
            break;
            
        case "phongE_ambientColor":
            floatFieldGrp -e -enable $bool phongE_ambientColor_GammaField;
            attrColorSliderGrp -e -enable $bool phongE_ambientColor_Swatch;
            break;

        case "phongE_incandescence":
            floatFieldGrp -e -enable $bool phongE_incandescence_GammaField;
            attrColorSliderGrp -e -enable $bool phongE_incandescence_Swatch;
            break;

        case "phongE_whiteness":
            floatFieldGrp -e -enable $bool phongE_whiteness_GammaField;
            attrColorSliderGrp -e -enable $bool phongE_whiteness_Swatch;
            break;            

        case "phongE_specularColor":
            floatFieldGrp -e -enable $bool phongE_specularColor_GammaField;
            attrColorSliderGrp -e -enable $bool phongE_specularColor_Swatch;
            break;

        case "phongE_reflectedColor":
            floatFieldGrp -e -enable $bool phongE_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable $bool phongE_reflectedColor_Swatch;
            break;     

        case "shadingMap_shadingMapColor":
            floatFieldGrp -e -enable $bool shadingMap_shadingMapColor_GammaField;
            attrColorSliderGrp -e -enable $bool shadingMap_shadingMapColor_Swatch;
            break;                     

        case "surfaceShader_outColor":
            floatFieldGrp -e -enable $bool surfaceShader_outColor_GammaField;
            attrColorSliderGrp -e -enable $bool surfaceShader_outColor_Swatch;
            break;
            
        case "surfaceShader_outTransparency":
            floatFieldGrp -e -enable $bool surfaceShader_outTransparency_GammaField;
            attrColorSliderGrp -e -enable $bool surfaceShader_outTransparency_Swatch;
            break;
            
        case "surfaceShader_outGlowColor":
            floatFieldGrp -e -enable $bool surfaceShader_outGlowColor_GammaField;
            attrColorSliderGrp -e -enable $bool surfaceShader_outGlowColor_Swatch;
            break;

        case "surfaceShader_outMatteOpacity":
            floatFieldGrp -e -enable $bool surfaceShader_outMatteOpacity_GammaField;
            attrColorSliderGrp -e -enable $bool surfaceShader_outMatteOpacity_Swatch;
            break;
            
        case "useBackground_specularColor":
            floatFieldGrp -e -enable $bool useBackground_specularColor_GammaField;
            attrColorSliderGrp -e -enable $bool useBackground_specularColor_Swatch;
            break;

        case "envFog_color":
            floatFieldGrp -e -enable $bool envFog_color_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_color_Swatch;
            break;

        case "envFog_fogColor":
            floatFieldGrp -e -enable $bool envFog_fogColor_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_fogColor_Swatch;
            break;

        case "envFog_fogOpacity":
            floatFieldGrp -e -enable $bool envFog_fogOpacity_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_fogOpacity_Swatch;
            break;

        case "envFog_airColor":
            floatFieldGrp -e -enable $bool envFog_airColor_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_airColor_Swatch;
            break;            

        case "envFog_airOpacity":
            floatFieldGrp -e -enable $bool envFog_airOpacity_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_airOpacity_Swatch;
            break;

        case "envFog_waterColor":
            floatFieldGrp -e -enable $bool envFog_waterColor_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_waterColor_Swatch;
            break;

        case "envFog_waterOpacity":
            floatFieldGrp -e -enable $bool envFog_waterOpacity_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_waterOpacity_Swatch;
            break;

        case "envFog_sunColor":
            floatFieldGrp -e -enable $bool envFog_sunColor_GammaField;
            attrColorSliderGrp -e -enable $bool envFog_sunColor_Swatch;
            break;

        case "dgs_material_diffuse":
            floatFieldGrp -e -enable $bool dgs_material_diffuse_GammaField;
            attrColorSliderGrp -e -enable $bool dgs_material_diffuse_Swatch;
            break;
            
        case "dgs_material_glossy":
            floatFieldGrp -e -enable $bool dgs_material_glossy_GammaField;
            attrColorSliderGrp -e -enable $bool dgs_material_glossy_Swatch;
            break;
            
        case "dgs_material_specular":
            floatFieldGrp -e -enable $bool dgs_material_specular_GammaField;
            attrColorSliderGrp -e -enable $bool dgs_material_specular_Swatch;
            break;

        case "dielectric_material_col":
            floatFieldGrp -e -enable $bool dielectric_material_col_GammaField;
            attrColorSliderGrp -e -enable $bool dielectric_material_col_Swatch;
            break;
            
        case "dielectric_material_col_out":
            floatFieldGrp -e -enable $bool dielectric_material_col_out_GammaField;
            attrColorSliderGrp -e -enable $bool dielectric_material_col_out_Swatch;
            break;

        case "mi_car_paint_phen_ambient":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_ambient_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_ambient_Swatch;
            break;

        case "mi_car_paint_phen_base_color":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_base_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_base_color_Swatch;
            break;

        case "mi_car_paint_phen_edge_color":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_edge_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_edge_color_Swatch;
            break;

        case "mi_car_paint_phen_lit_color":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_lit_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_lit_color_Swatch;
            break;

        case "mi_car_paint_phen_spec":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_spec_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_spec_Swatch;
            break;

        case "mi_car_paint_phen_spec_sec":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_spec_sec_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_spec_sec_Swatch;
            break;

        case "mi_car_paint_phen_flake_color":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_flake_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_flake_color_Swatch;
            break;

        case "mi_car_paint_phen_reflection_color":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_reflection_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_reflection_color_Swatch;
            break;

        case "mi_car_paint_phen_dirt_color":
            floatFieldGrp -e -enable $bool mi_car_paint_phen_dirt_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_car_paint_phen_dirt_color_Swatch;
            break;

        case "mi_metallic_paint_ambient":
            floatFieldGrp -e -enable $bool mi_metallic_paint_ambient_GammaField;
            attrColorSliderGrp -e -enable $bool mi_metallic_paint_ambient_Swatch;
            break;

        case "mi_metallic_paint_base_color":
            floatFieldGrp -e -enable $bool mi_metallic_paint_base_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_metallic_paint_base_color_Swatch;
            break;

        case "mi_metallic_paint_edge_color":
            floatFieldGrp -e -enable $bool mi_metallic_paint_edge_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_metallic_paint_edge_color_Swatch;
            break;

        case "mi_metallic_paint_lit_color":
            floatFieldGrp -e -enable $bool mi_metallic_paint_lit_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_metallic_paint_lit_color_Swatch;
            break;

        case "mi_metallic_paint_spec":
            floatFieldGrp -e -enable $bool mi_metallic_paint_spec_GammaField;
            attrColorSliderGrp -e -enable $bool mi_metallic_paint_spec_Swatch;
            break;

        case "mi_metallic_paint_spec_sec":
            floatFieldGrp -e -enable $bool mi_metallic_paint_spec_sec_GammaField;
            attrColorSliderGrp -e -enable $bool mi_metallic_paint_spec_sec_Swatch;
            break;

        case "mi_metallic_paint_flake_color":
            floatFieldGrp -e -enable $bool mi_metallic_paint_flake_color_GammaField;
            attrColorSliderGrp -e -enable $bool mi_metallic_paint_flake_color_Swatch;
            break;
            
        case "mia_material_diffuse":
            floatFieldGrp -e -enable $bool mia_material_diffuse_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_diffuse_Swatch;
            break;

        case "mia_material_refl_color":
            floatFieldGrp -e -enable $bool mia_material_refl_color_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_refl_color_Swatch;
            break;

        case "mia_material_refl_falloff_color":
            floatFieldGrp -e -enable $bool mia_material_refl_falloff_color_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_refl_falloff_color_Swatch;
            break;

        case "mia_material_refr_color":
            floatFieldGrp -e -enable $bool mia_material_refr_color_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_refr_color_Swatch;
            break;

        case "mia_material_refr_falloff_color":
            floatFieldGrp -e -enable $bool mia_material_refr_falloff_color_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_refr_falloff_color_Swatch;
            break;

        case "mia_material_refr_trans_color":
            floatFieldGrp -e -enable $bool mia_material_refr_trans_color_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_refr_trans_color_Swatch;
            break;

        case "mia_material_ao_dark":
            floatFieldGrp -e -enable $bool mia_material_ao_dark_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_ao_dark_Swatch;
            break;

        case "mia_material_ao_ambient":
            floatFieldGrp -e -enable $bool mia_material_ao_ambient_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_ao_ambient_Swatch;
            break;

        case "mia_material_additional_color":
            floatFieldGrp -e -enable $bool mia_material_additional_color_GammaField;
            attrColorSliderGrp -e -enable $bool mia_material_additional_color_Swatch;
            break;

            default:
                error ("something went wrong in checkBox" + "\n");
    }
}

global proc selectAllCheckBoxes()
{
    string $sel[] = `ls -sl`;
    string $selName = $sel[0];
    string $selectedType = `objectType $selName`;

    switch ($selectedType)
    {
        case "anisotropic":
            checkBoxGrp -e -v1 1 anisotropic_color_CheckBox;
            floatFieldGrp -e -enable 1 anisotropic_color_GammaField;
            attrColorSliderGrp -e -enable 1 anisotropic_color_Swatch;
            
            checkBoxGrp -e -v1 1 anisotropic_transparency_CheckBox;
            floatFieldGrp -e -enable 1 anisotropic_transparency_GammaField;
            attrColorSliderGrp -e -enable 1 anisotropic_transparency_Swatch;

            checkBoxGrp -e -v1 1 anisotropic_ambientColor_CheckBox;
            floatFieldGrp -e -enable 1 anisotropic_ambientColor_GammaField;
            attrColorSliderGrp -e -enable 1 anisotropic_ambientColor_Swatch;

            checkBoxGrp -e -v1 1 anisotropic_incandescence_CheckBox;
            floatFieldGrp -e -enable 1 anisotropic_incandescence_GammaField;
            attrColorSliderGrp -e -enable 1 anisotropic_incandescence_Swatch;

            checkBoxGrp -e -v1 1 anisotropic_specularColor_CheckBox;
            floatFieldGrp -e -enable 1 anisotropic_specularColor_GammaField;
            attrColorSliderGrp -e -enable 1 anisotropic_specularColor_Swatch;

            checkBoxGrp -e -v1 1 anisotropic_reflectedColor_CheckBox;
            floatFieldGrp -e -enable 1 anisotropic_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable 1 anisotropic_reflectedColor_Swatch;
            break;

        case "blinn":
            checkBoxGrp -e -v1 1 blinn_color_CheckBox;
            floatFieldGrp -e -enable 1 blinn_color_GammaField;
            attrColorSliderGrp -e -enable 1 blinn_color_Swatch;
            
            checkBoxGrp -e -v1 1 blinn_transparency_CheckBox;
            floatFieldGrp -e -enable 1 blinn_transparency_GammaField;
            attrColorSliderGrp -e -enable 1 blinn_transparency_Swatch;

            checkBoxGrp -e -v1 1 blinn_ambientColor_CheckBox;
            floatFieldGrp -e -enable 1 blinn_ambientColor_GammaField;
            attrColorSliderGrp -e -enable 1 blinn_ambientColor_Swatch;

            checkBoxGrp -e -v1 1 blinn_incandescence_CheckBox;
            floatFieldGrp -e -enable 1 blinn_incandescence_GammaField;
            attrColorSliderGrp -e -enable 1 blinn_incandescence_Swatch;           

            checkBoxGrp -e -v1 1 blinn_specularColor_CheckBox;
            floatFieldGrp -e -enable 1 blinn_specularColor_GammaField;
            attrColorSliderGrp -e -enable 1 blinn_specularColor_Swatch;

            checkBoxGrp -e -v1 1 blinn_reflectedColor_CheckBox;
            floatFieldGrp -e -enable 1 blinn_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable 1 blinn_reflectedColor_Swatch;
            break;            

        case "hairTubeShader":
            checkBoxGrp -e -v1 1 hairTubeShader_color_CheckBox;
            floatFieldGrp -e -enable 1 hairTubeShader_color_GammaField;
            attrColorSliderGrp -e -enable 1 hairTubeShader_color_Swatch;
            
            checkBoxGrp -e -v1 1 hairTubeShader_transparency_CheckBox;
            floatFieldGrp -e -enable 1 hairTubeShader_transparency_GammaField;
            attrColorSliderGrp -e -enable 1 hairTubeShader_transparency_Swatch;

            checkBoxGrp -e -v1 1 hairTubeShader_ambientColor_CheckBox;
            floatFieldGrp -e -enable 1 hairTubeShader_ambientColor_GammaField;
            attrColorSliderGrp -e -enable 1 hairTubeShader_ambientColor_Swatch;

            checkBoxGrp -e -v1 1 hairTubeShader_incandescence_CheckBox;
            floatFieldGrp -e -enable 1 hairTubeShader_incandescence_GammaField;
            attrColorSliderGrp -e -enable 1 hairTubeShader_incandescence_Swatch;           

            checkBoxGrp -e -v1 1 hairTubeShader_specularColor_CheckBox;
            floatFieldGrp -e -enable 1 hairTubeShader_specularColor_GammaField;
            attrColorSliderGrp -e -enable 1 hairTubeShader_specularColor_Swatch;

            checkBoxGrp -e -v1 1 hairTubeShader_reflectedColor_CheckBox;
            floatFieldGrp -e -enable 1 hairTubeShader_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable 1 hairTubeShader_reflectedColor_Swatch;
            break;              

        case "lambert":
            checkBoxGrp -e -v1 1 lambert_color_CheckBox;
            floatFieldGrp -e -enable 1 lambert_color_GammaField;
            attrColorSliderGrp -e -enable 1 lambert_color_Swatch;
            
            checkBoxGrp -e -v1 1 lambert_transparency_CheckBox;
            floatFieldGrp -e -enable 1 lambert_transparency_GammaField;
            attrColorSliderGrp -e -enable 1 lambert_transparency_Swatch;

            checkBoxGrp -e -v1 1 lambert_ambientColor_CheckBox;
            floatFieldGrp -e -enable 1 lambert_ambientColor_GammaField;
            attrColorSliderGrp -e -enable 1 lambert_ambientColor_Swatch;

            checkBoxGrp -e -v1 1 lambert_incandescence_CheckBox;
            floatFieldGrp -e -enable 1 lambert_incandescence_GammaField;
            attrColorSliderGrp -e -enable 1 lambert_incandescence_Swatch;
            break;

        case "oceanShader":
            checkBoxGrp -e -v1 1 oceanShader_waterColor_CheckBox;
            floatFieldGrp -e -enable 1 oceanShader_waterColor_GammaField;
            attrColorSliderGrp -e -enable 1 oceanShader_waterColor_Swatch;
            
            checkBoxGrp -e -v1 1 oceanShader_foamColor_CheckBox;
            floatFieldGrp -e -enable 1 oceanShader_foamColor_GammaField;
            attrColorSliderGrp -e -enable 1 oceanShader_foamColor_Swatch;            
            
            checkBoxGrp -e -v1 1 oceanShader_transparency_CheckBox;
            floatFieldGrp -e -enable 1 oceanShader_transparency_GammaField;
            attrColorSliderGrp -e -enable 1 oceanShader_transparency_Swatch;
            
            checkBoxGrp -e -v1 1 oceanShader_incandescence_CheckBox;
            floatFieldGrp -e -enable 1 oceanShader_incandescence_GammaField;
            attrColorSliderGrp -e -enable 1 oceanShader_incandescence_Swatch;            

            checkBoxGrp -e -v1 1 oceanShader_ambientColor_CheckBox;
            floatFieldGrp -e -enable 1 oceanShader_ambientColor_GammaField;
            attrColorSliderGrp -e -enable 1 oceanShader_ambientColor_Swatch;

            checkBoxGrp -e -v1 1 oceanShader_specularColor_CheckBox;
            floatFieldGrp -e -enable 1 oceanShader_specularColor_GammaField;
            attrColorSliderGrp -e -enable 1 oceanShader_specularColor_Swatch;

            checkBoxGrp -e -v1 1 oceanShader_reflectedColor_CheckBox;
            floatFieldGrp -e -enable 1 oceanShader_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable 1 oceanShader_reflectedColor_Swatch;
            break;            

        case "phong":
            checkBoxGrp -e -v1 1 phong_color_CheckBox;
            floatFieldGrp -e -enable 1 phong_color_GammaField;
            attrColorSliderGrp -e -enable 1 phong_color_Swatch;
            
            checkBoxGrp -e -v1 1 phong_transparency_CheckBox;
            floatFieldGrp -e -enable 1 phong_transparency_GammaField;
            attrColorSliderGrp -e -enable 1 phong_transparency_Swatch;

            checkBoxGrp -e -v1 1 phong_ambientColor_CheckBox;
            floatFieldGrp -e -enable 1 phong_ambientColor_GammaField;
            attrColorSliderGrp -e -enable 1 phong_ambientColor_Swatch;

            checkBoxGrp -e -v1 1 phong_incandescence_CheckBox;
            floatFieldGrp -e -enable 1 phong_incandescence_GammaField;
            attrColorSliderGrp -e -enable 1 phong_incandescence_Swatch;

            checkBoxGrp -e -v1 1 phong_specularColor_CheckBox;
            floatFieldGrp -e -enable 1 phong_specularColor_GammaField;
            attrColorSliderGrp -e -enable 1 phong_specularColor_Swatch;

            checkBoxGrp -e -v1 1 phong_reflectedColor_CheckBox;
            floatFieldGrp -e -enable 1 phong_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable 1 phong_reflectedColor_Swatch;
            break;

        case "phongE":
            checkBoxGrp -e -v1 1 phongE_color_CheckBox;
            floatFieldGrp -e -enable 1 phongE_color_GammaField;
            attrColorSliderGrp -e -enable 1 phongE_color_Swatch;
            
            checkBoxGrp -e -v1 1 phongE_transparency_CheckBox;
            floatFieldGrp -e -enable 1 phongE_transparency_GammaField;
            attrColorSliderGrp -e -enable 1 phongE_transparency_Swatch;

            checkBoxGrp -e -v1 1 phongE_ambientColor_CheckBox;
            floatFieldGrp -e -enable 1 phongE_ambientColor_GammaField;
            attrColorSliderGrp -e -enable 1 phongE_ambientColor_Swatch;

            checkBoxGrp -e -v1 1 phongE_incandescence_CheckBox;
            floatFieldGrp -e -enable 1 phongE_incandescence_GammaField;
            attrColorSliderGrp -e -enable 1 phongE_incandescence_Swatch;

            checkBoxGrp -e -v1 1 phongE_whiteness_CheckBox;
            floatFieldGrp -e -enable 1 phongE_whiteness_GammaField;
            attrColorSliderGrp -e -enable 1 phongE_whiteness_Swatch;            

            checkBoxGrp -e -v1 1 phongE_specularColor_CheckBox;
            floatFieldGrp -e -enable 1 phongE_specularColor_GammaField;
            attrColorSliderGrp -e -enable 1 phongE_specularColor_Swatch;

            checkBoxGrp -e -v1 1 phongE_reflectedColor_CheckBox;
            floatFieldGrp -e -enable 1 phongE_reflectedColor_GammaField;
            attrColorSliderGrp -e -enable 1 phongE_reflectedColor_Swatch;
            break;

        case "shadingMap":
            checkBoxGrp -e -v1 1 shadingMap_shadingMapColor_CheckBox;
            floatFieldGrp -e -enable 1 shadingMap_shadingMapColor_GammaField;
            attrColorSliderGrp -e -enable 1 shadingMap_shadingMapColor_Swatch;
            break;

        case "surfaceShader":
            checkBoxGrp -e -v1 1 surfaceShader_outColor_CheckBox;
            floatFieldGrp -e -enable 1 surfaceShader_outColor_GammaField;
            attrColorSliderGrp -e -enable 1 surfaceShader_outColor_Swatch;
            
            checkBoxGrp -e -v1 1 surfaceShader_outTransparency_CheckBox;
            floatFieldGrp -e -enable 1 surfaceShader_outTransparency_GammaField;
            attrColorSliderGrp -e -enable 1 surfaceShader_outTransparency_Swatch;

            checkBoxGrp -e -v1 1 surfaceShader_outGlowColor_CheckBox;
            floatFieldGrp -e -enable 1 surfaceShader_outGlowColor_GammaField;
            attrColorSliderGrp -e -enable 1 surfaceShader_outGlowColor_Swatch;

            checkBoxGrp -e -v1 1 surfaceShader_outMatteOpacity_CheckBox;
            floatFieldGrp -e -enable 1 surfaceShader_outMatteOpacity_GammaField;
            attrColorSliderGrp -e -enable 1 surfaceShader_outMatteOpacity_Swatch;
            break;   
            
        case "useBackground":
            checkBoxGrp -e -v1 1 useBackground_specularColor_CheckBox;
            floatFieldGrp -e -enable 1 useBackground_specularColor_GammaField;
            attrColorSliderGrp -e -enable 1 useBackground_specularColor_Swatch;
            break;                                    

        case "envFog":
            checkBoxGrp -e -v1 1 envFog_color_CheckBox;
            floatFieldGrp -e -enable 1 envFog_color_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_color_Swatch;
            
            checkBoxGrp -e -v1 1 envFog_fogColor_CheckBox;
            floatFieldGrp -e -enable 1 envFog_fogColor_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_fogColor_Swatch;

            checkBoxGrp -e -v1 1 envFog_fogOpacity_CheckBox;
            floatFieldGrp -e -enable 1 envFog_fogOpacity_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_fogOpacity_Swatch;

            checkBoxGrp -e -v1 1 envFog_airColor_CheckBox;
            floatFieldGrp -e -enable 1 envFog_airColor_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_airColor_Swatch;

            checkBoxGrp -e -v1 1 envFog_airOpacity_CheckBox;
            floatFieldGrp -e -enable 1 envFog_airOpacity_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_airOpacity_Swatch;
            
            checkBoxGrp -e -v1 1 envFog_waterColor_CheckBox;
            floatFieldGrp -e -enable 1 envFog_waterColor_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_waterColor_Swatch;

            checkBoxGrp -e -v1 1 envFog_waterOpacity_CheckBox;
            floatFieldGrp -e -enable 1 envFog_waterOpacity_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_waterOpacity_Swatch;

            checkBoxGrp -e -v1 1 envFog_sunColor_CheckBox;
            floatFieldGrp -e -enable 1 envFog_sunColor_GammaField;
            attrColorSliderGrp -e -enable 1 envFog_sunColor_Swatch;
            break;

        case "dgs_material":
            checkBoxGrp -e -v1 1 dgs_material_diffuse_CheckBox;
            floatFieldGrp -e -enable 1 dgs_material_diffuse_GammaField;
            attrColorSliderGrp -e -enable 1 dgs_material_diffuse_Swatch;
            
            checkBoxGrp -e -v1 1 dgs_material_glossy_CheckBox;
            floatFieldGrp -e -enable 1 dgs_material_glossy_GammaField;
            attrColorSliderGrp -e -enable 1 dgs_material_glossy_Swatch;

            checkBoxGrp -e -v1 1 dgs_material_specular_CheckBox;
            floatFieldGrp -e -enable 1 dgs_material_specular_GammaField;
            attrColorSliderGrp -e -enable 1 dgs_material_specular_Swatch;
            break;

        case "dielectric_material":
            checkBoxGrp -e -v1 1 dielectric_material_col_CheckBox;
            floatFieldGrp -e -enable 1 dielectric_material_col_GammaField;
            attrColorSliderGrp -e -enable 1 dielectric_material_col_Swatch;
            
            checkBoxGrp -e -v1 1 dielectric_material_col_out_CheckBox;
            floatFieldGrp -e -enable 1 dielectric_material_col_out_GammaField;
            attrColorSliderGrp -e -enable 1 dielectric_material_col_out_Swatch;
            break;

        case "mi_car_paint_phen_x":
        case "mi_car_paint_phen_x_passes":
        case "mi_car_paint_phen":
            checkBoxGrp -e -v1 1 mi_car_paint_phen_ambient_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_ambient_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_ambient_Swatch;
            
            checkBoxGrp -e -v1 1 mi_car_paint_phen_base_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_base_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_base_color_Swatch;

            checkBoxGrp -e -v1 1 mi_car_paint_phen_edge_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_edge_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_edge_color_Swatch;


            checkBoxGrp -e -v1 1 mi_car_paint_phen_lit_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_lit_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_lit_color_Swatch;
            
            checkBoxGrp -e -v1 1 mi_car_paint_phen_spec_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_spec_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_spec_Swatch;

            checkBoxGrp -e -v1 1 mi_car_paint_phen_spec_sec_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_spec_sec_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_spec_sec_Swatch;

            checkBoxGrp -e -v1 1 mi_car_paint_phen_flake_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_flake_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_flake_color_Swatch;
            
            checkBoxGrp -e -v1 1 mi_car_paint_phen_reflection_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_reflection_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_reflection_color_Swatch;

            checkBoxGrp -e -v1 1 mi_car_paint_phen_dirt_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_car_paint_phen_dirt_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_car_paint_phen_dirt_color_Swatch;
            break;
            
        case "mi_metallic_paint_x":
        case "mi_metallic_paint_x_passes":
        case "mi_metallic_paint":
            checkBoxGrp -e -v1 1 mi_metallic_paint_ambient_CheckBox;
            floatFieldGrp -e -enable 1 mi_metallic_paint_ambient_GammaField;
            attrColorSliderGrp -e -enable 1 mi_metallic_paint_ambient_Swatch;
            
            checkBoxGrp -e -v1 1 mi_metallic_paint_base_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_metallic_paint_base_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_metallic_paint_base_color_Swatch;

            checkBoxGrp -e -v1 1 mi_metallic_paint_edge_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_metallic_paint_edge_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_metallic_paint_edge_color_Swatch;

            checkBoxGrp -e -v1 1 mi_metallic_paint_lit_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_metallic_paint_lit_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_metallic_paint_lit_color_Swatch;
            
            checkBoxGrp -e -v1 1 mi_metallic_paint_spec_CheckBox;
            floatFieldGrp -e -enable 1 mi_metallic_paint_spec_GammaField;
            attrColorSliderGrp -e -enable 1 mi_metallic_paint_spec_Swatch;

            checkBoxGrp -e -v1 1 mi_metallic_paint_spec_sec_CheckBox;
            floatFieldGrp -e -enable 1 mi_metallic_paint_spec_sec_GammaField;
            attrColorSliderGrp -e -enable 1 mi_metallic_paint_spec_sec_Swatch;

            checkBoxGrp -e -v1 1 mi_metallic_paint_flake_color_CheckBox;
            floatFieldGrp -e -enable 1 mi_metallic_paint_flake_color_GammaField;
            attrColorSliderGrp -e -enable 1 mi_metallic_paint_flake_color_Swatch;
            break;

        case "mia_material_x":
        case "mia_material_x_passes":
        case "mia_material":
            checkBoxGrp -e -v1 1 mia_material_diffuse_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_diffuse_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_diffuse_Swatch;
            
            checkBoxGrp -e -v1 1 mia_material_refl_color_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_refl_color_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_refl_color_Swatch;

            checkBoxGrp -e -v1 1 mia_material_refl_falloff_color_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_refl_falloff_color_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_refl_falloff_color_Swatch;

            checkBoxGrp -e -v1 1 mia_material_refr_color_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_refr_color_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_refr_color_Swatch;
            
            checkBoxGrp -e -v1 1 mia_material_refr_falloff_color_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_refr_falloff_color_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_refr_falloff_color_Swatch;

            checkBoxGrp -e -v1 1 mia_material_refr_trans_color_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_refr_trans_color_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_refr_trans_color_Swatch;

            checkBoxGrp -e -v1 1 mia_material_ao_dark_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_ao_dark_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_ao_dark_Swatch;

            checkBoxGrp -e -v1 1 mia_material_ao_ambient_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_ao_ambient_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_ao_ambient_Swatch;

            checkBoxGrp -e -v1 1 mia_material_additional_color_CheckBox;
            floatFieldGrp -e -enable 1 mia_material_additional_color_GammaField;
            attrColorSliderGrp -e -enable 1 mia_material_additional_color_Swatch;
            break;

        default:
            print ("Selected Type is: " + $selectedType + "\n");
            print ("Something went wrong in selectAllCheckBoxes" + "\n");
    }
}

global proc getNewSelection()
{
    deleteUI gammaColorSwatchWindow;
    gammaColorSwatch;
}

global proc applyPressed()
{
    global string $selectedType;
    global string $selName;
    
    int $send;
    
    switch ($selectedType)
    {
        case "anisotropic":
            int $anisotropic_color_CheckBox_State = `checkBoxGrp -q -v1 anisotropic_color_CheckBox`;
            float $anisotropic_color_gammaValue = `floatFieldGrp -q -value1 anisotropic_color_GammaField`;
            if ($anisotropic_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".color") $anisotropic_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $anisotropic_transparency_CheckBox_State = `checkBoxGrp -q -v1 anisotropic_transparency_CheckBox`;
            float $anisotropic_transparency_gammaValue = `floatFieldGrp -q -value1 anisotropic_transparency_GammaField`;
            if ($anisotropic_transparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".transparency") $anisotropic_transparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $anisotropic_ambientColor_CheckBox_State = `checkBoxGrp -q -v1 anisotropic_ambientColor_CheckBox`;
            float $anisotropic_ambientColor_gammaValue = `floatFieldGrp -q -value1 anisotropic_ambientColor_GammaField`;
            if ($anisotropic_ambientColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambientColor") $anisotropic_ambientColor_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $anisotropic_incandescence_CheckBox_State = `checkBoxGrp -q -v1 anisotropic_incandescence_CheckBox`;
            float $anisotropic_incandescence_gammaValue = `floatFieldGrp -q -value1 anisotropic_incandescence_GammaField`;
            if ($anisotropic_incandescence_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".incandescence") $anisotropic_incandescence_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $anisotropic_specularColor_CheckBox_State = `checkBoxGrp -q -v1 anisotropic_specularColor_CheckBox`;
            float $anisotropic_specularColor_gammaValue = `floatFieldGrp -q -value1 anisotropic_specularColor_GammaField`;
            if ($anisotropic_specularColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specularColor") $anisotropic_specularColor_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $anisotropic_reflectedColor_CheckBox_State = `checkBoxGrp -q -v1 anisotropic_reflectedColor_CheckBox`;
            float $anisotropic_reflectedColor_gammaValue = `floatFieldGrp -q -value1 anisotropic_reflectedColor_GammaField`;
            if ($anisotropic_reflectedColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".reflectedColor") $anisotropic_reflectedColor_gammaValue`;
            }                                  
            break;

        case "blinn":
            int $blinn_color_CheckBox_State = `checkBoxGrp -q -v1 blinn_color_CheckBox`;
            float $blinn_color_gammaValue = `floatFieldGrp -q -value1 blinn_color_GammaField`;
            if ($blinn_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".color") $blinn_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $blinn_transparency_CheckBox_State = `checkBoxGrp -q -v1 blinn_transparency_CheckBox`;
            float $blinn_transparency_gammaValue = `floatFieldGrp -q -value1 blinn_transparency_GammaField`;
            if ($blinn_transparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".transparency") $blinn_transparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $blinn_ambientColor_CheckBox_State = `checkBoxGrp -q -v1 blinn_ambientColor_CheckBox`;
            float $blinn_ambientColor_gammaValue = `floatFieldGrp -q -value1 blinn_ambientColor_GammaField`;
            if ($blinn_ambientColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambientColor") $blinn_ambientColor_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $blinn_incandescence_CheckBox_State = `checkBoxGrp -q -v1 blinn_incandescence_CheckBox`;
            float $blinn_incandescence_gammaValue = `floatFieldGrp -q -value1 blinn_incandescence_GammaField`;
            if ($blinn_incandescence_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".incandescence") $blinn_incandescence_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $blinn_specularColor_CheckBox_State = `checkBoxGrp -q -v1 blinn_specularColor_CheckBox`;
            float $blinn_specularColor_gammaValue = `floatFieldGrp -q -value1 blinn_specularColor_GammaField`;
            if ($blinn_specularColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specularColor") $blinn_specularColor_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $blinn_reflectedColor_CheckBox_State = `checkBoxGrp -q -v1 blinn_reflectedColor_CheckBox`;
            float $blinn_reflectedColor_gammaValue = `floatFieldGrp -q -value1 blinn_reflectedColor_GammaField`;
            if ($blinn_reflectedColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".reflectedColor") $blinn_reflectedColor_gammaValue`;
            }                                  
            break;            

        case "hairTubeShader":
            int $hairTubeShader_color_CheckBox_State = `checkBoxGrp -q -v1 hairTubeShader_color_CheckBox`;
            float $hairTubeShader_color_gammaValue = `floatFieldGrp -q -value1 hairTubeShader_color_GammaField`;
            if ($hairTubeShader_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".color") $hairTubeShader_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $hairTubeShader_transparency_CheckBox_State = `checkBoxGrp -q -v1 hairTubeShader_transparency_CheckBox`;
            float $hairTubeShader_transparency_gammaValue = `floatFieldGrp -q -value1 hairTubeShader_transparency_GammaField`;
            if ($hairTubeShader_transparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".transparency") $hairTubeShader_transparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $hairTubeShader_ambientColor_CheckBox_State = `checkBoxGrp -q -v1 hairTubeShader_ambientColor_CheckBox`;
            float $hairTubeShader_ambientColor_gammaValue = `floatFieldGrp -q -value1 hairTubeShader_ambientColor_GammaField`;
            if ($hairTubeShader_ambientColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambientColor") $hairTubeShader_ambientColor_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $hairTubeShader_incandescence_CheckBox_State = `checkBoxGrp -q -v1 hairTubeShader_incandescence_CheckBox`;
            float $hairTubeShader_incandescence_gammaValue = `floatFieldGrp -q -value1 hairTubeShader_incandescence_GammaField`;
            if ($hairTubeShader_incandescence_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".incandescence") $hairTubeShader_incandescence_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $hairTubeShader_specularColor_CheckBox_State = `checkBoxGrp -q -v1 hairTubeShader_specularColor_CheckBox`;
            float $hairTubeShader_specularColor_gammaValue = `floatFieldGrp -q -value1 hairTubeShader_specularColor_GammaField`;
            if ($hairTubeShader_specularColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specularColor") $hairTubeShader_specularColor_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $hairTubeShader_reflectedColor_CheckBox_State = `checkBoxGrp -q -v1 hairTubeShader_reflectedColor_CheckBox`;
            float $hairTubeShader_reflectedColor_gammaValue = `floatFieldGrp -q -value1 hairTubeShader_reflectedColor_GammaField`;
            if ($hairTubeShader_reflectedColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".reflectedColor") $hairTubeShader_reflectedColor_gammaValue`;
            }                                  
            break;              

        case "lambert":
            int $lambert_color_CheckBox_State = `checkBoxGrp -q -v1 lambert_color_CheckBox`;
            float $lambert_color_gammaValue = `floatFieldGrp -q -value1 lambert_color_GammaField`;
            if ($lambert_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".color") $lambert_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $lambert_transparency_CheckBox_State = `checkBoxGrp -q -v1 lambert_transparency_CheckBox`;
            float $lambert_transparency_gammaValue = `floatFieldGrp -q -value1 lambert_transparency_GammaField`;
            if ($lambert_transparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".transparency") $lambert_transparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $lambert_ambientColor_CheckBox_State = `checkBoxGrp -q -v1 lambert_ambientColor_CheckBox`;
            float $lambert_ambientColor_gammaValue = `floatFieldGrp -q -value1 lambert_ambientColor_GammaField`;
            if ($lambert_ambientColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambientColor") $lambert_ambientColor_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $lambert_incandescence_CheckBox_State = `checkBoxGrp -q -v1 lambert_incandescence_CheckBox`;
            float $lambert_incandescence_gammaValue = `floatFieldGrp -q -value1 lambert_incandescence_GammaField`;
            if ($lambert_incandescence_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".incandescence") $lambert_incandescence_gammaValue`;
            }     
            break;

        case "oceanShader":
            int $oceanShader_waterColor_CheckBox_State = `checkBoxGrp -q -v1 oceanShader_waterColor_CheckBox`;
            float $oceanShader_waterColor_gammaValue = `floatFieldGrp -q -value1 oceanShader_waterColor_GammaField`;
            if ($oceanShader_waterColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".waterColor") $oceanShader_waterColor_gammaValue`;
            }
            ////////////////////////////////////////////
            int $oceanShader_foamColor_CheckBox_State = `checkBoxGrp -q -v1 oceanShader_foamColor_CheckBox`;
            float $oceanShader_foamColor_gammaValue = `floatFieldGrp -q -value1 oceanShader_foamColor_GammaField`;
            if ($oceanShader_foamColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".foamColor") $oceanShader_foamColor_gammaValue`;
            }
            ////////////////////////////////////////////            
            int $oceanShader_transparency_CheckBox_State = `checkBoxGrp -q -v1 oceanShader_transparency_CheckBox`;
            float $oceanShader_transparency_gammaValue = `floatFieldGrp -q -value1 oceanShader_transparency_GammaField`;
            if ($oceanShader_transparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".transparency") $oceanShader_transparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $oceanShader_incandescence_CheckBox_State = `checkBoxGrp -q -v1 oceanShader_incandescence_CheckBox`;
            float $oceanShader_incandescence_gammaValue = `floatFieldGrp -q -value1 oceanShader_incandescence_GammaField`;
            if ($oceanShader_incandescence_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".incandescence") $oceanShader_incandescence_gammaValue`;
            } 
            ////////////////////////////////////////////
            int $oceanShader_ambientColor_CheckBox_State = `checkBoxGrp -q -v1 oceanShader_ambientColor_CheckBox`;
            float $oceanShader_ambientColor_gammaValue = `floatFieldGrp -q -value1 oceanShader_ambientColor_GammaField`;
            if ($oceanShader_ambientColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambientColor") $oceanShader_ambientColor_gammaValue`;
            }    
     
            ////////////////////////////////////////////
            int $oceanShader_specularColor_CheckBox_State = `checkBoxGrp -q -v1 oceanShader_specularColor_CheckBox`;
            float $oceanShader_specularColor_gammaValue = `floatFieldGrp -q -value1 oceanShader_specularColor_GammaField`;
            if ($oceanShader_specularColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specularColor") $oceanShader_specularColor_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $oceanShader_reflectedColor_CheckBox_State = `checkBoxGrp -q -v1 oceanShader_reflectedColor_CheckBox`;
            float $oceanShader_reflectedColor_gammaValue = `floatFieldGrp -q -value1 oceanShader_reflectedColor_GammaField`;
            if ($oceanShader_reflectedColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".reflectedColor") $oceanShader_reflectedColor_gammaValue`;
            }                                  
            break;

        case "phong":
            int $phong_color_CheckBox_State = `checkBoxGrp -q -v1 phong_color_CheckBox`;
            float $phong_color_gammaValue = `floatFieldGrp -q -value1 phong_color_GammaField`;
            if ($phong_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".color") $phong_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $phong_transparency_CheckBox_State = `checkBoxGrp -q -v1 phong_transparency_CheckBox`;
            float $phong_transparency_gammaValue = `floatFieldGrp -q -value1 phong_transparency_GammaField`;
            if ($phong_transparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".transparency") $phong_transparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $phong_ambientColor_CheckBox_State = `checkBoxGrp -q -v1 phong_ambientColor_CheckBox`;
            float $phong_ambientColor_gammaValue = `floatFieldGrp -q -value1 phong_ambientColor_GammaField`;
            if ($phong_ambientColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambientColor") $phong_ambientColor_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $phong_incandescence_CheckBox_State = `checkBoxGrp -q -v1 phong_incandescence_CheckBox`;
            float $phong_incandescence_gammaValue = `floatFieldGrp -q -value1 phong_incandescence_GammaField`;
            if ($phong_incandescence_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".incandescence") $phong_incandescence_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $phong_specularColor_CheckBox_State = `checkBoxGrp -q -v1 phong_specularColor_CheckBox`;
            float $phong_specularColor_gammaValue = `floatFieldGrp -q -value1 phong_specularColor_GammaField`;
            if ($phong_specularColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specularColor") $phong_specularColor_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $phong_reflectedColor_CheckBox_State = `checkBoxGrp -q -v1 phong_reflectedColor_CheckBox`;
            float $phong_reflectedColor_gammaValue = `floatFieldGrp -q -value1 phong_reflectedColor_GammaField`;
            if ($phong_reflectedColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".reflectedColor") $phong_reflectedColor_gammaValue`;
            }                                  
            break;   

        case "phongE":
            int $phongE_color_CheckBox_State = `checkBoxGrp -q -v1 phongE_color_CheckBox`;
            float $phongE_color_gammaValue = `floatFieldGrp -q -value1 phongE_color_GammaField`;
            if ($phongE_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".color") $phongE_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $phongE_transparency_CheckBox_State = `checkBoxGrp -q -v1 phongE_transparency_CheckBox`;
            float $phongE_transparency_gammaValue = `floatFieldGrp -q -value1 phongE_transparency_GammaField`;
            if ($phongE_transparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".transparency") $phongE_transparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $phongE_ambientColor_CheckBox_State = `checkBoxGrp -q -v1 phongE_ambientColor_CheckBox`;
            float $phongE_ambientColor_gammaValue = `floatFieldGrp -q -value1 phongE_ambientColor_GammaField`;
            if ($phongE_ambientColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambientColor") $phongE_ambientColor_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $phongE_incandescence_CheckBox_State = `checkBoxGrp -q -v1 phongE_incandescence_CheckBox`;
            float $phongE_incandescence_gammaValue = `floatFieldGrp -q -value1 phongE_incandescence_GammaField`;
            if ($phongE_incandescence_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".incandescence") $phongE_incandescence_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $phongE_whiteness_CheckBox_State = `checkBoxGrp -q -v1 phongE_whiteness_CheckBox`;
            float $phongE_whiteness_gammaValue = `floatFieldGrp -q -value1 phongE_whiteness_GammaField`;
            if ($phongE_whiteness_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".whiteness") $phongE_whiteness_gammaValue`;
            }                
            ////////////////////////////////////////////
            int $phongE_specularColor_CheckBox_State = `checkBoxGrp -q -v1 phongE_specularColor_CheckBox`;
            float $phongE_specularColor_gammaValue = `floatFieldGrp -q -value1 phongE_specularColor_GammaField`;
            if ($phongE_specularColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specularColor") $phongE_specularColor_gammaValue`;
            }      
            ////////////////////////////////////////////
            int $phongE_reflectedColor_CheckBox_State = `checkBoxGrp -q -v1 phongE_reflectedColor_CheckBox`;
            float $phongE_reflectedColor_gammaValue = `floatFieldGrp -q -value1 phongE_reflectedColor_GammaField`;
            if ($phongE_reflectedColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".reflectedColor") $phongE_reflectedColor_gammaValue`;
            }                                  
            break;

        case "shadingMap":
            int $shadingMap_shadingMapColor_CheckBox_State = `checkBoxGrp -q -v1 shadingMap_shadingMapColor_CheckBox`;
            float $shadingMap_shadingMapColor_gammaValue = `floatFieldGrp -q -value1 shadingMap_shadingMapColor_GammaField`;
            if ($shadingMap_shadingMapColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".shadingMapColor") $shadingMap_shadingMapColor_gammaValue`;
            }
            break;           

        case "surfaceShader":
            int $surfaceShader_outColor_CheckBox_State = `checkBoxGrp -q -v1 surfaceShader_outColor_CheckBox`;
            float $surfaceShader_outColor_gammaValue = `floatFieldGrp -q -value1 surfaceShader_outColor_GammaField`;
            if ($surfaceShader_outColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".outColor") $surfaceShader_outColor_gammaValue`;
            }
            ////////////////////////////////////////////
            int $surfaceShader_outTransparency_CheckBox_State = `checkBoxGrp -q -v1 surfaceShader_outTransparency_CheckBox`;
            float $surfaceShader_outTransparency_gammaValue = `floatFieldGrp -q -value1 surfaceShader_outTransparency_GammaField`;
            if ($surfaceShader_outTransparency_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".outTransparency") $surfaceShader_outTransparency_gammaValue`;
            }
            ////////////////////////////////////////////
            int $surfaceShader_outGlowColor_CheckBox_State = `checkBoxGrp -q -v1 surfaceShader_outGlowColor_CheckBox`;
            float $surfaceShader_outGlowColor_gammaValue = `floatFieldGrp -q -value1 surfaceShader_outGlowColor_GammaField`;
            if ($surfaceShader_outGlowColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".outGlowColor") $surfaceShader_outGlowColor_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $surfaceShader_outMatteOpacity_CheckBox_State = `checkBoxGrp -q -v1 surfaceShader_outMatteOpacity_CheckBox`;
            float $surfaceShader_outMatteOpacity_gammaValue = `floatFieldGrp -q -value1 surfaceShader_outMatteOpacity_GammaField`;
            if ($surfaceShader_outMatteOpacity_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".outMatteOpacity") $surfaceShader_outMatteOpacity_gammaValue`;
            }                                      
            break;    

        case "useBackground":
            int $useBackground_specularColor_CheckBox_State = `checkBoxGrp -q -v1 useBackground_specularColor_CheckBox`;
            float $useBackground_specularColor_gammaValue = `floatFieldGrp -q -value1 useBackground_specularColor_GammaField`;
            if ($useBackground_specularColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specularColor") $useBackground_specularColor_gammaValue`;
            }
            break;                                        

        case "envFog":
            int $envFog_color_CheckBox_State = `checkBoxGrp -q -v1 envFog_color_CheckBox`;
            float $envFog_color_gammaValue = `floatFieldGrp -q -value1 envFog_color_GammaField`;
            if ($envFog_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".color") $envFog_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $envFog_fogColor_CheckBox_State = `checkBoxGrp -q -v1 envFog_fogColor_CheckBox`;
            float $envFog_fogColor_gammaValue = `floatFieldGrp -q -value1 envFog_fogColor_GammaField`;
            if ($envFog_fogColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".fogColor") $envFog_fogColor_gammaValue`;
            }
            ////////////////////////////////////////////
            int $envFog_fogOpacity_CheckBox_State = `checkBoxGrp -q -v1 envFog_fogOpacity_CheckBox`;
            float $envFog_fogOpacity_gammaValue = `floatFieldGrp -q -value1 envFog_fogOpacity_GammaField`;
            if ($envFog_fogOpacity_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".fogOpacity") $envFog_fogOpacity_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $envFog_airColor_CheckBox_State = `checkBoxGrp -q -v1 envFog_airColor_CheckBox`;
            float $envFog_airColor_gammaValue = `floatFieldGrp -q -value1 envFog_airColor_GammaField`;
            if ($envFog_airColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".airColor") $envFog_airColor_gammaValue`;
            }
            ////////////////////////////////////////////
            int $envFog_airOpacity_CheckBox_State = `checkBoxGrp -q -v1 envFog_airOpacity_CheckBox`;
            float $envFog_airOpacity_gammaValue = `floatFieldGrp -q -value1 envFog_airOpacity_GammaField`;
            if ($envFog_airOpacity_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".airOpacity") $envFog_airOpacity_gammaValue`;
            }
            ////////////////////////////////////////////
            int $envFog_waterColor_CheckBox_State = `checkBoxGrp -q -v1 envFog_waterColor_CheckBox`;
            float $envFog_waterColor_gammaValue = `floatFieldGrp -q -value1 envFog_waterColor_GammaField`;
            if ($envFog_waterColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".waterColor") $envFog_waterColor_gammaValue`;
            }
            ////////////////////////////////////////////
            int $envFog_waterOpacity_CheckBox_State = `checkBoxGrp -q -v1 envFog_waterOpacity_CheckBox`;
            float $envFog_waterOpacity_gammaValue = `floatFieldGrp -q -value1 envFog_waterOpacity_GammaField`;
            if ($envFog_waterOpacity_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".waterOpacity") $envFog_waterOpacity_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $envFog_sunColor_CheckBox_State = `checkBoxGrp -q -v1 envFog_sunColor_CheckBox`;
            float $envFog_sunColor_gammaValue = `floatFieldGrp -q -value1 envFog_sunColor_GammaField`;
            if ($envFog_sunColor_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".sunColor") $envFog_sunColor_gammaValue`;
            }    
            break;

        case "dgs_material":
            int $dgs_material_diffuse_CheckBox_State = `checkBoxGrp -q -v1 dgs_material_diffuse_CheckBox`;
            float $dgs_material_diffuse_gammaValue = `floatFieldGrp -q -value1 dgs_material_diffuse_GammaField`;
            if ($dgs_material_diffuse_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".diffuse") $dgs_material_diffuse_gammaValue`;
            }
            ////////////////////////////////////////////
            int $dgs_material_glossy_CheckBox_State = `checkBoxGrp -q -v1 dgs_material_glossy_CheckBox`;
            float $dgs_material_glossy_gammaValue = `floatFieldGrp -q -value1 dgs_material_glossy_GammaField`;
            if ($dgs_material_glossy_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".glossy") $dgs_material_glossy_gammaValue`;
            }
            ////////////////////////////////////////////
            int $dgs_material_specular_CheckBox_State = `checkBoxGrp -q -v1 dgs_material_specular_CheckBox`;
            float $dgs_material_specular_gammaValue = `floatFieldGrp -q -value1 dgs_material_specular_GammaField`;
            if ($dgs_material_specular_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".specular") $dgs_material_specular_gammaValue`;
            }
            break;

        case "dielectric_material":
            int $dielectric_material_col_CheckBox_State = `checkBoxGrp -q -v1 dielectric_material_col_CheckBox`;
            float $dielectric_material_col_gammaValue = `floatFieldGrp -q -value1 dielectric_material_col_GammaField`;
            if ($dielectric_material_col_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".col") $dielectric_material_col_gammaValue`;
            }
            ////////////////////////////////////////////
            int $dielectric_material_col_out_CheckBox_State = `checkBoxGrp -q -v1 dielectric_material_col_out_CheckBox`;
            float $dielectric_material_col_out_gammaValue = `floatFieldGrp -q -value1 dielectric_material_col_out_GammaField`;
            if ($dielectric_material_col_out_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".col_out") $dielectric_material_col_out_gammaValue`;
            }
            break;

        case "mi_car_paint_phen_x":
        case "mi_car_paint_phen_x_passes":
        case "mi_car_paint_phen":
            int $mi_car_paint_phen_ambient_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_ambient_CheckBox`;
            float $mi_car_paint_phen_ambient_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_ambient_GammaField`;
            if ($mi_car_paint_phen_ambient_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambient") $mi_car_paint_phen_ambient_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_car_paint_phen_base_color_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_base_color_CheckBox`;
            float $mi_car_paint_phen_base_color_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_base_color_GammaField`;
            if ($mi_car_paint_phen_base_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".base_color") $mi_car_paint_phen_base_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_car_paint_phen_edge_color_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_edge_color_CheckBox`;
            float $mi_car_paint_phen_edge_color_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_edge_color_GammaField`;
            if ($mi_car_paint_phen_edge_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".edge_color") $mi_car_paint_phen_edge_color_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $mi_car_paint_phen_lit_color_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_lit_color_CheckBox`;
            float $mi_car_paint_phen_lit_color_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_lit_color_GammaField`;
            if ($mi_car_paint_phen_lit_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".lit_color") $mi_car_paint_phen_lit_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_car_paint_phen_spec_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_spec_CheckBox`;
            float $mi_car_paint_phen_spec_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_spec_GammaField`;
            if ($mi_car_paint_phen_spec_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".spec") $mi_car_paint_phen_spec_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_car_paint_phen_spec_sec_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_spec_sec_CheckBox`;
            float $mi_car_paint_phen_spec_sec_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_spec_sec_GammaField`;
            if ($mi_car_paint_phen_spec_sec_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".spec_sec") $mi_car_paint_phen_spec_sec_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_car_paint_phen_flake_color_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_flake_color_CheckBox`;
            float $mi_car_paint_phen_flake_color_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_flake_color_GammaField`;
            if ($mi_car_paint_phen_flake_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".flake_color") $mi_car_paint_phen_flake_color_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $mi_car_paint_phen_reflection_color_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_reflection_color_CheckBox`;
            float $mi_car_paint_phen_reflection_color_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_reflection_color_GammaField`;
            if ($mi_car_paint_phen_reflection_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".reflection_color") $mi_car_paint_phen_reflection_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_car_paint_phen_dirt_color_CheckBox_State = `checkBoxGrp -q -v1 mi_car_paint_phen_dirt_color_CheckBox`;
            float $mi_car_paint_phen_dirt_color_gammaValue = `floatFieldGrp -q -value1 mi_car_paint_phen_dirt_color_GammaField`;
            if ($mi_car_paint_phen_dirt_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".dirt_color") $mi_car_paint_phen_dirt_color_gammaValue`;
            }    
            break;

        case "mi_metallic_paint_x":
        case "mi_metallic_paint_x_passes":
        case "mi_metallic_paint":
            int $mi_metallic_paint_ambient_CheckBox_State = `checkBoxGrp -q -v1 mi_metallic_paint_ambient_CheckBox`;
            float $mi_metallic_paint_ambient_gammaValue = `floatFieldGrp -q -value1 mi_metallic_paint_ambient_GammaField`;
            if ($mi_metallic_paint_ambient_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ambient") $mi_metallic_paint_ambient_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_metallic_paint_base_color_CheckBox_State = `checkBoxGrp -q -v1 mi_metallic_paint_base_color_CheckBox`;
            float $mi_metallic_paint_base_color_gammaValue = `floatFieldGrp -q -value1 mi_metallic_paint_base_color_GammaField`;
            if ($mi_metallic_paint_base_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".base_color") $mi_metallic_paint_base_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_metallic_paint_edge_color_CheckBox_State = `checkBoxGrp -q -v1 mi_metallic_paint_edge_color_CheckBox`;
            float $mi_metallic_paint_edge_color_gammaValue = `floatFieldGrp -q -value1 mi_metallic_paint_edge_color_GammaField`;
            if ($mi_metallic_paint_edge_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".edge_color") $mi_metallic_paint_edge_color_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $mi_metallic_paint_lit_color_CheckBox_State = `checkBoxGrp -q -v1 mi_metallic_paint_lit_color_CheckBox`;
            float $mi_metallic_paint_lit_color_gammaValue = `floatFieldGrp -q -value1 mi_metallic_paint_lit_color_GammaField`;
            if ($mi_metallic_paint_lit_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".lit_color") $mi_metallic_paint_lit_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_metallic_paint_spec_CheckBox_State = `checkBoxGrp -q -v1 mi_metallic_paint_spec_CheckBox`;
            float $mi_metallic_paint_spec_gammaValue = `floatFieldGrp -q -value1 mi_metallic_paint_spec_GammaField`;
            if ($mi_metallic_paint_spec_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".spec") $mi_metallic_paint_spec_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_metallic_paint_spec_sec_CheckBox_State = `checkBoxGrp -q -v1 mi_metallic_paint_spec_sec_CheckBox`;
            float $mi_metallic_paint_spec_sec_gammaValue = `floatFieldGrp -q -value1 mi_metallic_paint_spec_sec_GammaField`;
            if ($mi_metallic_paint_spec_sec_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".spec_sec") $mi_metallic_paint_spec_sec_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mi_metallic_paint_flake_color_CheckBox_State = `checkBoxGrp -q -v1 mi_metallic_paint_flake_color_CheckBox`;
            float $mi_metallic_paint_flake_color_gammaValue = `floatFieldGrp -q -value1 mi_metallic_paint_flake_color_GammaField`;
            if ($mi_metallic_paint_flake_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".flake_color") $mi_metallic_paint_flake_color_gammaValue`;
            }        
            break;

        case "mia_material_x":
        case "mia_material_x_passes":
        case "mia_material":
            int $mia_material_diffuse_CheckBox_State = `checkBoxGrp -q -v1 mia_material_diffuse_CheckBox`;
            float $mia_material_diffuse_gammaValue = `floatFieldGrp -q -value1 mia_material_diffuse_GammaField`;
            if ($mia_material_diffuse_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".diffuse") $mia_material_diffuse_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mia_material_refl_color_CheckBox_State = `checkBoxGrp -q -v1 mia_material_refl_color_CheckBox`;
            float $mia_material_refl_color_gammaValue = `floatFieldGrp -q -value1 mia_material_refl_color_GammaField`;
            if ($mia_material_refl_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".refl_color") $mia_material_refl_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mia_material_refl_falloff_color_CheckBox_State = `checkBoxGrp -q -v1 mia_material_refl_falloff_color_CheckBox`;
            float $mia_material_refl_falloff_color_gammaValue = `floatFieldGrp -q -value1 mia_material_refl_falloff_color_GammaField`;
            if ($mia_material_refl_falloff_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".refl_falloff_color") $mia_material_refl_falloff_color_gammaValue`;
            }    
            ////////////////////////////////////////////
            int $mia_material_refr_color_CheckBox_State = `checkBoxGrp -q -v1 mia_material_refr_color_CheckBox`;
            float $mia_material_refr_color_gammaValue = `floatFieldGrp -q -value1 mia_material_refr_color_GammaField`;
            if ($mia_material_refr_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".refr_color") $mia_material_refr_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mia_material_refr_falloff_color_CheckBox_State = `checkBoxGrp -q -v1 mia_material_refr_falloff_color_CheckBox`;
            float $mia_material_refr_falloff_color_gammaValue = `floatFieldGrp -q -value1 mia_material_refr_falloff_color_GammaField`;
            if ($mia_material_refr_falloff_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".refr_falloff_color") $mia_material_refr_falloff_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mia_material_refr_trans_color_CheckBox_State = `checkBoxGrp -q -v1 mia_material_refr_trans_color_CheckBox`;
            float $mia_material_refr_trans_color_gammaValue = `floatFieldGrp -q -value1 mia_material_refr_trans_color_GammaField`;
            if ($mia_material_refr_trans_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".refr_trans_color") $mia_material_refr_trans_color_gammaValue`;
            }
            ////////////////////////////////////////////
            int $mia_material_ao_dark_CheckBox_State = `checkBoxGrp -q -v1 mia_material_ao_dark_CheckBox`;
            float $mia_material_ao_dark_gammaValue = `floatFieldGrp -q -value1 mia_material_ao_dark_GammaField`;
            if ($mia_material_ao_dark_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ao_dark") $mia_material_ao_dark_gammaValue`;
            }        
            break;
            ////////////////////////////////////////////
            int $mia_material_ao_ambient_CheckBox_State = `checkBoxGrp -q -v1 mia_material_ao_ambient_CheckBox`;
            float $mia_material_ao_ambient_gammaValue = `floatFieldGrp -q -value1 mia_material_ao_ambient_GammaField`;
            if ($mia_material_ao_ambient_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".ao_ambient") $mia_material_ao_ambient_gammaValue`;
            }        
            break;
            ////////////////////////////////////////////
            int $mia_material_additional_color_CheckBox_State = `checkBoxGrp -q -v1 mia_material_additional_color_CheckBox`;
            float $mia_material_additional_color_gammaValue = `floatFieldGrp -q -value1 mia_material_additional_color_GammaField`;
            if ($mia_material_additional_color_CheckBox_State == 1)
            {
                $send = `createGammaNode ($selName + ".additional_color") $mia_material_additional_color_gammaValue`;
            }        
            break;

        default:
            print ("Selected Type is: " + $selectedType + "\n");
            print ("Something went wrong in applyPressed" + "\n");
    }
    
    select -r $selName;
}

global proc applyClosePressed()
{
    applyPressed;
    deleteUI gammaColorSwatchWindow;
}

global proc int createGammaNode(string $attr, float $gammaValue)
{
    global string $selectedType;
    
    string $outgoing[] = {};
    string $incoming[] = {};
    string $outgoingObjectType = "";
    int $gammaAlreadyHere = 0;
    int $outgoingExists = 0;
    
    $outgoing = `listConnections -source true -destination false -plugs true  $attr`;
        if ($outgoing[0] != "")
        {
            $outgoingObjectType = `objectType $outgoing[0]`;
            $outgoingExists = 1;
            $incoming = `listConnections -source false -destination true -plugs true -type $selectedType $outgoing[0]`;
        }
    
    if ($outgoingObjectType == "gammaCorrect")
        {
            $gammaAlreadyHere = 1;
        }
    
    if ($gammaAlreadyHere == 1)
    {
        warning ("Gamma node is already connected to: " + $attr + "\n");
    }
        else
            {
                string $gammaNodeName = `shadingNode -asUtility gammaCorrect`;
    
                vector $colorVector = `getAttr $attr`; //  Store RGB values of attribute for later transfer to gamma node
        
                float $gammaColorX = $colorVector.x;
                float $gammaColorY = $colorVector.y;
                float $gammaColorZ = $colorVector.z;
    
                setAttr ($gammaNodeName + ".gammaX") $gammaValue;
                setAttr ($gammaNodeName + ".gammaY") $gammaValue;
                setAttr ($gammaNodeName + ".gammaZ") $gammaValue;
                setAttr ($gammaNodeName + ".value") -type double3 $gammaColorX $gammaColorY $gammaColorZ;

                connectAttr -force ($gammaNodeName + ".outValue") $attr;
                
                if ($outgoingExists == 1)
                {
                    connectAttr -force $outgoing[0] ($gammaNodeName + ".value");
                }
            }

    return 1;
}

global proc cancelPressed()
{
    deleteUI gammaColorSwatchWindow;
}

gammaColorSwatch();