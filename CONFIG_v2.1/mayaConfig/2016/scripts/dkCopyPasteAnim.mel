////////////////////////////////////////////////////////////////////////////////////////////////
//
// file : dkCopyPasteAnim.mel
//
// author : Dan Kripac
//
// date modified : 16/10/2002 03:01PM
//
// description :
//	a replacement for Mayas naf key copy paste.
// Will copy all seleted keys in the graph editor and paste them relative to the current time.
// i.e. the first selected key on the left of all selected keys will be the first key pasted 
// at the current time.
//
// if you only have one object selected when you copy then you will be able to paste onto another object
// as long as it has the same attributes on it ( it doesn't matter if it doesn't though ).
// You can even copy in one scene and then open up a new scene and paste onto one or more objects
// in that new scene!
//
// use :
// for copy
// source "dkCopyPasteAnim.mel";   copyAnim;
//
// for paste
// source "dkCopyPasteAnim.mel";   pasteAnim;
//
// hook 'em up to CTRL + c and CTRL + v to copy and paste key frames the way nature intended.
// To do this make new hotkey items in the hotkey editor and paste the above mel lines in for
// each command respectively.
//
// to do :
// - add support for the key selection on the time line and the dope sheet.
// - add support for the system copy/paste buffer on each platform. Then you
//	will be able to copy and paste between all open Maya application instances.
//
////////////////////////////////////////////////////////////////////////////////////////////////

global string $dkCopyPasteBuffer[];

// quick fix flag for copy and paste to a different object than the one copied
//
global int $dkCPAOneObjectSelected;

global string $dkCopyOptions[];
global string $dkPasteOptions[];

proc float 	ff ( float $val[] ) 	{ return $val[0]; }
proc string 	fs ( string $val[] ) 	{ return $val[0]; }
proc int 	fi ( int $val[] ) 	{ return $val[0]; }

proc float dkgetRange (int $isStart, string $range)
{
	string $b[];
	tokenize $range ":" $b;
	if ($isStart) { return float($b[0]); }
	else { return float($b[1]); }
}

global proc copyAnim ()
{
	waitCursor -st on;
	global string $dkCopyPasteBuffer[];
	// clear the old buffer
	if ( size($dkCopyPasteBuffer) != 0 ) { clear $dkCopyPasteBuffer; }
	
	global string $dkCopyOptions[]; // in here for later functionality
	global int $dkCPAOneObjectSelected;
	
	$dkCPAOneObjectSelected 	= true; // innocent until proven guilty
	
	// get anim node selection
	//
	string $animNodes[] = `keyframe -q -sl -n`;
	if (size($animNodes) != 0 ) {
		float $rs = `playbackOptions  -q -min`;
		float $re = `playbackOptions  -q -max`;
		string $range = $rs+":"+$re;
		
		if (size($dkCopyOptions) > 0) { $range = $dkCopyOptions[0]; }
		$rs = dkgetRange (1, $range);
		$re = dkgetRange (0, $range);
		
		string $prevObj = "";
		
		string $n;
		for ($n in $animNodes) {
			string $plug[] = `listConnections -source off -plugs on ($n+".o")`;
			string $buffer[];
			float $ct = `currentTime -q`;
			tokenize $plug[0] "." $buffer;
			string $obj = $buffer[0];
			string $attr = $buffer[1];
			string $s = "";
			$s += $n+","+$obj+","+$attr+","+$ct+",";
			int $ind[] = `keyframe -q -iv -sl $n`;
			int $k;
			for ($k in $ind) {
				float $time 		= ff(`keyframe -in $k -q $n`);
				float $value 		= ff(`keyframe -in $k -q -eval $n`);
				string $inTangent 	= fs(`keyTangent -in $k -q -itt $n`);
				string $outTangent 	= fs(`keyTangent -in $k -q -ott $n`);
				int $tangentLocked 	= fi(`keyTangent -in $k -q -l $n`);
				int $weightLocked 	= fi(`keyTangent -in $k -q -wl $n`);
				int $breakdown 		= (int(ff(`keyframe -in $k -q -bd $n`)) > 0) ? 1 : 0;
				float $inTanAngle	= ff(`keyTangent -in $k -q -ia $n`);
				float $inWeight		= ff(`keyTangent -in $k -q -iw $n`);
				float $outTanAngle	= ff(`keyTangent -in $k -q -oa $n`);
				float $outWeight	= ff(`keyTangent -in $k -q -ow $n`);
				
				// "|" delimited key values in the same order as a maya .anim file
				//
				$s += ("|"+$time+" "+$value+" "+$inTangent+" "+$outTangent);
				$s += (" "+$tangentLocked+" "+$weightLocked+" "+$breakdown);
				if ($inTangent == "fixed") 
				{
					$s += (" "+$inTanAngle+" "+$inWeight);
				}
				if ($outTangent == "fixed") 
				{
					$s += (" "+$outTanAngle+" "+$outWeight);
				}
			}
			if ( $prevObj != "" ) {
				if ( $prevObj != $obj ) {
					$dkCPAOneObjectSelected = false;
				}
			}
			$prevObj = $obj;
			$dkCopyPasteBuffer[size($dkCopyPasteBuffer)] = $s;
			
		}
		print "selected keys copied to buffer\n";
	} else {
		warning "no keys selected";
	}
	//print $dkCopyPasteBuffer;
	waitCursor -st off;
}

global proc pasteAnim ()
{
	waitCursor -st on;
	global string $dkCopyPasteBuffer[];
	global int $dkCPAOneObjectSelected;
	
	if ( size($dkCopyPasteBuffer) != 0 ) {
		string $n;
		float $ctime = `currentTime -q`;
		float $firstKey = 100000000; // hopefully no-one will animate at this time...
		// first cycle through and find the lowest time in all selected keys
		//
		for ($n in $dkCopyPasteBuffer) {
			string $animNodeInfo[];
			tokenize $n "," $animNodeInfo;
			
			string $keyArray[];
			tokenize $animNodeInfo[4] "|" $keyArray;
			
			int $k;
			for ($k=0; $k<size($keyArray); $k++) {
				string $buffer[];
				tokenize $keyArray[$k] " ;" $buffer;
				float $time 		= float($buffer[0]);
				$firstKey = `min $firstKey $time`;
			}
		}
		// now we have our offset, parse the key array and apply
		//
		for ($n in $dkCopyPasteBuffer) {
			global string $dkPasteOptions[];  // in here for later functionality
			
			string $animNodeInfo[];
			tokenize $n "," $animNodeInfo;
			string $animNode 	= $animNodeInfo[0];
			string $obj		= $animNodeInfo[1];
			string $attr 		= $animNodeInfo[2];
			float $sTime	= float($animNodeInfo[3]);
			
			// check if only one obect was selected at the time of the copy
			//
			if ( $dkCPAOneObjectSelected == 1 ) {
				string $sel[] = `ls -sl`;
				if ( size($sel) == 1 ) {
					$obj = $sel[0];
				}
			}
			
			// grab the key array in the same format as a .anim file
			//
			string $keyArray[];
			tokenize $animNodeInfo[4] "|" $keyArray;
			
			
			int $weighted = fi(`keyTangent -at $attr -q -wt $obj`);
			
			int $k;
			for ($k=0; $k<size($keyArray); $k++) {
				string $buffer[];
				tokenize $keyArray[$k] " ;" $buffer;
				float $time 		= float($buffer[0]);
				float $value 		= float($buffer[1]);
				string $inTangent 	= $buffer[2];
				string $outTangent 	= $buffer[3];
				int $tangentLocked 	= int($buffer[4]);
				int $weightLocked 	= int($buffer[5]);
				int $breakdown 		= int($buffer[6]);
				float $inTanAngle	= 0;
				float $inWeight		= 1;
				float $outTanAngle	= 0;
				float $outWeight	= 1;
				
				// sometimes keyframe -kc reported an incorrect number of keys and when exported were bogus
				// this if tries to account for the buffer under run when importing
				//
				if (size($buffer) > 6) {
					if ($inTangent == "fixed") {
						$inTanAngle 	= float($buffer[7]);
						$inWeight	= float($buffer[8]);
					}
					if ($outTangent == "fixed") {
						if ($inTangent == "fixed") {
							$outTanAngle 	= float($buffer[9]);
							$outWeight	= float($buffer[10]);
						} else {
							$outTanAngle 	= float($buffer[7]);
							$outWeight	= float($buffer[8]);
						}
					}
	
					setKeyframe -at $attr -t ($time - $firstKey + $ctime) -v $value -bd $breakdown -hi "none" $obj;
					// force unlock the tangent until we set out keys properly
					// if we don't do this the last tangent set will affect the first
					//
					keyTangent -a -at $attr -t ($time - $firstKey + $ctime) -l off -hi "none" $obj;

					if ($weighted) { // force weight locking off until we set the key tangents properly
						keyTangent -a -at $attr -t ($time - $firstKey + $ctime) -wl off -hi "none" $obj;
					}
					if ($inTangent == "fixed") {
						keyTangent -at $attr -t ($time - $firstKey + $ctime) -itt $inTangent -ia $inTanAngle -iw $inWeight $obj;
					} else {
						keyTangent -at $attr -t ($time - $firstKey + $ctime) -itt $inTangent $obj;
					}
					if ($outTangent == "fixed") {
						keyTangent -at $attr -t ($time - $firstKey + $ctime) -ott $outTangent -oa $outTanAngle -ow $outWeight $obj;
					} else {
						keyTangent -at $attr -t ($time - $firstKey + $ctime) -ott $outTangent $obj;
					}
					if ($weighted) {
						keyTangent -a -at $attr -t ($time - $firstKey + $ctime) -wl $weightLocked -hi "none" $obj;
					}
					// now we can lock our tangents
					//
					keyTangent -a -at $attr -t ($time - $firstKey + $ctime) -l $tangentLocked -hi "none" $obj;
	
				} else {
					warning ("dodgy key found in "+$obj+"."+$attr+"  index="+$k+" .... skipping....");
				}
			}
		}
	} else {
		warning "no animation in copy buffer";
	}
	waitCursor -st off;
}