//
// Written by Andrew Chapman (chapman@technolumiere.com) - July 2003
//
// Creates a new Multitude Manager editor that helps you when dealing with large numbers
// of objects within Maya
//

global proc vector makeVector(float $v1, float $v2, float $v3)
// this is just a helper for use when assigning to a triple, so you can
// do something like:
//   translate = makeVector(rand(-100,100), 0, rand(-50,50))
// ...instead of having to do each of translateX/Y/Z separately
{
  return <<$v1,$v2,$v3>>;
}

proc string[] multitudeManagerGetNodeList()
{
  string $affectsMode = `radioCollection -q -select multitudeManagerAffects`;

  string $list[];

  if ($affectsMode == "affectAll") {
    $list = `ls -long`;
  } else if ($affectsMode == "affectType") {
    string $type = `textField -q -text multitudeManagerWindow|tsl|tcl|typeRL|affectTypeField`;
    $list = `ls -long -type $type`;
  } else if ($affectsMode == "affectSelType") {
    string $type = `textField -q -text multitudeManagerWindow|tsl|tcl|typeSelRL|affectTypeField`;
    $list = `listRelatives -allDescendents -fullPath -type $type`;
  } else if ($affectsMode == "affectAllHier") {
    $list = `listRelatives -allDescendents -fullPath`;
  } else {
    $list = `ls -long -selection`;
  }
  
  if (size($list) == 0) {
    warning("No nodes being affected by Multitude Manager (check all/type/selection mode)");
  }
  
  return $list;
}

global proc multitudeManagerSelectPercent()
{
  int $perc = `intSliderGrp -q -value multitudeManagerWindow|tsl|tcl|tabs|percentFL|cl|perc`;
  
  string $nodes[] = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }
  
  select -clear;
  
  // make sure 0 and 100 do exactly that
  if ($perc == 0) {
    // do nothing - selection has just been cleared
  } else if ($perc == 100) {
    select $nodes;
  } else {
    // go through objects list, if our random number for a given one 
    // is less than the percentage we want then select it
    string $node;
    for($node in $nodes) {
      rand(0,1); rand(0,1); // mix it up a bit
      float $rand = rand(0,100);
      if ($rand < $perc) {
        select -add $node;
      }
    }
  }

  optionVar -iv "multitudeManagerPercent" $perc;
  optionVar -sv "multitudeManagerAffects" `radioCollection -q -select multitudeManagerAffects`;
  optionVar -sv "multitudeManagerAffectsType"    `textField -q -text multitudeManagerWindow|tsl|tcl|typeRL|affectTypeField`;
  optionVar -sv "multitudeManagerAffectsTypeSel" `textField -q -text multitudeManagerWindow|tsl|tcl|typeSelRL|affectTypeField`;

  print("Selected " + size(`ls -selection`) + " nodes (from " + size($nodes) + ")\n");
  radioCollection -e -select "affectSelection" multitudeManagerAffects;
}

proc int multitudeManagerRuleResult(int $ruleIndex, string $node)
{
  string $attrName = `textField -q -text    ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrName")`;
  int $equalMode   = `optionMenu -q -select ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|equalityMenu")`;

  int $indexerSize = size(match("\[[0-9]+\]$",$attrName)); // Spot array attributes and remove the indexer
  string $attrCmpName = substring ($attrName, 1, size($attrName) - $indexerSize);
  int $attrExists  = attributeExists($attrCmpName, $node);

  // we need to test the exists/not-exists ones first before querying the value of the attr
  if ($equalMode == 7) {
    if ($attrExists) {
      return true;
    } else {
      return false;
    }
  }
  if ($equalMode == 8) {
    if (!$attrExists) {
      return true;
    } else {
      return false;
    }
  }

  if (!$attrExists) {
    return false;
  }
      
  string $testVal  = `textField -q -text ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrVal")`;
  string $attrVal = `getAttr ($node + "." + $attrName)`;
  //print("Testing " + $attrVal + " (" + $node + "." + $attrName + ") against " + $testVal + "\n");
  if (
    (($equalMode == 1)  && ($attrVal == $testVal))                   ||
    (($equalMode == 2)  && ($attrVal != $testVal))                   ||
    (($equalMode == 3)  && (match($testVal,$attrVal) != ""))         ||
    (($equalMode == 4)  && (match($testVal,$attrVal) == ""))         ||
    (($equalMode == 5)  && ((float)$attrVal > (float)$testVal))      ||
    (($equalMode == 6)  && ((float)$attrVal < (float)$testVal))      ||
    (($equalMode == 9)  && gmatch($attrVal,$testVal))                ||
    (($equalMode == 10) && !gmatch($attrVal,$testVal))
    )
  {
    return true;
  }
  return false;
}

proc int[] getmultitudeManagerRuleIndices()
{
  int $indices[];
  
  string $kids[] = `columnLayout -q -childArray multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl`;
  string $kid;
  for($kid in $kids) {
    if ((`rowLayout -q -ex $kid`) && (match("ruleRow", $kid) != "")) {
      int $index = `substitute ".*ruleRow" $kid ""`;
      if ($index > 0) {
        $indices[size($indices)] = $index;
      }
    }
  }
  
  return $indices;
}

global proc multitudeManagerSelect(int $additiveMode)
{
  int $numFound = 0;
  
  int $ruleIndices[] = getmultitudeManagerRuleIndices();
  
  string $nodes[] = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }

  if (!$additiveMode) {
    select -clear;
  }

  string $node;
  for($node in $nodes) {
    // loop through the rule checks, AND/OR'ing them together for final result
    int $totalResult = multitudeManagerRuleResult(1, $node);
    int $i;
    for($i=1; $i<size($ruleIndices); $i++) {
      int $thisResult = multitudeManagerRuleResult($ruleIndices[$i], $node);
      int $logicMode = (int) `optionMenu -q -select ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndices[$i] + "|logicMenu")`;
      if ($logicMode == 1) {
        $totalResult = $totalResult && $thisResult;
      } else {
        $totalResult = $totalResult || $thisResult;
      }
    }
    
    // if all the rule checks pass then select the node
    if ($totalResult != 0) {
      select -add $node;
      $numFound++;
    }
  }

  optionVar -sv "multitudeManagerFindAttrName"   `textField  -q -text   multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow1|attrName`;
  optionVar -iv "multitudeManagerFindAttrMode"   `optionMenu -q -select multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow1|equalityMenu`;
  optionVar -sv "multitudeManagerFindAttrVal"    `textField  -q -text   multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow1|attrVal`;
  optionVar -sv "multitudeManagerAffects"        `radioCollection -q -select multitudeManagerAffects`;
  optionVar -sv "multitudeManagerAffectsType"    `textField  -q -text   multitudeManagerWindow|tsl|tcl|typeRL|affectTypeField`;
  optionVar -sv "multitudeManagerAffectsTypeSel" `textField  -q -text   multitudeManagerWindow|tsl|tcl|typeSelRL|affectTypeField`;

  print("Selected " + $numFound + " nodes (from " + size($nodes) + ")\n");
  radioCollection -e -select "affectSelection" multitudeManagerAffects;
}

global proc multitudeManagerRemoveSelectRule(int $index)
{
  deleteUI ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $index);
}

global proc multitudeManagerAddSelectRule()
{
  setParent multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl;

  int $newIndex=1;
  while(`rowLayout -q -ex ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $newIndex)`) {
    $newIndex++;
  }
  
  rowLayout -numberOfColumns 5 -cw5 70 140 120 140 80 ("ruleRow" + $newIndex);
    if ($newIndex == 1) {
      text -label "";
    } else {
      optionMenu -label "" -width 70 logicMenu;
        menuItem -label "and";
        menuItem -label "or";
      setParent -menu ..;
    }
    textField -text "variantType" -width 130 attrName;
    optionMenu -label "" -width 120 -cc "multitudeManagerHandleSens" equalityMenu;
      menuItem -label "equals";
      menuItem -label "not equals";
      menuItem -label "includes";
      menuItem -label "not includes";
      menuItem -label "greater than";
      menuItem -label "less than";
      menuItem -label "exists";
      menuItem -label "not exists";
      menuItem -label "wildcard";
      menuItem -label "not wildcard";
    setParent -menu ..;
    textField -text "SP_AR" -width 140 attrVal;
    if ($newIndex == 1) {
      text -label "";
    } else {
      button -label "Remove Rule" -c ("multitudeManagerRemoveSelectRule(" + $newIndex + ")");
    }
  setParent ..;
  
  deleteUI multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|rlButtons;
  rowLayout -numberOfColumns 3 -cw3 60 102 200 rlButtons;
    button -label "Add Rule" -c multitudeManagerAddSelectRule;
    button -label "Select Matching"           -c "multitudeManagerSelect(0)";
    button -label "Add Matching to Selection" -c "multitudeManagerSelect(1)";
  setParent ..;
  
  text -width 548 -label ""; // hack - spacing out width of panel
  
  multitudeManagerHandleSens();
}

global proc multitudeManagerSetAttr()
{
  string $attrName = `textField -q -text multitudeManagerWindow|tsl|tcl|tabs|setAttrFL|cl|rl|attrName`;
  string $attrVal  = `textField -q -text multitudeManagerWindow|tsl|tcl|tabs|setAttrFL|cl|rl|attrVal`;
  int    $useExpr  = `checkBox -q -value multitudeManagerWindow|tsl|tcl|tabs|setAttrFL|cl|evalExpr`;

  optionVar -sv "multitudeManagerSetAttrName" $attrName;
  optionVar -sv "multitudeManagerSetAttrVal"  $attrVal;
  optionVar -iv "multitudeManagerSetAttrExpr" $useExpr;
  optionVar -sv "multitudeManagerAffects"        `radioCollection -q -select multitudeManagerAffects`;
  optionVar -sv "multitudeManagerAffectsType"    `textField -q -text multitudeManagerWindow|tsl|tcl|typeRL|affectTypeField`;
  optionVar -sv "multitudeManagerAffectsTypeSel" `textField -q -text multitudeManagerWindow|tsl|tcl|typeSelRL|affectTypeField`;

  string $nodes[] = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }

  string $node;
  for($node in $nodes) {
    int $indexerSize = size(match("\[[0-9]+\]$",$attrName)); // Spot array attributes and remove the indexer
    string $attrCmpName = substring ($attrName, 1, size($attrName) - $indexerSize);
    if (!attributeExists($attrCmpName, $node)) {
      warning("Can't set attribute " + $attrName + " on node " + $node + " - attribute not found");
      continue;
    }
    string $attrVal2 = $attrVal;
    if ($useExpr == 1) {
      catch($attrVal2 = eval($attrVal2));
    }
    // this is a pain - we need to make different calls to setAttr depending
    // on what the attribute type is that we're setting
    string $attrType = `getAttr -type ($node + "." + $attrName)`;
    if ($attrType == "string") {
      setAttr -type "string" ($node + "." + $attrName) ($attrVal2);
    } else if (($attrType == "short") || ($attrType == "long") || ($attrType == "enum") || ($attrType == "bool") || ($attrType == "byte")) {
      setAttr ($node + "." + $attrName) ((int) ($attrVal2));
    } else if (($attrType == "float") || ($attrType == "double") || ($attrType == "doubleAngle") || ($attrType == "doubleLinear") || ($attrType == "time")) {
      setAttr ($node + "." + $attrName) ((float) ($attrVal2));
    } else if (($attrType == "long2") || ($attrType == "float2") || ($attrType == "double2")) {
      eval("setAttr -type float2 (\"" + $node + "." + $attrName + "\") " + $attrVal2);
    } else if (($attrType == "long3") || ($attrType == "float3") || ($attrType == "double3")) {
      eval("setAttr -type float3 (\"" + $node + "." + $attrName + "\") " + $attrVal2);
    } else if (($attrType == "matrix")) {
      eval("setAttr -type matrix (\"" + $node + "." + $attrName + "\") " + $attrVal2);
    } else {
      warning("Setting attribute of unknown type (" + $attrType + "). Can only currently set bool/enum/short/float/string");
      return;
    }
  }

  print("Finished setting attributes\n");
}

global proc multitudeManagerRunExpression()
{
  string $expr = `scrollField -q -text multitudeManagerWindow|tsl|tcl|tabs|exprFL|cl|expressionField`;
  $expr = `substitute "\n" $expr " "`;

  string $nodes[] = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }

  string $node;
  for($node in $nodes) {
    string $parents[] = `listRelatives -fullPath -parent $node`;
    string $shapes[]  = `listRelatives -fullPath -shapes $node`;

    // if we're looking at a shape node, then $shape will be an empty string
    // to void confusion copy $node to $shape
    if ((size($shapes) == 0) || ($shapes[0] == "")) {
      $shapes[0] = $node;
    }

    // build up definitions for the available variables
    string $preExpr;
    $preExpr += ("string $node   = \"" + $node       + "\"; ");
    $preExpr += ("string $parent = \"" + $parents[0] + "\"; ");
    $preExpr += ("string $shape  = \"" + $shapes[0]  + "\"; ");

    // build up the final thing to run
    // we wrap it in curly-brackets so that any variable definitions are locally scoped
    string $cmd = ("{" + $preExpr + $expr + ";}");

    catch(eval($cmd));
  }

  optionVar -sv "multitudeManagerExpr" $expr;
  optionVar -sv "multitudeManagerAffects" `radioCollection -q -select multitudeManagerAffects`;
  optionVar -sv "multitudeManagerAffectsType"    `textField -q -text multitudeManagerWindow|tsl|tcl|typeRL|affectTypeField`;
  optionVar -sv "multitudeManagerAffectsTypeSel" `textField -q -text multitudeManagerWindow|tsl|tcl|typeSelRL|affectTypeField`;

  print("Finished running expressions\n");
}

global proc multitudeManagerHandleSens()
{
  // disable node type field unless that is the current mode of affectation
  int $useType1 = `radioButton -q -select "multitudeManagerWindow|tsl|tcl|typeRL|affectType"`;
  textField -e -enable $useType1 "multitudeManagerWindow|tsl|tcl|typeRL|affectTypeField";

  int $useType2 = `radioButton -q -select "multitudeManagerWindow|tsl|tcl|typeSelRL|affectSelType"`;
  textField -e -enable $useType2 "multitudeManagerWindow|tsl|tcl|typeSelRL|affectTypeField";

  // disable the attribute value field in select rules, if they are set to exists/not-exists
  int $ruleIndices[] = getmultitudeManagerRuleIndices();
  int $ruleIndex;
  for($ruleIndex in $ruleIndices) {
    int $mode = `optionMenu -q -select ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|equalityMenu")`;
    if (($mode == 7) || ($mode == 8)) {
      textField -e -enable 0 ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrVal");
    } else {
      textField -e -enable 1 ("multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrVal");
    }
  }
}

proc multitudeManagerLoadSettings()
{
  // selection mode
  if (`optionVar -exists "multitudeManagerAffects"`) {
    radioCollection -e -select `optionVar -q "multitudeManagerAffects"` multitudeManagerAffects;
  }
  if (`optionVar -exists "multitudeManagerAffectsType"`) {
    textField -e -text `optionVar -q "multitudeManagerAffectsType"` multitudeManagerWindow|tsl|tcl|typeRL|affectTypeField;
  }
  if (`optionVar -exists "multitudeManagerAffectsTypeSel"`) {
    textField -e -text `optionVar -q "multitudeManagerAffectsTypeSel"` multitudeManagerWindow|tsl|tcl|typeSelRL|affectTypeField;
  }

  // select percentage
  if (`optionVar -exists "multitudeManagerPercent"`) {
    intSliderGrp -e -value `optionVar -q "multitudeManagerPercent"` multitudeManagerWindow|tsl|tcl|tabs|percentFL|cl|perc;
  }

  // select by attr
  if (`optionVar -exists "multitudeManagerFindAttrName"`) {
    textField -e -text `optionVar -q "multitudeManagerFindAttrName"` multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow1|attrName;
  }
  if (`optionVar -exists "multitudeManagerFindAttrMode"`) {
    optionMenu -e -select `optionVar -q "multitudeManagerFindAttrMode"` multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow1|equalityMenu;
  }
  if (`optionVar -exists "multitudeManagerFindAttrVal"`) {
    textField -e -text `optionVar -q "multitudeManagerFindAttrVal"` multitudeManagerWindow|tsl|tcl|tabs|selectFL|cl|ruleRow1|attrVal;
  }

  // set attr
  if (`optionVar -exists "multitudeManagerSetAttrName"`) {
    textField -e -text `optionVar -q "multitudeManagerSetAttrName"` multitudeManagerWindow|tsl|tcl|tabs|setAttrFL|cl|rl|attrName;
  }
  if (`optionVar -exists "multitudeManagerSetAttrVal"`) {
    textField -e -text `optionVar -q "multitudeManagerSetAttrVal"`  multitudeManagerWindow|tsl|tcl|tabs|setAttrFL|cl|rl|attrVal;
  }
  if (`optionVar -exists "multitudeManagerSetAttrExpr"`) {
    checkBox -e -value `optionVar -q "multitudeManagerSetAttrExpr"` multitudeManagerWindow|tsl|tcl|tabs|setAttrFL|cl|evalExpr;
  }

  // run expr
  if (`optionVar -exists "multitudeManagerExpr"`) {
    scrollField -e -text `optionVar -q "multitudeManagerExpr"`      multitudeManagerWindow|tsl|tcl|tabs|exprFL|cl|expressionField;
  }
}

global proc multitudeManager()
{
  if (`window -q -exists multitudeManagerWindow`) {
    deleteUI -window multitudeManagerWindow;
  }

  window -title "Multitude Manager" -topLeftCorner 192 519 -widthHeight 591 346 multitudeManagerWindow;
  scrollLayout tsl;
  columnLayout -columnOffset "left" 4 tcl;
  
  text -label "Affects Nodes:";
  radioCollection multitudeManagerAffects;
  radioButton -label "All" -data 1 affectAll;
  rowLayout -nc 2 typeRL;
    radioButton -label "All of type" -select -data 2 -cc multitudeManagerHandleSens affectType;
    textField -width 100 -text "agent" affectTypeField;
  setParent ..;
  rowLayout -nc 3 typeSelRL;
    radioButton -label "All of type" -select -data 2 -cc multitudeManagerHandleSens affectSelType;
    textField -width 100 -text "agent" affectTypeField;
    text -label " under selected hierarchy";
  setParent ..;
  radioButton -label "All under selected hierarchy" -data 4 affectAllHier;
  radioButton -label "Selection only" -data 3 affectSelection;

  tabLayout tabs;

    frameLayout -label "Select Random Percentage of Nodes" percentFL;
      columnLayout cl;
        intSliderGrp -label "Select %: " -field true -min 0 -max 100 -value 30 perc;
        button -label "Select" -c "multitudeManagerSelectPercent";
        text -width 548 -label ""; // hack - spacing out width of panel
      setParent ..;
    setParent ..;

    frameLayout -label "Select Nodes by Attributes" selectFL;
      columnLayout cl;
        rowLayout -numberOfColumns 2 -cw2 60 150 rlButtons;
          button -label "Add Rule" -c multitudeManagerAddSelectRule;
          button -label "Select Matching Nodes" -c multitudeManagerSelect;
        setParent ..;
        multitudeManagerAddSelectRule();
      setParent ..;  
    setParent ..;

    frameLayout -label "Set Attribute" -borderStyle "etchedIn" setAttrFL;
      columnLayout cl;
        rowLayout -nc 3 -cw3 170 20 254 rl;
          textField -text "rmanShader" -width 170 attrName;
          text -label " = ";
          textField -text "\"matte\" \"Kd\" [0.4]" -width 300 attrVal;
        setParent ..;
        checkBox -label "Evaluate value as MEL expression" evalExpr;
        button -label "Set Attribute" -c "multitudeManagerSetAttr";
        text -width 548 -label ""; // hack - spacing out width of panel
      setParent ..;
    setParent ..;

    frameLayout -label "Run Expression on Nodes" exprFL;
      columnLayout cl;
        text -label "Variables Available: $node $parent $shape";
        string $defaultExpr = "print(\"Node is called: \" + $node + \"\\n\");\n\nint $clip = getAttr($node + \".currentClip\");\nprint(\"Current clip is: \" + $clip + \"\\n\");";
        scrollField -wordWrap false -text $defaultExpr -width 548 -height 140 expressionField;
        button -label "Run Expression" -c "multitudeManagerRunExpression";
      setParent ..;
    setParent ..;

  setParent ..;

  tabLayout -e -tabLabel percentFL "Select %" -tabLabel selectFL "Select by Attribute" -tabLabel setAttrFL "Set Attribute" -tabLabel exprFL "Run Expression" -width 500 tabs;

  // restore any saved settings
  multitudeManagerLoadSettings();

  // disable irrelevant controls and show window
  multitudeManagerHandleSens();
  showWindow multitudeManagerWindow;

  // hack to have it refresh itself to proper width
  tabLayout -e -selectTabIndex 2 tabs;
  tabLayout -e -selectTabIndex 1 tabs;
}
