global proc blanim () {
	string $parents[] = `ls -sl -type "joint"`;
	

	string $targets[];
	clear($targets);
	string $targets[];
	string $cmd;
	string $channels[] = {"rx", "ry", "rz"};
	int $source_index = (size($parents) - 1);
	string $source = $parents[$source_index];

	for ($i = 0; $i < $source_index; $i++) {
		 $targets[$i] = $parents[$i];
	}
	print ("Source = " + $source + "\n");
	print ("Targets = \n");
	print $targets;
	int $num_targets = size($targets);
	select -hi $source;
	string $source_children[] = `ls -sl -type "joint"`;
	string $target_children[];
	
	int $num_source_children = size($source_children);
	string $expressions[];
	clear($expressions);
	string $expressions[];
	int $match = 0;
	for ($item in  $parents) {
		select -hi $item;
		string $children[] = `ls -sl -type "joint"`;
		if ( size($children) !=  $num_source_children) {
			$match = 1;
		}
	}
	// doit
	if ($match) {
		print "hierarchy does not match";
	} else {
		print "hierarchy does match";
		for ($target in $targets) {
			addAttr -at double -ln ($target + "Ctrl") -min 0 -max 1 -dv 0.0 $source ;
		}
	
		
		for ($i = 0; $i < $num_source_children; $i ++) {
			for ($channel in $channels) {
				$expressions[$i] = ($expressions[$i] + $channel + " = "); 
				for ($j = 0; $j < $num_targets; $j++) {
					print $j;
					select -hi  $targets[$j];
					$target_children = `ls -sl -type "joint" `;
					$expressions[$i] = ($expressions[$i] + "(" + $target_children[$i] + "." + $channel + " * " + $source + "." + $targets[$j] + "Ctrl) " );
					if ($j == ($num_targets - 1)) {
						$expressions[$i] = ($expressions[$i] + ";\n");
						// print " COMMA\n";
					} else {
						$expressions[$i] = ($expressions[$i] + " + \n");
						// print " PLUS\n";
					}
				}
			}
			expression -o $source_children[$i] -s $expressions[$i];
		}
	}
}

