// Name:	troyMakeOffsetSkeleton.mel
// Date:	1 April 2003
// Author:	Matt Gidney
// The Gist:	This script assumes the user has selected say the root node of a skeleton
//		it then duplicates the skeleton and makes locators that allow offsets to be added
//		to the driving selected skeleton aswell as scaling of joints via transforms- say mocap

proc makeControlBox(string $name){
	float $size = 0.4;
	curve -d 1 -p $size $size $size -p ($size * -1.0) $size $size 
	-p ($size * -1.0) $size ($size * -1.0) -p $size $size 
	($size * -1.0) 
	-p $size $size $size -p $size ($size * -1.0) $size 
	-p ($size * -1.0) ($size * -1.0) $size -p ($size * -1.0) 
		($size * -1.0) ($size * -1.0) 
	-p $size ($size * -1.0) ($size * -1.0) -p $size ($size * -1.0) 
		$size -p ($size * -1.0) ($size * -1.0) $size 
	-p ($size * -1.0) $size $size -p ($size * -1.0) $size ($size * -1.0) 
	-p ($size * -1.0) ($size * -1.0) ($size * -1.0) 
	-p $size ($size * -1.0) ($size * -1.0) -p $size $size 
	($size * -1.0) -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 
	-k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -name $name;
}
proc string[] getTokens(string $inString, string $tokenSymbol){
	string $tokens[];
        tokenize $inString $tokenSymbol $tokens;	
	return $tokens;
}
proc string getBoneName(string $longName) {
	string $shortNames[] = getTokens($longName,"|");
        string $shortName = $shortNames[size($shortNames) -1];
	return $shortName;
	}
proc string getSingleObjectCreated() {
	string $selected[] = `ls -sl`;
	return $selected[size($selected)-1];
	}
proc makeTrackers(string $longBoneName, 
		string $rootName, string $controller) {	
	string $shortBoneName=getBoneName($longBoneName);
	string $tracker = ($shortBoneName + "LTracker");
	string $offset = ($shortBoneName + "LOffset");
	spaceLocator -p 0 0 0 -name $tracker;
	spaceLocator -p 0 0 0 -name $offset;
	parent -a $offset $controller;
	parent -a $controller $tracker;
	pointConstraint -offset 0 0 0 -weight 1 $longBoneName $tracker ;
	orientConstraint -weight 1 $longBoneName $tracker;
	
	// constraint driver <== driven

	if (!`objExists ("controls")`) group -em -name "controls";
	parent $tracker ("controls");
}
proc renameChildBones(string $rootBone, string $prefix) {
	string $bones[] = `listRelatives -fullPath -children -allDescendents 
		-type joint $rootBone`;
	string $bone;
	for( $bone in $bones ){
		string $boneShortName = getBoneName($bone);
		rename $bone ($prefix+$boneShortName);
	}
}
proc makeScalers(string $bone, string $rootBone, string $controlBox) {
		
		string $boneSN = getBoneName($bone);
		string $childBones[] = `listRelatives -children -fullPath -type joint $bone`;
		string $lowerBone = $childBones[0];
		string $lowerBoneSN = getBoneName($lowerBone);
		float $bonePosition[] = `xform -q  -ws -t ($bone)`;
		spaceLocator -p 0 0 0 -name ($boneSN + "Upper#");
		string $UpperName = `getSingleObjectCreated`;
		
		xform -t $bonePosition[0] $bonePosition[1] $bonePosition[2] ($UpperName);
		orientConstraint -weight 1 $bone ($UpperName);					
		$bonePosition = `xform -q  -ws -t ($lowerBone)`;
		spaceLocator -p 0 0 0 -name ($lowerBoneSN + "Lower#");
		string $LowerName = `getSingleObjectCreated`;
		
		xform -t $bonePosition[0] $bonePosition[1] $bonePosition[2] ($LowerName);
		orientConstraint -weight 1 $lowerBone ($LowerName);
		connectAttr -f  ($controlBox + ".scale") ($UpperName+".scale");
		parent ($LowerName) ($UpperName);
		pointConstraint -offset 0 0 0 -weight 1 ($LowerName) ($lowerBone);
		parent ($UpperName) ($bone);
		setAttr ($LowerName + ".visibility") 0;
		setAttr ($UpperName + ".visibility") 0;
}
	
global proc makeOffsetSkeleton(){
	string $selectedBone[] = `ls -sl -type joint`;
	$selectedRootBone = $selectedBone[0];
	
	string $offsetRootBone = ("Offset" + $selectedRootBone);
	duplicate -rr -name $offsetRootBone ($selectedRootBone);
	renameChildBones($offsetRootBone,("Offset"));
	
	string $bones[] = `listRelatives -fullPath -children 
		-allDescendents -type joint $selectedRootBone`;
	string $offsetBones[] = `listRelatives -fullPath -children 
		-allDescendents -type joint $offsetRootBone`;

	for ($i=0 ; $i< size($bones); $i++) {
	
		string $boneSN = getBoneName($bones[$i]);
		string $bone = $bones[$i];	
		string $offsetBoneSN = getBoneName($offsetBones[$i]);
		string $offsetBone=$offsetBones[$i];
		string $childBones[] = `listRelatives -children -fullPath 
			-type joint $bone`;
		string $childOffsetBones[] = `listRelatives -children -fullPath 
			-type joint $offsetBone`;

		int $isChildSingleBone = size($childBones);
		if ($isChildSingleBone) {
			print("making control object for -" + $boneSN + "\n");
			makeControlBox($boneSN + "Control");
			string $controlBoxName = `getSingleObjectCreated`;
			makeTrackers($bone, $selectedRootBone, $controlBoxName);
			makeScalers($bone, $selectedRootBone, $controlBoxName);
			makeScalers($offsetBone, $offsetRootBone, $controlBoxName);

			orientConstraint -weight 1 ($boneSN + "LOffset") ("Offset" + $boneSN);
			if ($boneSN != $selectedRootBone) {
				pointConstraint -weight 1 ("Offset" + $boneSN) ($boneSN + "Control");	
				}	
		}			
	}		
}


	
