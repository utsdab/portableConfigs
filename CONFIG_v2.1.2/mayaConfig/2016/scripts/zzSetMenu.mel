/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: zzSetMenu v2.6
''    Author: Hamish McKenzie
''    Last Updated: April 29, 2003
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=animation#1289
''  
''  History:
''    zzSetMenu v2.5 on October 10, 2002 by Hamish McKenzie
''    quick selection set marking menu v2.5 on October 3, 2002 by Hamish McKenzie
''    quick selection set marking menu v1.5 on September 8, 2002 by Hamish McKenzie
''    quick selection set marking menu v1.1 on October 16, 2001 by Hamish McKenzie
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/




//
// quick selection set enhanced menu
//
// Created by Hamish McKenzie www.emissionpossible.com
// Created : 1 October 2001
// Last Modified : 29 April 2002**
//
// Description:
// creates a marking menu listing all quick selection sets
// in a scene.  there is an option box which brings up a
// window for some basic set operations, such as adding
// selected objects to the set, renaming the set, etc...
// allows you to toggle selection mode (ie add or replace
// the current selection)
//
// 13-11-01 now has a select previous quick select set option
// 13-12-01 now saves settings in user prefs
// 06-05-02 overhaul of the UI
// 01-10-02 now has a mode to switch to camera control.  useful for
// when animating shots, and you need to quickly/often change 
// camera views.  you can now right click on the sel button
// for a set to key it (instead of having to go into key set
// mode).  useful alternative to using character sets
// **29-04-03 added help, and an about window.  minor code cleaning,
// and UI changes.  fixed a bug where the collapse state of the window
// panes was not saved correctly.
//
// Usage:
//  assign this function to a key press:
//	zzSetMenu;
//
//  assign this function to the release;
//	zzSetMenuKillUI;
//
// NOTE: if the hotkey you want to assign this script to contains
// either ctrl, alt or shift, then modify the "popupMenu" line below
// to reflect which key is used (ie if you're using alt-w then
// change it to -alt 1).
//
// Hamish McKenzie ©2003...
// Macaroni Kazoo Productions ©2003...


global proc zzSetMenu () {
	global int $zzIsClicked;

	$zzIsClicked = 0;
	if( `popupMenu -exists tempMM` ) { deleteUI tempMM; }
	popupMenu -ctl 0 -alt 0 -sh 1 -mm 0 -b 1 -aob 1 -p viewPanes -pmc "zzSetMenuUI tempMM" tempMM;
	}


global proc zzSetMenuUI ( string $parent ) {
	setParent -m $parent;
	menu -e -dai $parent;

	global int $zzIsClicked;
	string $zzSetMenuMarkingMode = "qss";
	string $changeModeTo = "camera";

	$zzIsClicked = 1;
	if ( `optionVar -exists zzSetMenuMarkingMode` ) $zzSetMenuMarkingMode = `optionVar -q zzSetMenuMarkingMode`;
	if ( $zzSetMenuMarkingMode == "qss" ) { $changeModeTo = "camera"; }
	if ( $zzSetMenuMarkingMode == "camera" ) { $changeModeTo = "qss"; }

	menuItem -l "Select All Sets" -command ( "{string $sets[] = `zzSetMenuGetSets`; for ( $set in $sets ) select -add `sets -q $set`; }" ) -rp "E";
	menuItem -l ( "select: " + $changeModeTo + "'s" ) -command ( "{ optionVar -sv zzSetMenuMarkingMode \"" + $changeModeTo + "\";zzSetMenuWindowFunctions MMUpdate none none; }" ) -rp "SE";
	if ( $zzSetMenuMarkingMode == "qss" ) {
		string $charSets[] = `zzSetMenuGetSets`;
		string $zzSetMenuPreviousSet = "";
		int $zzSetMenuOption = 0;
		int $zzSetMenuKeyCheck = 0;

		if ( `optionVar -exists zzSetMenuPreviousSet` ) $zzSetMenuPreviousSet = `optionVar -q zzSetMenuPreviousSet`;
		if ( `optionVar -exists zzSetMenuKeyCheck` ) $zzSetMenuKeyCheck = `optionVar -q zzSetMenuKeyCheck`;
		if ( `optionVar -exists zzSetMenuOption` ) $zzSetMenuOption = `optionVar -q zzSetMenuOption`;

		$label = ( $zzSetMenuKeyCheck ) ? "key" : "select";
		menuItem -l "add to selection" -command ( "{ int $zzSetMenuOption = `optionVar -q zzSetMenuOption`; optionVar -intValue zzSetMenuOption ( !$zzSetMenuOption ); zzSetMenuWindowFunctions MMUpdate none none;}" ) -checkBox $zzSetMenuOption -rp "N";
		menuItem -l ( $label + " " + $zzSetMenuPreviousSet + " (bold)" ) -command ( "zzSetMenuMisc " + $zzSetMenuPreviousSet ) -rp "W";
		menuItem -l "key set members" -command ( "{ int $zzSetMenuKeyCheck = `optionVar -q zzSetMenuKeyCheck`; optionVar -intValue zzSetMenuKeyCheck ( !$zzSetMenuKeyCheck ); zzSetMenuWindowFunctions MMUpdate none none;}" ) -checkBox $zzSetMenuKeyCheck -rp "NE";

		menuItem -l "create new set" -command ( "defineCharacter" ) -rp "S";
		for( $set in $charSets ) {
			int $isBold = $set == $zzSetMenuPreviousSet ? 1:0;
			menuItem -l $set -command ( "{zzSetMenuMisc " + $set + "; zzSetMenuWindowFunctions newPrevious " + $set + " none;}" ) -bld $isBold;
			}

		if( `menu -q -ni $parent` == 0 ) {
		//
		//	No characters defined - create a default menu item
		//	to inform the user

			menuItem -l "No Quick Select Sets Defined";
			}
		}

	if ( $zzSetMenuMarkingMode == "camera" ) {
		string $cameras[] = `listCameras`;
		string $currentPanel = `getPanel -underPointer`;
		string $defaultCameras[] = { "persp", "top", "front", "side" };
		string $defaultCameraPositions[] = { "N", "W", "S", "E" };
		int $cameraListMode = 1;
		int $n = 0;
		print ( $currentPanel + "\n" );

		if ( `optionVar -exists zzSetMenuCameraUserList` ) { $cameraListMode = `optionVar -q zzSetMenuCameraUserList`; }

		menuItem -l "user cameras only" -checkBox $cameraListMode -command ( "{ optionVar -iv zzSetMenuCameraUserList " + !$cameraListMode + "; zzSetMenuWindowFunctions MMUpdate none none;}" );
		menuItem -divider 1;

		for ( $camera in $defaultCameras ) {
			int $isBold = $camera == `lookThru -q $currentPanel` ? 0:1;
			menuItem -l $camera -command ( "lookThru " + $camera + " " + $currentPanel ) -bld $isBold -rp $defaultCameraPositions[$n];
			$n++;
			}

		if ( !$cameraListMode ) {
			for ( $camera in $defaultCameras ) {
				int $isBold = $camera == `lookThru -q $currentPanel` ? 0:1;
				menuItem -l $camera -command ( "lookThru " + $camera + " " + $currentPanel ) -bld $isBold;
				}
			menuItem -divider 1;
			}

		for ( $camera in $cameras ) {
			if ( $camera != "persp" && $camera != "top" && $camera != "front" && $camera != "side" ) {
				int $isBold = $camera == `lookThru -q $currentPanel` ? 0:1;
				menuItem -l $camera -command ( "lookThru " + $camera + " " + $currentPanel ) -bld $isBold;
				}
			}
		}
	}


// returns a set containing all the quick selection sets in the scene
global proc string[] zzSetMenuGetSets () {
	string $sets[] = `ls -sets`;
	string $qssSets[];
	int $n = 0;

	for ( $set in $sets ) {
		if ( `sets -q -t $set` == "gCharacterSet" ) {
			$qssSets[$n] = $set;
			$n++;
			}
		}

	return $qssSets;
	}


//this simple function is basically used by the "select" button.  it either selects set members, or keys them
global proc zzSetMenuMisc ( string $setName ) {
	string $function;
	string $flag;
	string $attrName = "postCommandString";
	int $zzSetMenuKeyCheck = 0;

	if ( `optionVar -exists zzSetMenuKeyCheck` ) $zzSetMenuKeyCheck = `optionVar -q zzSetMenuKeyCheck`;
	if ( `optionVar -exists zzSetMenuOption` ) $zzSetMenuOption = `optionVar -q zzSetMenuOption`;
	$flag = ( $zzSetMenuOption ) ? "-add" : "-r";
	$function = $zzSetMenuKeyCheck ? "key":"select";

	switch ( $function ) {
		case "key":
		string $setList[] = `sets -q $setName`;
		for ( $member in $setList ) {
			eval ( "setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 1 " + $member );
			}
		break;

		case "select":
		print ( "selecting items now...\n" );
		eval ( "select " + $flag + " " + $setName );
		//now call post command
		if ( `objExists ( $setName + "." + $attrName )` ) {
			string $command = `getAttr ( $setName + "." + $attrName )`;
			eval ( $command );
			}
		break;
		}
	}


global proc zzSetMenuWindow () {
	string $windowName = "zzSetMenuWindow";
	string $windowTitle = "Set Control Centre";
	string $sets[] = `zzSetMenuGetSets`;
	string $buttonLabel = "s->";
	string $zzSetMenuPreviousSet = "";
	string $zzSetMenuMarkingMode = "qss";
	int $zzSetMenuOption = 0;
	int $zzSetMenuKeyCheck = 0;

	if ( `optionVar -exists zzSetMenuPreviousSet` ) $zzSetMenuPreviousSet = `optionVar -q zzSetMenuPreviousSet`;
	if ( `optionVar -exists zzSetMenuKeyCheck` ) $zzSetMenuKeyCheck = `optionVar -q zzSetMenuKeyCheck`;
	if ( `optionVar -exists zzSetMenuOption` ) $zzSetMenuOption = `optionVar -q zzSetMenuOption`;
	if ( `optionVar -exists zzSetMenuMarkingMode` ) $zzSetMenuMarkingMode = `optionVar -q zzSetMenuMarkingMode`;
	$buttonLabel = ( $zzSetMenuKeyCheck ) ? "k->":"sel";

	if ( `window -exists $windowName` ) { deleteUI $windowName; }
	window -title $windowTitle -resizeToFitChildren 1 -maximizeButton 0
		-sizeable 1 -width 265 -height 350 $windowName;

		menuBarLayout;
			menu -label "Help";
				menuItem -l "Help..." -c ( "zzSetMenuHelp help" );
				menuItem -divider 1;
				menuItem -l "About" -c ( "zzSetMenuHelp about" );

		columnLayout -adjustableColumn true -rowSpacing 7;
			int $collapseStateMisc = 0;
			if ( `optionVar -exists zzSetMenuFrameMisc` ) { $collapseStateMisc = `optionVar -q zzSetMenuFrameMisc`; } 
			frameLayout -label "Marking Menu Setup" -labelAlign "center" -collapsable 1 -collapse $collapseStateMisc -borderStyle "etchedOut" -expandCommand ( "optionVar -iv zzSetMenuFrameMisc 0" ) -collapseCommand ( "optionVar -iv zzSetMenuFrameMisc 1" ) zzSetMenuFrameMisc;
				columnLayout -rowSpacing 5;
					checkBox -label "Add To Selection" -v $zzSetMenuOption -cc ( "zzSetMenuWindowFunctions update none none" ) zzSetMenuCheckReplace;
					rowLayout -numberOfColumns 3
						-columnWidth3 90 70 99
						-columnAttach 1 "both" 	1
						-columnAttach 2 "both" 	1
						-columnAttach 3 "both" 	1;
						radioCollection zzSetMenuRadioMarkingMenuMode;
						radioButton -l "selection sets" -onCommand ( "optionVar -sv zzSetMenuMarkingMode qss" ) zzSetMenuRadioButtonqss;
						radioButton -l "cameras" -onCommand ( "optionVar -sv zzSetMenuMarkingMode camera" ) zzSetMenuRadioButtoncamera;
						button -height 20 -label "Update" -align center -c ( "zzSetMenuWindowFunctions updateWindow none none" );
						setParent ..;
					setParent ..;
				setParent ..;

			radioButton -e -sl ( "zzSetMenuRadioButton" + $zzSetMenuMarkingMode );

			int $collapseStateSet = 1;
			if ( `optionVar -exists zzSetMenuFrameSetMenu` ) { $collapseStateSet = `optionVar -q zzSetMenuFrameSetMenu`; }
			frameLayout -label "QSS Ops" -labelAlign "center" -collapsable 1 -collapse $collapseStateSet -borderStyle "etchedOut" -expandCommand ( "optionVar -iv zzSetMenuFrameSetMenu 0" ) -collapseCommand ( "optionVar -iv zzSetMenuFrameSetMenu 1" ) zzSetMenuFrameSetMenu;
				columnLayout -rowSpacing 5;
					checkBox -label "Key Set Members" -v $zzSetMenuKeyCheck -cc ( "zzSetMenuWindowFunctions update none none" ) zzSetMenuCheckKey;

					//this row does ops for all sets
					rowLayout -numberOfColumns 5
						-columnWidth5 28 90 21 21 84
						-columnAlign 2 "center"
						-columnAttach 1 "both" 	1
						-columnAttach 2 "both" 	1
						-columnAttach 3 "both" 	1
						-columnAttach 4 "both" 	1
						-columnAttach 5 "both" 	0;
						button -height 20 -label "sel" -c ( "{string $sets[] = `zzSetMenuGetSets`; for ( $set in $sets ) select -add `sets -q $set`; }" ) zzSetMenuButtonSelAll;
						text -label "<-for all sets->" -align center;
						button -height 20 -label "+" -align center -c ( "{string $sets[] = `zzSetMenuGetSets`; for ( $set in $sets ) sets -add  $set `ls -sl`; }" );
						button -height 20 -label "-" -align center -c ( "{string $sets[] = `zzSetMenuGetSets`; for ( $set in $sets ) sets -rm  $set `ls -sl`; }" );
						rowLayout -numberOfColumns 3
							-columnWidth3 21 21 30
							-columnAttach 1 "both" 1
							-columnAttach 2 "both" 1
							-columnAttach 3 "both" 1;
							button -height 20 -label "H" -align center -c ( "{string $sets[] = `zzSetMenuGetSets`; for ( $set in $sets ) zzSetMenuHider h $set; }" );
							button -height 20 -label "U" -align center -c ( "{string $sets[] = `zzSetMenuGetSets`; for ( $set in $sets ) zzSetMenuHider u $set; }" );
							button -height 20 -label "del" -align center -c ( "{string $sets[] = `zzSetMenuGetSets`; delete $sets; deleteUI " + $windowName + "; }" );
							setParent ..;
						setParent ..;

					//this loop generates a row for each set containing all the control buttons
					for ( $set in $sets ) {
						string $rowName = ( $set + "zzSetMenuRow" );
						string $isPrevious = ( $zzSetMenuPreviousSet == $set ) ? "boldLabelFont":"smallPlainLabelFont";
						int $hideState = 0;
						int $isPostCommand = 0;

						if ( `objExists ( $set + ".zzSetMenuHidden" )` ) { $hideState = `getAttr ( $set + ".zzSetMenuHidden" )`; }
						else { addAttr -ln zzSetMenuHidden -k 0 -h 1 -at bool $set; }
						if ( `objExists ( $set + ".postCommandString" )` ) { $isPostCommand = 1; }
						string $hideLabel = ( $hideState ) ? ">":"h";
						string $unhideLabel = ( $hideState ) ? "u":"<";
						string $postLabel = ( $isPostCommand ) ? "pc>":"-o-";
						rowLayout -numberOfColumns 5
							-columnWidth5 28 90 21 21 99
							-columnAttach 1 "both" 	1
							-columnAttach 2 "both" 	1
							-columnAttach 3 "both" 	1
							-columnAttach 4 "both" 	1
							-columnAttach 5 "both" 	0 $rowName;
							button -height 20 -label $buttonLabel -c ( "{zzSetMenuMisc " + $set + "; zzSetMenuWindowFunctions newPrevious " + $set + " none;}" ) ( $set + "zzSetMenuButtonSel" );
							textField -height 20 -ed 1 -text $set -font $isPrevious -cc ( "zzSetMenuRenamer " + $set + " set" ) ( $set + "zzSetMenuTextField" );
							button -height 20 -label "+" -align center -c ( "sets -add " + $set + " `ls -sl`" ) ( $set + "zzSetMenuButtonAdd" );
							button -height 20 -label "-" -align center -c ( "sets -rm " + $set + " `ls -sl`" ) ( $set + "zzSetMenuButtonRem" );
							rowLayout -numberOfColumns 4
								-columnWidth4 21 21 30 27
								-columnAttach 1 "both" 1
								-columnAttach 2 "both" 1
								-columnAttach 3 "both" 1
								-columnAttach 4 "both" 1;
								button -height 20 -label $hideLabel -align center -enable (!$hideState) -c ( "zzSetMenuHider h " + $set ) ( $set + "zzSetMenuButtonHid" );
								button -height 20 -label $unhideLabel -align center -enable ($hideState) -c ( "zzSetMenuHider u " + $set ) ( $set + "zzSetMenuButtonUnh" );
								button -height 20 -label "del" -align center -c ( "{delete " + $set + "; zzSetMenuWindowFunctions delete " + $set + " none;}" ) ( $set + "zzSetMenuButtonDel" );
								button -height 20 -label $postLabel -align center -c ( "zzSetMenuPostFunctions window " + $set ) ( $set + "zzSetMenuButtonPostCommand" );
								setParent ..;
							setParent ..;
						popupMenu -p ( $set + "zzSetMenuButtonSel" ) -b 3
							-pmc ( "{setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 1 ( `sets -q " + $set + "` ); zzSetMenuWindowFunctions newPrevious " + $set + " none;}" ) ( $set + "zzSetMenuButtonPopupMenu" );
							menuItem -l "objects keyed" -enable 0 -p ( $set + "zzSetMenuButtonPopupMenu" );
						}
					rowLayout -columnAttach 1 "both" 1;
						button -height 20 -label "New Set" -align center -c ( "{defineCharacter; zzSetMenuWindowFunctions updateWindow none none; }" );
						setParent ..;
					setParent ..;
				setParent ..;

			int $collapseStateCam = 0;
			if ( `optionVar -exists zzSetMenuFrameCamera` ) { $collapseStateCam = `optionVar -q zzSetMenuFrameCamera`; }
			frameLayout -label "Camera Ops" -labelAlign "center" -collapsable 1 -collapse $collapseStateCam -borderStyle "etchedOut" -expandCommand ( "optionVar -iv zzSetMenuFrameCamera 0" ) -collapseCommand ( "optionVar -iv zzSetMenuFrameCamera 1" ) zzSetMenuFrameCamera;
				columnLayout -rowSpacing 5;
					rowLayout -numberOfColumns 3
						-columnWidth3 90 70 70;
						int $cameraListMode = 1;
						
						if ( `optionVar -exists zzSetMenuCameraUserList` ) { $cameraListMode = `optionVar -q zzSetMenuCameraUserList`; }
						
						checkBox -l "user cameras only" -v $cameraListMode
							-cc ( "{ optionVar -iv zzSetMenuCameraUserList " + !$cameraListMode + "; zzSetMenuWindowFunctions update none none;}" ) zzSetMenuCameraCheckUser;

						setParent ..;

						string $cameras[] = `listCameras`;
						string $currentPanel = `getPanel -withFocus`;
						string $focusPanel = `lookThru -q $currentPanel`;
						string $mayaCameras[] = { "persp", "top", "front", "side" };

						for ( $camera in $mayaCameras ) {
							rowLayout -numberOfColumns 5
								-columnWidth5 28 90 21 25 78
								-columnAttach 1 "both" 1
								-columnAttach 2 "both" 1
								-columnAttach 3 "both" 1
								-columnAttach 4 "both" 1
								-columnAttach 5 "both" 1 ( "zzSetMenuCameraRow" + $camera );
								button -height 20 -label "sel" -c ( "zzSetMenuWindowFunctions cameraSelect " + $camera + " none" ) ( "zzSetMenuCameraButtonSelect" + $camera );
								textField -height 20 -ed 0 -text $camera ( "zzSetMenuCameraTextField" + $camera );
								button -height 20 -label "B)" -c ( "zzSetMenuWindowFunctions cameraLookThru " + $camera + " none" ) ( "zzSetMenuCameraButtonLookThru" + $camera );
								button -height 20 -label "lok" -c ( "zzSetMenuLockFunctions lock " + $camera ) ( "zzSetMenuCameraButtonLock" + $camera );
								rowLayout -numberOfColumns 3
									-columnWidth3 25 23 27
									-columnAttach 1 "both" 1
									-columnAttach 2 "both" 1
									-columnAttach 3 "both" 1;
									button -height 20 -label "ulk" -c ( "zzSetMenuLockFunctions unlock " + $camera ) ( "zzSetMenuCameraButtonUnLock" + $camera );
									button -enable 0 -height 20 -label "-t>" -c ( "zzSetMenuWindowFunctions cameraTime " + $camera + " none" ) ( "zzSetMenuCameraButtonTime" + $camera );
									button -enable 0 -height 20 -label "del" ( "zzSetMenuCameraButtonDelete" + $camera );
									setParent ..;
								setParent ..;
							}
						for ( $camera in $cameras ) {
							if ( $camera != "persp" && $camera != "top" && $camera != "front" && $camera != "side" ) {
								rowLayout -numberOfColumns 5
									-columnWidth5 28 90 21 25 78
									-columnAttach 1 "both" 1
									-columnAttach 2 "both" 1
									-columnAttach 3 "both" 1
									-columnAttach 4 "both" 1
									-columnAttach 5 "both" 1 ( "zzSetMenuCameraRow" + $camera );
									button -height 20 -label "sel" -c ( "zzSetMenuWindowFunctions cameraSelect " + $camera + " none" ) ( "zzSetMenuCameraButtonSelect" + $camera );
									textField -height 20 -ed 1 -text $camera -cc ( "zzSetMenuRenamer " + $camera + " camera" ) ( "zzSetMenuCameraTextField" + $camera );
									button -height 20 -label "B)" -c ( "zzSetMenuWindowFunctions cameraLookThru " + $camera + " none" ) ( "zzSetMenuCameraButtonLookThru" + $camera );
									button -height 20 -label "lok" -c ( "zzSetMenuLockFunctions lock " + $camera ) ( "zzSetMenuCameraButtonLock" + $camera );
									rowLayout -numberOfColumns 3
										-columnWidth3 25 23 27
										-columnAttach 1 "both" 1
										-columnAttach 2 "both" 1
										-columnAttach 3 "both" 1;
										button -height 20 -label "ulk" -c ( "zzSetMenuLockFunctions unlock " + $camera ) ( "zzSetMenuCameraButtonUnLock" + $camera );
										button -height 20 -label "-t>" -c ( "zzSetMenuWindowFunctions cameraTime " + $camera + " none" ) ( "zzSetMenuCameraButtonTime" + $camera );
										button -height 20 -label "del" -c ( "{ delete " + $camera + "; deleteUI zzSetMenuCameraRow" + $camera + ";}" ) ( "zzSetMenuCameraButtonDelete" + $camera );
										setParent ..;
									setParent ..;
									}
								}

						rowLayout -columnAttach 1 "both" 1;
							button -label "New Camera" -c ( "{ CreateCameraOnly; zzSetMenuWindowFunctions updateWindow none none; }" );
						setParent ..;
					setParent ..;
				setParent ..;
			setParent ..;

	showWindow $windowName;
	zzSetMenuWindowFunctions update none none;
	}


global proc zzSetMenuLockFunctions ( string $function, string $obj ) {
	string $lockAttribs[] = { "tx","ty","tz","rx","ry","rz" };
	int $lockState = $function == "lock" ? 1:0;
	
	print ( "working on object: " + $obj + "\n" );
	for ( $attrib in $lockAttribs ) {
		setAttr -lock $lockState ( $obj + "." + $attrib );
		}
	}


global proc zzSetMenuPostFunctions ( string $function, string $set ) {
	string $windowName = "zzSetMenuPostCommandWindow";
	string $windowTitle = "Post Command";
	string $attrName = "postCommandString";
	string $setCommand;

	switch ( $function ) {
		case "window":
		if ( `objExists ( $set + "." + $attrName )` ) { $setCommand = `getAttr ( $set + "." + $attrName )`; }
		else {
			addAttr -ln $attrName -dt "string" $set;
			setAttr -type "string" ( $set + "." + $attrName ) "";
			}

		if ( `window -exists $windowName` ) { deleteUI $windowName; }
		window -title $windowTitle -resizeToFitChildren 1 -maximizeButton 0
			-sizeable 1 -width 400 $windowName;

			columnLayout -adjustableColumn true -rowSpacing 7;
				rowLayout -numberOfColumns 4
					-columnWidth4 110 350 35 40
					-columnAttach 1 "both" 	1
					-columnAttach 2 "both" 	1
					-columnAttach 3 "both" 	1
					-columnAttach 4 "both" 	0;
					text -label "Post Command String:";
					textField -ed 1 -text $setCommand -cc ( "zzSetMenuPostFunctions update " + $set ) ( $set + "PostCommandText" );
					button -height 20 -label "close" -c ( "deleteUI " + $windowName );
					button -height 20 -label "delete" -c ( "deleteAttr " + $set + "." + $attrName + "; deleteUI " + $windowName + "; zzSetMenuWindowFunctions update none none;" );
					setParent ..;
				setParent ..;

		showWindow $windowName;
		zzSetMenuWindowFunctions update none none;
		break;

		case "update":
		string $commandString = `textField -q -text ( $set + "PostCommandText" )`;
		setAttr -type "string" ( $set + "." + $attrName ) $commandString;
		break;
		}
	}


global proc zzSetMenuWindowFunctions ( string $function, string $set, string $newSetName ) {
	string $sets[] = `zzSetMenuGetSets`;
	string $windowName = "zzSetMenuWindow";
	string $flag;
	string $zzSetMenuPreviousSet = "";
	int $zzSetMenuOption = 0;
	int $zzSetMenuKeyCheck = 0;

	if ( `optionVar -exists zzSetMenuPreviousSet` ) $zzSetMenuPreviousSet = `optionVar -q zzSetMenuPreviousSet`;
	if ( `optionVar -exists zzSetMenuOption` ) $zzSetMenuOption = `optionVar -q zzSetMenuOption`;
	if ( `optionVar -exists zzSetMenuKeyCheck` ) $zzSetMenuKeyCheck = `optionVar -q zzSetMenuKeyCheck`;
	$flag = ( $zzSetMenuOption ) ? "-add" : "-r";

	switch ( $function ) {
		case "MMUpdate":
		//subfunction called by the marking menu, to update window checkbox states
		if ( `window -exists $windowName` ) {
			string $zzSetMenuMarkingMode = "qss";
			
			if ( `optionVar -exists zzSetMenuMarkingMode` ) $zzSetMenuMarkingMode = `optionVar -q zzSetMenuMarkingMode`;
			
			radioButton -e -sl ( "zzSetMenuRadioButton" + $zzSetMenuMarkingMode );
			checkBox -e -v `optionVar -q zzSetMenuOption` zzSetMenuCheckReplace;
			checkBox -e -v `optionVar -q zzSetMenuKeyCheck` zzSetMenuCheckKey;
			checkBox -e -v `optionVar -q zzSetMenuCameraUserList` zzSetMenuCameraCheckUser;
			}

		zzSetMenuWindowFunctions update none none;
		break;


		case "update":
		if (`window -ex $windowName`){ 
			//subfunction called as a general window update function
			string $buttonLabel;
			int $replaceCheckBoxVal = `checkBox -q -v zzSetMenuCheckReplace`;
			int $keyCheckBoxVal = `checkBox -q -v zzSetMenuCheckKey`;

			optionVar -intValue zzSetMenuOption $replaceCheckBoxVal;
			optionVar -intValue zzSetMenuKeyCheck $keyCheckBoxVal;
			$buttonLabel = ( $keyCheckBoxVal ) ? "k->":"sel";

			//change the button label to match the selection type
			for ( $set in $sets ) {
				string $isPrevious = ( $zzSetMenuPreviousSet == $set ) ? "boldLabelFont":"smallPlainLabelFont";
				string $text = `textField -q -text ( $set + "zzSetMenuTextField" )`;
				string $postLabel = ( `objExists ( $set + ".postCommandString" )` ) ? "pc>":"-o-";

				button -e -label $buttonLabel ( $set + "zzSetMenuButtonSel" );
				//button -e -label $buttonLabel zzSetMenuButtonSelAll;
				textField -e -text "" ( $set + "zzSetMenuTextField" );
				textField -e -font $isPrevious ( $set + "zzSetMenuTextField" );
				textField -e -text $text ( $set + "zzSetMenuTextField" );
				button -e -label $postLabel ( $set + "zzSetMenuButtonPostCommand" );
				}

			if ( `checkBox -q -v zzSetMenuCameraCheckUser` ) {
				rowLayout -e -vis 0 zzSetMenuCameraRowpersp;
				rowLayout -e -vis 0 zzSetMenuCameraRowtop;
				rowLayout -e -vis 0 zzSetMenuCameraRowfront;
				rowLayout -e -vis 0 zzSetMenuCameraRowside;
				}

			if ( !`checkBox -q -v zzSetMenuCameraCheckUser` ) {
				rowLayout -e -vis 1 zzSetMenuCameraRowpersp;
				rowLayout -e -vis 1 zzSetMenuCameraRowtop;
				rowLayout -e -vis 1 zzSetMenuCameraRowfront;
				rowLayout -e -vis 1 zzSetMenuCameraRowside;
				}
			}
		break;


		case "delete":
		deleteUI ( $set + "zzSetMenuRow" );
		break;


		case "cameraLookThru":
		lookThru `getPanel -withFocus` $set;
		break;


		case "cameraSelect":
		string $selectFlag = `checkBox -q -v zzSetMenuCheckReplace` ? "-toggle":"-replace";
		
		eval ( "select " + $selectFlag + " " + $set );
		break;
		
		
		case "cameraTime":
		float $startFrame = 0;
		float $endFrame = 24;

		$startFrame = `findKeyframe -which first $set`;
		$endFrame = `findKeyframe -which last $set`;
		playbackOptions -min $startFrame -max $endFrame;
		setAttr defaultRenderGlobals.startFrame $startFrame;
		setAttr defaultRenderGlobals.endFrame $endFrame;
		setAttr defaultHardwareRenderGlobals.startFrame $startFrame;
		setAttr defaultHardwareRenderGlobals.endFrame $endFrame;
		break;


		case "newPrevious":
		//subfunction simply saves previous set name to prefs, and if window is open, calls an update
		optionVar -stringValue zzSetMenuPreviousSet $set;
		if ( `window -exists $windowName` ) zzSetMenuWindowFunctions update none none;
		break;


		case "updateWindow":
		//subfunction is a hacky way of redrawing the entire UI
		deleteUI $windowName;
		zzSetMenuWindow;
		break;
		}
	}


//this function does the renaming of the set reliably, and then calls zzSetMenuWindowFunctions to handle UI element renaming
global proc zzSetMenuRenamer ( string $node, string $nodeType ) {
	switch ( $nodeType ) {
		case "set":
		string $nodeNameEntry = `textField -q -text ( $node + "zzSetMenuTextField" )`;
		if ( !($nodeNameEntry == $node) ) {  //only proceed if name has actually changed (as this function is called whenver the text field is exited)
			string $newSetName = `rename $node $nodeNameEntry`;
			string $zzSetMenuPreviousSet;

			if ( `optionVar -exists zzSetMenuPreviousSet` ) { $zzSetMenuPreviousSet = `optionVar -q zzSetMenuPreviousSet`; }
			if ( $zzSetMenuPreviousSet == $node ) { optionVar -stringValue zzSetMenuPreviousSet $newSetName; }

			if ( $newSetName != $nodeNameEntry ) warning "auto correcting conflicting node name";

			//subfunction used for renaming sets.  each UI element also needs to be renamed so it can be called upon reliably once set has been renamed
			renameUI ( $node + "zzSetMenuRow" ) ( $newSetName + "zzSetMenuRow" );
			renameUI ( $node + "zzSetMenuTextField" ) ( $newSetName + "zzSetMenuTextField" );
			renameUI ( $node + "zzSetMenuButtonSel" ) ( $newSetName + "zzSetMenuButtonSel" );
			renameUI ( $node + "zzSetMenuButtonAdd" ) ( $newSetName + "zzSetMenuButtonAdd" );
			renameUI ( $node + "zzSetMenuButtonRem" ) ( $newSetName + "zzSetMenuButtonRem" );
			renameUI ( $node + "zzSetMenuButtonHid" ) ( $newSetName + "zzSetMenuButtonHid" );
			renameUI ( $node + "zzSetMenuButtonUnh" ) ( $newSetName + "zzSetMenuButtonUnh" );
			renameUI ( $node + "zzSetMenuButtonDel" ) ( $newSetName + "zzSetMenuButtonDel" );

			button -e -c ( "{zzSetMenuMisc " + $newSetName + "; zzSetMenuWindowFunctions newPrevious " + $newSetName + " none;}" ) ( $newSetName + "zzSetMenuButtonSel" );
			button -e -c ( "sets -add " + $newSetName + " `ls -sl`" ) ( $newSetName + "zzSetMenuButtonAdd" );
			button -e -c ( "sets -rm " + $newSetName + " `ls -sl`" ) ( $newSetName + "zzSetMenuButtonRem" );
			button -e -c ( "zzSetMenuHider h " + $newSetName ) ( $newSetName + "zzSetMenuButtonHid" );
			button -e -c ( "zzSetMenuHider u " + $newSetName ) ( $newSetName + "zzSetMenuButtonUnh" );
			button -e -c ( "{delete " + $newSetName + "; zzSetMenuWindowFunctions delete " + $newSetName + " none;}" ) ( $newSetName + "zzSetMenuButtonDel" );

			textField -e -cc ( "zzSetMenuRenamer " + $newSetName + " set" ) ( $newSetName + "zzSetMenuTextField" );
			textField -e -text $newSetName ( $newSetName + "zzSetMenuTextField" );
			}
		break;


		case "camera":
		string $newNodeNameTypein = `textField -q -text ( "zzSetMenuCameraTextField" + $node )`;
		if ( !($newNodeNameTypein == $node) ) {  //only proceed if name has actually changed (as this function is called whenver the text field is exited)
			string $newNodeName = `rename $node $newNodeNameTypein`;

			if ( $newNodeName != $newNodeNameTypein ) { warning "auto correcting conflicting node name"; }

			renameUI ( "zzSetMenuCameraRow" + $node ) 		( "zzSetMenuCameraRow" + $newNodeName );
			renameUI ( "zzSetMenuCameraTextField" + $node ) 	( "zzSetMenuCameraTextField" + $newNodeName );
			renameUI ( "zzSetMenuCameraButtonLookThru" + $node ) 	( "zzSetMenuCameraButtonLookThru" + $newNodeName );
			renameUI ( "zzSetMenuCameraButtonDelete" + $node ) 	( "zzSetMenuCameraButtonDelete" + $newNodeName );
			renameUI ( "zzSetMenuCameraButtonSelect" + $node ) 	( "zzSetMenuCameraButtonSelect" + $newNodeName );
			renameUI ( "zzSetMenuCameraButtonTime" + $node ) 	( "zzSetMenuCameraButtonTime" + $newNodeName );
			renameUI ( "zzSetMenuCameraButtonLock" + $node )	( "zzSetMenuCameraButtonLock" + $newNodeName );
			renameUI ( "zzSetMenuCameraButtonUnLock" + $node )	( "zzSetMenuCameraButtonUnLock" + $newNodeName );

			button -e -c ( "zzSetMenuWindowFunctions cameraSelect " + $newNodeName + " none" ) ( "zzSetMenuCameraButtonSelect" + $newNodeName );
			button -e -c ( "zzSetMenuWindowFunctions cameraLookThru " + $newNodeName + " none" ) ( "zzSetMenuCameraButtonLookThru" + $newNodeName );
			button -e -c ( "zzSetMenuLockFunctions lock " + $newNodeName ) ( "zzSetMenuCameraButtonLock" + $newNodeName );
			button -e -c ( "zzSetMenuLockFunctions unlock " + $newNodeName ) ( "zzSetMenuCameraButtonUnLock" + $newNodeName );
			button -e -c ( "{ delete " + $newNodeName + "; deleteUI zzSetMenuCameraButtonDelete" + $newNodeName + ";}" ) ( "zzSetMenuCameraButtonDelete" + $newNodeName );
			button -e -c ( "zzSetMenuWindowFunctions cameraTime " + $newNodeName + " none" ) ( "zzSetMenuCameraButtonTime" + $newNodeName );

			textField -e -cc ( "zzSetMenuRenamer " + $newNodeName + " camera" ) ( "zzSetMenuCameraTextField" + $newNodeName );
			textField -e -text $newNodeName ( "zzSetMenuCameraTextField" + $newNodeName );
			}
		break;
		}
	}


//creates an attribute for the set that saves its hidden state (useful for toggling)
global proc zzSetMenuHider ( string $function, string $set ) {
	string $setMembers[] = `sets -q $set`;
	string $hideLabel;
	string $unhideLabel;
	int $currentState = getAttr ( $set + ".zzSetMenuHidden" );
	int $isHidden = ( $function == "h" ) ? 1:0;

	setAttr -e ( $set + ".zzSetMenuHidden" ) $isHidden;
	for ( $member in $setMembers ) {
		if ( `objExists ( $member + ".visibility" )` ) setAttr -e ( $member + ".visibility" ) ( !$isHidden );
		}

	$hideState = `getAttr ( $set + ".zzSetMenuHidden" )`;
	$hideLabel = ( $hideState ) ? ">":"h";
	$unhideLabel = ( $hideState ) ? "u":"<";
	button -e -label $hideLabel -enable (!$hideState) ( $set + "zzSetMenuButtonHid" );
	button -e -label $unhideLabel -enable ($hideState) ( $set + "zzSetMenuButtonUnh" );
	}


global proc zzSetMenuKillUI () {
	global int $zzIsClicked;

	if( `popupMenu -exists tempMM` ) {
		deleteUI tempMM;
		if ( $zzIsClicked ){ $zzIsClicked = 0; }
		else { zzSetMenuWindow; }
		}
	}


global proc zzSetMenuHelp ( string $function ) {
	string $windowName = "zzSetMenuAbout";
	string $windowTitle = "About zzSetMenu";
	string $aboutScript = "Overview:\nzzSetMenu is a marking menu based script to help deal with quick selection sets.  Quick selection sets are a great way to quickly select a bunch of character controls, and quickly key them when animating.  zzSetMenu has two parts to it, the marking menu, and its control window.  The marking menu gives really fast access to selecting any quick selection set in the scene, adding to current selections, creating sets, or keying all objects in a set.\n\nThe config window then supplements this with the ability to easily rename sets, add/remove items to/from sets, delete sets, hide all set members, or create post selection commands.";
	string $aboutAuthor = "Version: 2.6\nCreation Date: 14 October 2001\nLast Modified: 21 October 2002\n\nzzSetMenu was written by Macaroni Kazoo Productions  www.macaronikazoo.com\n\nWe hope you find it to be such a useful tool, that you tell all your friends about it.";
	int $selTab = ( $function == "about" )?2:1;

	if ( `window -exists $windowName` ) { deleteUI $windowName; }

	window -title $windowTitle -resizeToFitChildren 1 -maximizeButton 0 -sizeable 1 -widthHeight 330 300 $windowName;

		 string $form = `formLayout`;
		 string $tabs = `tabLayout -innerMarginWidth 5 -innerMarginHeight 5`;
		 formLayout -edit
			-attachForm $tabs "top"    0
			-attachForm $tabs "left"   0
			-attachForm $tabs "bottom" 0
			-attachForm $tabs "right"  0
			$form;

			string $child1 = `paneLayout -configuration "single"`;
				scrollField -ed 0 -wordWrap 1 -font plainLabelFont -w 300 -h 200 -numberOfLines 15 -text $aboutScript;
				setParent ..;

			string $child2 = `paneLayout -configuration "single"`;
				scrollField -ed 0 -wordWrap 1 -font plainLabelFont -w 300 -h 200 -numberOfLines 15 -text $aboutAuthor;
				setParent ..;

			tabLayout -e -selectTabIndex $selTab -tabLabel $child1 "zzSetMenu Help" -tabLabel $child2 "About zzSetMenu" $tabs;

	showWindow $windowName;
	}