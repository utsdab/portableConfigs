// Select three CVs first as pins
// any other cvs selected after the first two will be moved 
// onto the plane defined by the pins
// useful for smoothing corners where patches meet 
// by Matthew Gidney 2000 
//
global proc mPlanarCvs() {
        string $parents[] = `filterExpand -ex true -sm 28 `;
        int $numberOfCvs = `size $parents`;
        
        if ( $numberOfCvs < 4) {
                print("mPlanarCvs(): You must pick at least 4 Cv's to align \n");
                return;
        }       
        float $CVPin1[3] = `xform -q -worldSpace -t $parents[0]`;
        float $CVPin2[3] = `xform -q -worldSpace -t $parents[1]`;
        float $CVPin3[3] = `xform -q -worldSpace -t $parents[2]`;
        
        // first define the plane by its normal
        
        vector $pin1To2 = <<($CVPin1[0]-$CVPin2[0]),($CVPin1[1]-$CVPin2[1]),($CVPin1[2]-$CVPin2[2])>>;
        vector $pin1To3 = <<($CVPin1[0]-$CVPin3[0]),($CVPin1[1]-$CVPin3[1]),($CVPin1[2]-$CVPin3[2])>>; 
        vector $normal = cross ($pin1To2,$pin1To3);
        float $magNormal = mag ($normal);
        vector $unitNormal = unit ($normal);
 
        
        
        // next resolve the points onto the plane via the normal
        

        for ($cnt = 3; $cnt < ($numberOfCvs); $cnt++) {
                float $point[3] = `xform -q -worldSpace -t $parents[$cnt]`;
                vector $pointToPin1 = <<($point[0]-$CVPin1[0]),($point[1]-$CVPin1[1]),($point[2]-$CVPin1[2])>>;
                float $magPointToPin1 = mag ($pointToPin1);
                float $dotProduct = dot ( $normal,$pointToPin1);
                vector $moveVectorRel = -1.0 * $unitNormal * ($dotProduct / $magNormal);
                
                xform -worldSpace -r -t ($moveVectorRel.x) ($moveVectorRel.y) ($moveVectorRel.z) $parents[$cnt];
        }
}
