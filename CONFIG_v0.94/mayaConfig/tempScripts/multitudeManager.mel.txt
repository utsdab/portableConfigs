//
// Written by Andrew Chapman (chapman AT technolumiere.com) - 2003-2005
//
// Creates a new Multitude Manager editor that helps you when dealing with large numbers
// of objects within Maya
//
// For full docs see http://www.technolumiere.com/software/multitudeManager.html
//
// Get the latest version from http://www.technolumiere.com/software/mel/multitudeManager.mel
//

global proc vector makeVector(float $v1, float $v2, float $v3)
// this is just a helper for use when assigning to a triple, so you can do something like:
//   translate = makeVector(rand(-100,100), 0, rand(-50,50))
// ...instead of having to do each of translateX/Y/Z separately
{
  return <<$v1,$v2,$v3>>;
}

proc string[] multitudeManagerGetNodeList()
{
  string $affectsMode = `radioCollection -q -select multitudeManagerAffects`;

  string $list[];

  if ($affectsMode == "affectAll") {
    $list = `ls -long`;
  } else if ($affectsMode == "affectType") {
    string $type = `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeRL|affectTypeField`;
    $list = `ls -long -type $type`;
  } else if ($affectsMode == "affectSelType") {
    string $type = `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeSelRL|affectTypeField`;
    $list = `listRelatives -allDescendents -fullPath -type $type`;
  } else if ($affectsMode == "affectAllHier") {
    $list = `listRelatives -allDescendents -fullPath`;
  } else {
    $list = `ls -long -selection`;
  }

  if (size($list) == 0) {
    warning("No nodes being affected by Multitude Manager (check all/type/selection mode)");
  }

  return $list;
}

global proc multitudeManagerSelectPercent()
{
  multitudeManagerSavePreset("__LAST__");
  int $perc = `intSliderGrp -q -value multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|percentFL|cl|perc`;

  string $nodes[] = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }

  string $origSel[] = `ls -sl -l`;
  select -clear;

  // make sure 0 and 100 do exactly that
  if ($perc == 0) {
    // do nothing - selection has just been cleared
  } else if ($perc == 100) {
    select $nodes;
  } else {
    // setup progress bar (and setup to kill progressBar if script crashes out)
    global string $gMainProgressBar;
    progressBar -edit -beginProgress -isInterruptable true -status "Selecting percentage" -maxValue `size($nodes)` $gMainProgressBar;
    evalDeferred "progressBar -edit -endProgress $gMainProgressBar";
    // go through objects list, if our random number for a given one
    // is less than the percentage we want then select it
    int $numDone = 0;
    string $node;
    for($node in $nodes) {
      rand(0,1); rand(0,1); // mix it up a bit
      float $rand = rand(0,100);
      if ($rand < $perc) {
        select -add $node;
      }
      // update progress bar and check for cancel
      $numDone++;
      if(`progressBar -query -isCancelled $gMainProgressBar`) {
        warning("Random selection cancelled - original selection reinstated");
        select $origSel;
        return;
      }
      progressBar -edit -pr $numDone -status "Selecting percentage" $gMainProgressBar;
    }
  }

  radioCollection -e -select "affectSelection" multitudeManagerAffects;
  print("Selected " + size(`ls -selection`) + " nodes (from " + size($nodes) + ")\n");
}

proc int multitudeManagerRuleResult(int $ruleIndex, string $node)
{
  string $attrName = `textField -q -text    ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrName")`;
  int $equalMode   = `optionMenu -q -select ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|equalityMenu")`;

  int $indexerSize = size(match("\[[0-9]+\]$",$attrName)); // Spot array attributes and remove the indexer
  string $attrCmpName = substring ($attrName, 1, size($attrName) - $indexerSize);
  int $attrExists  = attributeExists($attrCmpName, $node);

  // we need to test the exists/not-exists ones first before querying the value of the attr
  if ($equalMode == 7) {
    if ($attrExists) {
      return true;
    } else {
      return false;
    }
  }
  if ($equalMode == 8) {
    if (!$attrExists) {
      return true;
    } else {
      return false;
    }
  }

  if (!$attrExists) {
    return false;
  }
  string $testVal  = `textField -q -text ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrVal")`;
  string $attrName = ($node + "." + $attrName);
  string $attrVal  = `getAttr $attrName`;
  //print("Testing " + $attrVal + " (" + $node + "." + $attrName + ") against " + $testVal + "\n");
  if (
    (($equalMode == 1)  && ($attrVal == $testVal))                   ||
    (($equalMode == 2)  && ($attrVal != $testVal))                   ||
    (($equalMode == 3)  && (match($testVal,$attrVal) != ""))         ||
    (($equalMode == 4)  && (match($testVal,$attrVal) == ""))         ||
    (($equalMode == 5)  && ((float)$attrVal > (float)$testVal))      ||
    (($equalMode == 6)  && ((float)$attrVal < (float)$testVal))      ||
    (($equalMode == 9)  && gmatch($attrVal,$testVal))                ||
    (($equalMode == 10) && !gmatch($attrVal,$testVal))
    )
  {
    return true;
  }

  // connected
  if (($equalMode == 11) && (`connectionInfo -isDestination $attrName`)) {
    return true;
  }
  if (($equalMode == 12) && (!`connectionInfo -isDestination $attrName`)) {
    return true;
  }

  // keyframed
  if (($equalMode == 14) && (!`connectionInfo -isDestination $attrName`)) {
    return true;
  }
  if ((($equalMode == 13) || ($equalMode == 14)) && (`connectionInfo -isDestination $attrName`)) {
    string $sourceAttr = `connectionInfo -sourceFromDestination $attrName`;
    string $sourceNode = `match ".+[.]" $sourceAttr`;
    $sourceNode = substring($sourceNode, 1, (size($sourceNode)-1));
    int $isKeyed = (objectType($sourceNode) == "animCurveTL");
    if (($equalMode == 13) && $isKeyed) {
      return true;
    }
    if (($equalMode == 14) && (!$isKeyed)) {
      return true;
    }
  }

  return false;
}

proc int[] getMultitudeManagerRuleIndices()
{
  int $indices[];

  string $kids[] = `columnLayout -q -childArray multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl`;
  string $kid;
  for($kid in $kids) {
    if ((`rowLayout -q -ex $kid`) && (match("ruleRow", $kid) != "")) {
      int $index = `substitute ".*ruleRow" $kid ""`;
      if ($index > 0) {
        $indices[size($indices)] = $index;
      }
    }
  }

  return $indices;
}

global proc multitudeManagerSelect(int $additiveMode)
{
  multitudeManagerSavePreset("__LAST__");
  int $numFound = 0;

  int $ruleIndices[] = getMultitudeManagerRuleIndices();

  string $nodes[] = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }

  string $origSel[] = `ls -sl -l`;
  if (!$additiveMode) {
    select -clear;
  }

  // setup progress bar (and setup to kill the progressBar if script crashes out)
  global string $gMainProgressBar;
  progressBar -edit -beginProgress -isInterruptable true -status "Selecting nodes" -maxValue `size($nodes)` $gMainProgressBar;
  evalDeferred "progressBar -edit -endProgress $gMainProgressBar";

  int $numDone = 0;
  string $node;
  for($node in $nodes) {
    // loop through the rule checks, AND/OR'ing them together for final result
    int $totalResult = multitudeManagerRuleResult(1, $node);
    int $i;
    for($i=1; $i<size($ruleIndices); $i++) {
      int $thisResult = multitudeManagerRuleResult($ruleIndices[$i], $node);
      int $logicMode = (int) `optionMenu -q -select ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndices[$i] + "|logicMenu")`;
      if ($logicMode == 1) {
        $totalResult = $totalResult && $thisResult;
      } else {
        $totalResult = $totalResult || $thisResult;
      }
    }

    // if all the rule checks pass then select the node
    if ($totalResult != 0) {
      select -add $node;
      $numFound++;
    }

    // update progress bar and check for cancel
    $numDone++;
    if(`progressBar -query -isCancelled $gMainProgressBar`) {
      warning("Node selection cancelled - original selection reinstated");
      select $origSel;
      return;
    }
    progressBar -edit -pr $numDone -status "Selecting nodes" $gMainProgressBar;
  }

  radioCollection -e -select "affectSelection" multitudeManagerAffects;
  print("Selected " + $numFound + " nodes (from " + size($nodes) + ")\n");
}

global proc multitudeManagerRemoveSelectRule(int $index)
{
  deleteUI ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $index);
}

global proc multitudeManagerRemoveAllRules()
{
  int $ruleIndices[] = getMultitudeManagerRuleIndices();
  for($ruleIndex in $ruleIndices) {
    multitudeManagerRemoveSelectRule($ruleIndex);
  }
}

global proc multitudeManagerAddSelectRule()
{
  setParent multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl;

  int $newIndex=1;
  while(`rowLayout -q -ex ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $newIndex)`) {
    $newIndex++;
  }

  rowLayout -numberOfColumns 5 -cw5 65 135 130 140 80 ("ruleRow" + $newIndex);
    if ($newIndex == 1) {
      text -label "";
    } else {
      optionMenu -label "" -width 70 logicMenu;
        menuItem -label "and";
        menuItem -label "or";
      setParent -menu ..;
    }
    textField -text "variantType" -width 130 attrName;
    optionMenu -label "" -width 120 -cc "multitudeManagerHandleSens" equalityMenu;
      menuItem -data 1  -label "equals";
      menuItem -data 2  -label "not equals";
      menuItem -data 3  -label "includes";
      menuItem -data 4  -label "not includes";
      menuItem -data 5  -label "greater than";
      menuItem -data 6  -label "less than";
      menuItem -data 7  -label "exists";
      menuItem -data 8  -label "not exists";
      menuItem -data 9  -label "wildcard";
      menuItem -data 10 -label "not wildcard";
      menuItem -data 11 -label "is connected";
      menuItem -data 12 -label "not connected";
      menuItem -data 13 -label "is keyframed";
      menuItem -data 14 -label "not keyframed";
    setParent -menu ..;
    textField -text "SP_AR" -width 140 attrVal;
    if ($newIndex == 1) {
      text -label "";
    } else {
      button -label "Remove Rule" -c ("multitudeManagerRemoveSelectRule(" + $newIndex + ")");
    }
  setParent ..;

  text -label "";

  if (`rowLayout -q -ex multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|rlButtons`) {
    deleteUI multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|rlButtons;
  }
  rowLayout -numberOfColumns 3 -cw3 70 112 210 rlButtons;
    button -label " Add Rule " -c multitudeManagerAddSelectRule;
    button -label " Select Matching "           -c "multitudeManagerSelect(0)";
    button -label " Add Matching to Selection " -c "multitudeManagerSelect(1)";
  setParent ..;

  if (`text -q -ex multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|widthSpacer`) {
    deleteUI multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|widthSpacer;
  }
  text -height 1 -width 548 -label "" widthSpacer; // hack - spacing out width of panel

  multitudeManagerHandleSens();
}

global proc multitudeManagerSetAttr()
{
  multitudeManagerSavePreset("__LAST__");

  string $attrName = `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrName`;
  string $attrVal  = `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrVal`;
  //int    $useExpr  = `checkBox -q -value multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|evalExpr`;
  string $setAttrMode = `radioCollection -q -select multitudeManagerSetAttrMode`;
  string $listEntries[];
  string $listText = `scrollField -q -text "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl3|attrList"`;
  tokenize($listText, "\n", $listEntries);

  string $origSel[] = `ls -sl -l`;
  string $nodes[]   = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }

  // setup progress bar (and setup to kill progressBar if script crashes out)
  global string $gMainProgressBar;
  progressBar -edit -beginProgress -isInterruptable true -status "Setting attributes" -maxValue `size($nodes)` $gMainProgressBar;
  evalDeferred "progressBar -edit -endProgress $gMainProgressBar";

  int $numDone = 0;
  string $node;
  for($node in $nodes) {
    int $indexerSize = size(match("\[[0-9]+\]$",$attrName)); // Spot array attributes and remove the indexer
    string $attrCmpName = substring ($attrName, 1, size($attrName) - $indexerSize);
    if (!attributeExists($attrCmpName, $node)) {
      warning("Can't set attribute " + $attrName + " on node " + $node + " - attribute not found");
      continue;
    }
    string $attrVal2 = $attrVal;
    if ($setAttrMode == "byExpr") {
      catch($attrVal2 = eval($attrVal2));
    }
    if ($setAttrMode == "byList") {
      rand(0,size($listEntries)*100); rand(0,size($listEntries)*100); rand(0,size($listEntries)*100);
      int $randVal = rand(0,size($listEntries)*100) / 100;
      $attrVal2 = $listEntries[$randVal];
    }
    // this is a pain - we need to make different calls to setAttr depending
    // on what the attribute type is that we're setting
    string $attrType = `getAttr -type ($node + "." + $attrName)`;
    if ($attrType == "string") {
      setAttr -type "string" ($node + "." + $attrName) ($attrVal2);
    } else if ($attrType == "") {
      warning("Assuming " + $node + "." + $attrName + " is a string attribute - Maya says it has no type (appears to be a Maya bug)");
      setAttr -type "string" ($node + "." + $attrName) ($attrVal2);
    } else if (($attrType == "short") || ($attrType == "long") || ($attrType == "enum") || ($attrType == "bool") || ($attrType == "byte")) {
      setAttr ($node + "." + $attrName) ((int) ($attrVal2));
    } else if (($attrType == "float") || ($attrType == "double") || ($attrType == "doubleAngle") || ($attrType == "doubleLinear") || ($attrType == "time")) {
      setAttr ($node + "." + $attrName) ((float) ($attrVal2));
    } else if (($attrType == "long2") || ($attrType == "float2") || ($attrType == "double2")) {
      eval("setAttr -type float2 (\"" + $node + "." + $attrName + "\") " + $attrVal2);
    } else if (($attrType == "long3") || ($attrType == "float3") || ($attrType == "double3")) {
      eval("setAttr -type float3 (\"" + $node + "." + $attrName + "\") " + $attrVal2);
    } else if (($attrType == "matrix")) {
      eval("setAttr -type matrix (\"" + $node + "." + $attrName + "\") " + $attrVal2);
    } else {
      warning("Setting attribute of unknown type (" + $attrType + "). Can only currently set bool/enum/short/float/string");
      return;
    }

    // update progress bar and check for cancel
    $numDone++;
    if(`progressBar -query -isCancelled $gMainProgressBar`) {
      warning("Setting attributes cancelled - attributes partially set");
      select $origSel;
      return;
    }
    progressBar -edit -pr $numDone -status "Setting attributes" $gMainProgressBar;
  }

  print("Finished setting attributes\n");
}

global proc multitudeManagerRunExpression()
{
  multitudeManagerSavePreset("__LAST__");

  string $expr = `scrollField -q -text "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|exprFL|cl|expressionField"`;
  //$expr = `substitute "\n" $expr " "`;

  string $origSel[] = `ls -sl -l`;
  string $nodes[] = multitudeManagerGetNodeList();
  if (size($nodes) == 0) {
    return;
  }

  // setup progress bar
  global string $gMainProgressBar;
  progressBar -edit -beginProgress -isInterruptable true -status "Running expressions" -maxValue `size($nodes)` $gMainProgressBar;
  // kill progressBar if script crashes out
  evalDeferred "progressBar -edit -endProgress $gMainProgressBar";

  int $numDone = 0;
  string $node;
  for($node in $nodes) {
    string $parents[] = `listRelatives -fullPath -parent $node`;
    string $shapes[]  = `listRelatives -fullPath -shapes $node`;

    // if we're looking at a shape node, then $shape will be an empty string
    // to void confusion copy $node to $shape
    if ((size($shapes) == 0) || ($shapes[0] == "")) {
      $shapes[0] = $node;
    }

    // build up definitions for the available variables
    string $preExpr = "";
    $preExpr += ("string $node   = \"" + $node       + "\";\n");
    $preExpr += ("string $parent = \"" + $parents[0] + "\";\n");
    $preExpr += ("string $shape  = \"" + $shapes[0]  + "\";\n");

    // build up the final thing to run
    // we wrap it in curly-brackets so that any variable definitions are locally scoped
    string $cmd = ("{\n" + $preExpr + $expr + ";\n}");
    //print("Running: \n" + $cmd + "\n");

    catch(eval($cmd));

    // update progress bar and check for cancel
    $numDone++;
    if(`progressBar -query -isCancelled $gMainProgressBar`) {
      warning("Running expressions cancelled - expressions run on some nodes");
      select $origSel;
      return;
    }
    progressBar -edit -pr $numDone -status "Running expressions" $gMainProgressBar;
  }

  print("Finished running expressions\n");
}

global proc multitudeManagerHandleSens()
{
  // disable node type field unless that is the current mode of affectation
  int $useType1 = `radioButton -q -select "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeRL|affectType"`;
  textField -e -enable $useType1 "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeRL|affectTypeField";

  int $useType2 = `radioButton -q -select "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeSelRL|affectSelType"`;
  textField -e -enable $useType2 "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeSelRL|affectTypeField";

  // disable the attribute value field in select rules, if they are set to exists/not-exists
  int $ruleIndices[] = getMultitudeManagerRuleIndices();
  int $ruleIndex;
  for($ruleIndex in $ruleIndices) {
    int $mode = `optionMenu -q -select ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|equalityMenu")`;
    if (($mode == 7) || ($mode == 8) || ($mode == 11) || ($mode == 12) || ($mode == 13) || ($mode == 14)) {
      textField -e -enable 0 ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrVal");
    } else {
      textField -e -enable 1 ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrVal");
    }
  }

  // handle enable/disable for the different set attr modes
  string $setAttrMode = `radioCollection -q -select multitudeManagerSetAttrMode`;
  if (`textField -q -exists "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrVal"`) {
    textField -e -enable ($setAttrMode != "byList") "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrVal";
  }
  if (`textField -q -exists "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl3|attrList"`) {
    textField -e -enable ($setAttrMode == "byList") "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl3|attrList";
  }
}

proc string makeTokenValue(string $token, string $value)
{
  int $size = size($value);
  return ($token + ":" + $size + "=" + $value);
}

proc string getTokenValue(string $token, string $tokenValueString)
{
  string $value = `match ($token + ":[0-9]+=.*") $tokenValueString`;
  if ($value == "") {
    return "";
  }
  int $tokenSize = size($token);
  string $sizeString = match("[^=]+",substring($value,($tokenSize+2),size($value)));
  int $size = (int)($sizeString);
  int $sizeofsize = size($sizeString);
  int $index1 = (($tokenSize+2)+$sizeofsize+1);
  int $index2 = (($tokenSize+2)+$sizeofsize+$size);
  $value = substring($value,$index1,$index2);
  return $value;
}

global proc multitudeManagerSavePreset(string $presetName)
{
  string $presetValue = "";

  $presetValue = $presetValue + makeTokenValue("affects", `radioCollection -q -select multitudeManagerAffects`) + ";";
  $presetValue = $presetValue + makeTokenValue("affectsType1", `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeRL|affectTypeField`) + ";";
  $presetValue = $presetValue + makeTokenValue("affectsType2", `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeSelRL|affectTypeField`) + ";";

  $presetValue = $presetValue + makeTokenValue("percent", `intSliderGrp -q -value multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|percentFL|cl|perc`) + ";";

  int $ruleIndices[] = getMultitudeManagerRuleIndices();
  int $ruleIndex;
  int $newIndex = 1;
  for($ruleIndex in $ruleIndices) {
    $presetValue = $presetValue + makeTokenValue(("rule" + $newIndex + "Attr"), `textField  -q -text   ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrName")`) + ";";
    $presetValue = $presetValue + makeTokenValue(("rule" + $newIndex + "Mode"), `optionMenu -q -select ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|equalityMenu")`) + ";";
    $presetValue = $presetValue + makeTokenValue(("rule" + $newIndex + "Val"),  `textField  -q -text   ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|attrVal")`) + ";";
    if ($ruleIndex > 1) {
      $presetValue = $presetValue + makeTokenValue(("rule" + $newIndex + "Log"),  `optionMenu -q -select ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $ruleIndex + "|logicMenu")`) + ";";
    }
    $newIndex++;
  }

  $presetValue = $presetValue + makeTokenValue("setAttr",  `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrName`) + ";";
  $presetValue = $presetValue + makeTokenValue("setVal",   `textField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrVal`) + ";";
  $presetValue = $presetValue + makeTokenValue("setList",  `scrollField -q -text "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl3|attrList"`) + ";";
  $presetValue = $presetValue + makeTokenValue("setMode",  `radioCollection -q -select multitudeManagerSetAttrMode`) + ";";

  $presetValue = $presetValue + makeTokenValue("expr", `scrollField -q -text multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|exprFL|cl|expressionField`) + ";";

  $presetValue = $presetValue + makeTokenValue("tab", `tabLayout -q -selectTab multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs`) + ";";

  optionVar -sv ("mmPreset_" + $presetName) $presetValue;
}

global proc multitudeManagerSavePresetGUI()
{
  string $result = `promptDialog
    -title "Preset Name"
    -message "Enter Name:"
    -button "OK" -button "Cancel"
    -defaultButton "OK" -cancelButton "Cancel"
    -dismissString "Cancel"`;

  if ($result == "OK") {
    string $name = `promptDialog -query -text`;
    multitudeManagerSavePreset($name);
  }
}

global proc multitudeManagerSetFromPreset(string $presetName)
{
  if (`optionVar -ex ("mmPreset_" + $presetName)` == 0) {
    warning("multitudeManagerSetFromPreset() error: optionVar " + "mmPreset_" + $presetName + " not found");
    return;
  }
  string $presetValue = `optionVar -q ("mmPreset_" + $presetName)`;

  string $affects      = getTokenValue("affects",      $presetValue);
  string $affectsType1 = getTokenValue("affectsType1", $presetValue);
  string $affectsType2 = getTokenValue("affectsType2", $presetValue);
  radioCollection -e -select $affects multitudeManagerAffects;
  textField -e -text $affectsType1 multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeRL|affectTypeField;
  textField -e -text $affectsType2 multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|typeSelRL|affectTypeField;

  int $percent = (int)getTokenValue("percent", $presetValue);
  intSliderGrp -e -value $percent multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|percentFL|cl|perc;

  int $i=1;
  multitudeManagerRemoveAllRules();
  for(;;$i++) {
    string $ruleAttr = getTokenValue(("rule" + $i + "Attr"), $presetValue);
    if ($ruleAttr == "") {
      break;
    }
    multitudeManagerAddSelectRule();
    int $ruleMode = (int)getTokenValue(("rule" + $i + "Mode"), $presetValue);
    string $ruleVal =    getTokenValue(("rule" + $i + "Val"),  $presetValue);
    textField  -e -text $ruleAttr   ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $i + "|attrName");
    optionMenu -e -select $ruleMode ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $i + "|equalityMenu");
    textField  -e -text $ruleVal    ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $i + "|attrVal");
    if ($i > 1) {
      int $ruleLog = (int)getTokenValue(("rule" + $i + "Log"), $presetValue);
      optionMenu -e -select $ruleLog ("multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|selectFL|cl|ruleRow" + $i + "|logicMenu");
    }
  }

  string $setAttr  = getTokenValue("setAttr", $presetValue);
  string $setValue = getTokenValue("setVal",  $presetValue);
  string $setList  = getTokenValue("setList", $presetValue);
  string $setMode  = getTokenValue("setMode", $presetValue);
  textField   -e -text $setAttr  "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrName";
  textField   -e -text $setValue "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl|attrVal";
  scrollField -e -text $setList  "multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|setAttrFL|cl|rl3|attrList";
  if ($setMode != "") {
    radioCollection -e -select $setMode multitudeManagerSetAttrMode;
  }

  string $expr = getTokenValue("expr", $presetValue);
  scrollField -e -text $expr multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs|exprFL|cl|expressionField;

  string $tab = getTokenValue("tab", $presetValue);
  if ($tab != "") {
    tabLayout -e -selectTab $tab multitudeManagerWindow|multitudeManagerMenuBar|tsl|tcl|tabs;
  }

  multitudeManagerHandleSens();
}

global proc multitudeManagerBuildMenu()
{
  menu -e -deleteAllItems multitudeManagerMenu;
  setParent -menu multitudeManagerMenu;

  string $opt;
  string $opts[] = `optionVar -l`;
  int $hasPresets = 0;

  menuItem -label "Load" -subMenu 1 loadMenu;
  for($opt in $opts) {
    if (match("mmPreset_",$opt) != "") {
      string $name = substring($opt,10,size($opt));
      if ($name != "__LAST__") {
        menuItem -label $name -c ("multitudeManagerSetFromPreset(\"" + $name + "\")");
        $hasPresets = 1;
      }
    }
  }
  setParent -menu ..;

  menuItem -label "Save" -c "multitudeManagerSavePresetGUI";

  menuItem -label "Delete" -subMenu 1 -enable $hasPresets deleteMenu;
  for($opt in $opts) {
    if (match("mmPreset_",$opt) != "") {
      string $name = substring($opt,10,size($opt));
      if ($name != "__LAST__") {
        menuItem -label $name -c ("optionVar -rm \"mmPreset_" + $name + "\"");
        $hasPresets = 1;
      }
    }
  }
  setParent -menu ..;

  menuItem -e -enable $hasPresets multitudeManagerWindow|multitudeManagerMenuBar|multitudeManagerMenu|loadMenu;
  menuItem -e -enable $hasPresets multitudeManagerWindow|multitudeManagerMenuBar|multitudeManagerMenu|deleteMenu;
}

global proc multitudeManagerAbout()
{
  if(`window -ex multitudeManagerAboutWindow`) {
    deleteUI -window multitudeManagerAboutWindow;
  }

  window -t "About Multitude Manager" -w 300 -h 140 multitudeManagerAboutWindow;
    rowColumnLayout -nc 1 -cw 1 300 multitudeManagerAboutLayout;
      text -align "center" -l "";
      text -align "center" -l "Multitude Manager" -fn "boldLabelFont";
      text -align "center" -l "";
      text -align "center" -l "Written By Andrew Chapman";
      text -align "center" -l "Copyright 2003-2005";
      text -align "center" -l "www.technolumiere.com";

  showWindow multitudeManagerAboutWindow;
}


global proc multitudeManager()
{
  if (`window -q -exists multitudeManagerWindow`) {
    deleteUI -window multitudeManagerWindow;
  }

  window  -title "Multitude Manager - v1.3a" -topLeftCorner 192 519 -widthHeight 600 424 -menuBar 0 multitudeManagerWindow;
  
    menuBarLayout -mbv 1 multitudeManagerMenuBar;
      menu -p multitudeManagerMenuBar -label "Presets" -postMenuCommand "multitudeManagerBuildMenu" multitudeManagerMenu;
      menu -p multitudeManagerMenuBar -label "Help" multitudeManagerAboutMenu;
      menuItem -label "About" -c multitudeManagerAbout;
      menuItem -label "Online Docs" -c "showHelp -absolute \"http://www.technolumiere.com/software/multitudeManager.html\"";
    setParent ..;

    scrollLayout -p multitudeManagerMenuBar tsl;
      columnLayout -columnOffset "left" 4 tcl;
    
        text -label "Affects Nodes:";
        radioCollection multitudeManagerAffects;
        radioButton -label "All" -select affectAll;
        rowLayout -nc 2 typeRL;
          radioButton -label "All of type" -cc multitudeManagerHandleSens affectType;
          textField -width 100 -text "joint" affectTypeField;
        setParent ..;
        rowLayout -nc 3 typeSelRL;
          radioButton -label "All of type" -cc multitudeManagerHandleSens affectSelType;
          textField -width 100 -text "joint" affectTypeField;
          text -label " under selected hierarchy";
        setParent ..;
        radioButton -label "All under selected hierarchy" affectAllHier;
        radioButton -label "Selection only" affectSelection;
        
        radioCollection multitudeManagerSetAttrMode;
        
        tabLayout tabs;
        
          frameLayout -label "Select Random Percentage of Nodes" -mh 5 percentFL;
            columnLayout cl;
              intSliderGrp -label "Select %: " -field true -min 0 -max 100 -value 30 perc;
              text -label "";
              button -label " Select " -c "multitudeManagerSelectPercent";
              text -width 548 -label ""; // hack - spacing out width of panel
            setParent ..;
          setParent ..;
        
          frameLayout -label "Select Nodes by Attributes" -mh 5 selectFL;
            columnLayout cl;
              multitudeManagerAddSelectRule();
            setParent ..;
          setParent ..;
        
          frameLayout -label "Set Attribute" -mh 5 setAttrFL;
            columnLayout cl;
              rowLayout -nc 4 -cw4 10 160 20 254 rl;
                text -label "";
                textField -text "translateY" -width 160 attrName;
                text -label " = ";
                textField -text "3.14159265" -width 358 attrVal;
              setParent ..;
              rowLayout -nc 3 -cw3 170 20 254 rl3;
                columnLayout -co "left" 10;
                  text -label " " -height 15;
                  radioButton -collection "multitudeManagerSetAttrMode" -cc multitudeManagerHandleSens -label "By Value" -select byValue;
                  radioButton -collection "multitudeManagerSetAttrMode" -cc multitudeManagerHandleSens -label "By MEL Expression" byExpr;
                  radioButton -collection "multitudeManagerSetAttrMode" -cc multitudeManagerHandleSens -label "By Random List" byList;
                  text -label " " -height 15;
                  button -label " Set Attributes " -c "multitudeManagerSetAttr";
                setParent ..;
                text -label "";
                scrollField -width 358 -height 116 -text "one\ntwo\nthree\nfour" attrList;
              setParent ..;
        
              text -width 548 -label ""; // hack - spacing out width of panel
            setParent ..;
          setParent ..;
        
          frameLayout -label "Run Expression on Nodes" -mh 5 exprFL;
            columnLayout cl;
              text -label "Variables Available: $node $parent $shape";
              string $defaultExpr = "print(\"Node is called: \" + $node + \"\\n\");\n\nint $clip = getAttr($node + \".currentClip\");\nprint(\"Current clip is: \" + $clip + \"\\n\");";
              scrollField -wordWrap false -text $defaultExpr -width 548 -height 140 expressionField;
              button -label " Run Expression " -c "multitudeManagerRunExpression";
            setParent ..;
          setParent ..;
        
        setParent ..;
  
  tabLayout -e -tabLabel percentFL "Select %" -tabLabel selectFL "Select by Attribute" -tabLabel setAttrFL "Set Attribute" -tabLabel exprFL "Run Expression" -width 500 tabs;
  
  // restore any saved settings
  if (`optionVar -q "mmPreset___LAST__"`) {
    multitudeManagerSetFromPreset("__LAST__");
  }
  
  // disable irrelevant controls and show window
  multitudeManagerHandleSens();
  showWindow multitudeManagerWindow;
  
  // hack to have it refresh itself to proper width
  int $tab = `tabLayout -q -selectTabIndex tabs`;
  tabLayout -e -selectTabIndex 2 tabs;
  tabLayout -e -selectTabIndex $tab tabs;
}
