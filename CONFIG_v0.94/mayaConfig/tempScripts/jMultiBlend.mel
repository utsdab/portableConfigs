/*
  :beginHead
  :author     			:julian 
  :support     			:julian 
  :type     			:mel
  :title     			:jMultiBlend
  :description			:make many weighted blends from two inputs (triples)
  :category
  :usage
  :return
  :url
  :endHead

  Copyright (C) 2003 The Moving Picture Company
*/


proc float distBetween(string $object1,string  $object2){
	float $p1[] = `xform -q -ws -rp $object1`;
	float $p2[] = `xform -q -ws -rp $object2`;
	vector $diff = <<($p1[0] -$p2[0]),($p1[1] -$p2[1]),($p1[2] -$p2[2])>>;
	return mag($diff);
}

global proc jMultiBlend (string $start, string $end, string $rest[]) {
	if (!`pluginInfo -q  -l  "jMultiBlend"`) loadPlugin "jMultiBlend";
	string $cu = `currentUnit -q -a`;
	currentUnit -a rad;
	//string $selected[] = `ls -sl`;
	// selected[0] is first input
	// selected[1] is second input
	// the rest are targets
	string $blendNode = `createNode multiBlend`;
	connectAttr -f ( $start + ".rotate") ($blendNode + ".input1");
	connectAttr -f ( $end + ".rotate") ($blendNode + ".input2");
	int $j;
	for ($r  in $rest) {
		float $fromStart = distBetween($r,$start );
		float $fromEnd = distBetween($r,$end );
		float $totalSpan = ($fromStart + $fromEnd);
		connectAttr ($blendNode + ".output["+$j+"]")  ($r + ".rotate");
		float $bl = ($fromEnd / $totalSpan);
		setAttr ($blendNode + ".blender["+$j+"]")  $bl $bl $bl ;
		$j++;
	} 
	currentUnit -a $cu;
}
