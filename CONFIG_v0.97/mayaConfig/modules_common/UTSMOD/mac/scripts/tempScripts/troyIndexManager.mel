//  matt gidney responsible for this drivel
//
// to do :   	show and edit transitions in window ...done
//		dont go past last index number  ... done
//		if the directory doesnt exist make it
//		increment through last search list with ++ --
//		button to load index onto currently selected agents
//
proc string[] getTransitionFrames(string $currentFileName){
	string $blendTransition = system(("head -60 " + $currentFileName + " | grep \".*TRANSITION:\" | sed -e  \"s/^.*://\" "));
	// get transition info
	string $blendTransitions[];
	tokenizeList($blendTransition,$blendTransitions);
	int $numTransitions = size($blendTransitions)/2;

	string $transitionFrame[];
	for ($i=0;$i<$numTransitions;$i++) $transitionFrame[$i] = $blendTransitions[$i*2];
	return $transitionFrame;
	}
proc string[] getTransitionRange(string $currentFileName){
	string $blendTransition = system(("head -60 " + $currentFileName + " | grep \".*TRANSITION:\" | sed -e  \"s/^.*://\" "));
	// get transition info
	string $blendTransitions[];
	tokenizeList($blendTransition,$blendTransitions);
	int $numTransitions = size($blendTransitions)/2;

	string $transitionRange[];
	for ($i=0;$i<$numTransitions;$i++) $transitionRange[$i] = $blendTransitions[($i*2)+1];
	return $transitionRange;
	}
global proc doubleClickCommand() {
	//print ("double click\n");
	}
global proc loadIndexOntoSelectedAgents() {
	// put the current index onto the currently selected agents
	int $index[] =  `intFieldGrp -q -value indexNo_intFieldGrp`;
	string $selected[]= `ls -sl`;
	select -hi;
	string $selectedAgent[] = `ls -sl -type agent`;
	int $num = size($selectedAgent);
	for ($each in $selectedAgent) {
		setAttr ($each + ".clipStack[0]") $index[0];
	}
	print ("Put performance "+ $index[0] + " onto " + $num + " agents  ... a chapman request, satisfied.\n");
	select -r $selected;
	}
global proc selectCommand() {
	string $currentFile = `textFieldGrp -q -tx str_textFieldGrp`;
	int $indexClicked[] = `textScrollList -q -sii transitionList`;
	//print ("debug\tindexClicked selectCommand\t"+$indexClicked[0]+"\n");
	string $transitionFrames[] =`getTransitionFrames($currentFile)`;
	string $transitionRange[] =`getTransitionRange($currentFile)`;
	if (`size($indexClicked)`){
		textFieldGrp -e -tx $transitionFrames[$indexClicked[0]-1] transitionCF;
		textFieldGrp -e -tx $transitionRange[$indexClicked[0]-1] transitionR;
		} 
	else {
		textFieldGrp -e -tx "" transitionCF;
		textFieldGrp -e -tx "" transitionR;
		}
	}
proc editFile(string $currentFile, int $transition, string $replaceString, int $mode) {
	// if mode is 0 then update a transition
	// if mode is 1 then add transition after last
	// if mode 2 then delete
	$fileId=`fopen $currentFile "r"`;
	string $nextLine = `fgetline $fileId`;
	//strip off the new line character
	int $sizeLine = size($nextLine);
	$nextLine = `substring $nextLine 1 ($sizeLine-1)`;
	//print("debug>>>>\t"+$currentFile+"\t"+$transition+"\t"+$replaceString+"\t"+$mode+"\n");
	string $fileContents[];
	// read in the file to $fileContents[] ******
	int $i=0;
	while ( size( $nextLine ) > 0 ) {
                $fileContents[$i] =  ( $nextLine );
                $nextLine = `fgetline $fileId`;
                // strip off the new line character
                int $sizeLine = size($nextLine);
                if ($sizeLine > 0) $nextLine = `substring $nextLine 1 ($sizeLine-1)`;
                $i++;
 		}
	int $fileSize = `size($fileContents)`;
	string $fileToWrite[];
	int $valid = 1;
	switch ($mode){
		case 0:
			// edit existing transition
			int $hitIndex=0;
			int $counter = 0;
			for ( $i =0;$i<$fileSize ;$i++) {
				if ($i==$transition) $hitIndex = $i;
				}
			$fileContents[$hitIndex] = $replaceString;
			$fileToWrite =$fileContents;
			break;
		case 1:
			// add new transition
			string $newFileContents[];
			$newFileContents[0]=$fileContents[0];
			$newFileContents[1]=$replaceString;
			for ($i=2;$i<($fileSize+1);$i++) $newFileContents[$i]=$fileContents[$i-1];
			$fileToWrite =$newFileContents;
			break;
		case 2:
			// delete transition
			if ($transition) {
				int $counter = 0;
				int $i = 0;
				for  ( $i=0;$i < $fileSize;$i++) {
					$fileToWrite[$counter]=$fileContents[$i];
					if ($i==$transition) $counter--;
					$counter++;
					}
				}
			else $valid = 0;
			break;
		}
	fclose $fileId;
	if (`filetest -w $currentFile` && $valid ==1) {
		$fileId=`fopen $currentFile "w"`;
		for ($eachline in $fileToWrite) fprint $fileId ($eachline + "\n");
		fclose $fileId;
		} 
	else print ("warning file not writeable\n");
	withIndexGetString(0);
	}
global proc updateTransition(int $mode) {
	//get the values of new transitions
	string $centreFrameString = `textFieldGrp -q -tx transitionCF`;
	int $centreFrame = 0;

	if (!size($centreFrameString)) $centreFrame = 0;
	else $centreFrame=int($centreFrameString);

	string $rangeString = (`textFieldGrp -q -tx transitionR`);
	int $range = 0;

	if (!size($rangeString)) $range = 0;
	else $range=int($rangeString);
	
	//get the values of old transitions
	string $currentFile = `textFieldGrp -q -tx str_textFieldGrp`;
	int $indexClicked[] = `textScrollList -q -sii transitionList`;
	//print ("debug\tindexClicked updateTransition\t"+$indexClicked[0]+"\n");
	// test the file
	string $currentFile = `textFieldGrp -q -tx str_textFieldGrp`;
	if (!`filetest -f $currentFile`) {
		print ("**** the file doesnt exist - reload using Get String\n");
		return;
		}
	//edit file
	string $replaceTransition = ("# TRANSITION:  " +$centreFrame + " " + $range);
	editFile($currentFile, $indexClicked[0],$replaceTransition, $mode);
	}

proc string aniPath() {
	string $ani;
	if (`objExists mocapDataLibrary1.aniDirectory`) $ani = `getAttr mocapDataLibrary1.aniDirectory`;
	else $ani = "/job/troy/master/ani";
	return $ani;
	}

proc string libraryName() {
	string $libraryName = (`aniPath` + "/mocapLibraryMaster");
	if (!`filetest -f $libraryName`) {
		print("\tWARNING:\tNo Library file found ... making a brand spanking new empty one\n");
		system("touch " + `aniPath` + "/mocapLibraryMaster");
		}
	return  $libraryName;
	}	
proc string[] getTokens(string $inString, string $tokenSymbol) {
	string $tokens[];
        tokenize $inString $tokenSymbol $tokens;
	return $tokens;
	}
proc string getFileBit(string $inString) {
	string $Bits[] = getTokens($inString," ");
	string $fileBit = $Bits[1];
	return $fileBit;
	}
proc int getIndexBit(string $inString) {
	string $Bits[] = getTokens($inString," ");
	int $indexBit = $Bits[0];
	return $indexBit;
	}
proc string gotoTopLevel() {
	string $origDirectory = `pwd`;
	chdir (`aniPath`);
	return  $origDirectory;
	}
proc string[] readCurrentLibraryContents() {
	// read in current files contents
	$libraryFile=`libraryName`;
	$fileId=`fopen $libraryFile "r"`;
	string $nextLine = `fgetline $fileId`;
	// strip off the new line character
	int $sizeLine = size($nextLine);
	$nextLine = `substring $nextLine 1 ($sizeLine-1)`;
	int $counter = 0;
	string $libraryContents[];
	while ( size( $nextLine ) > 0 ) {
		$libraryContents[$counter] =  ( $nextLine );
		$nextLine = `fgetline $fileId`;
		// strip off the new line character
		int $sizeLine = size($nextLine);
		if ($sizeLine >0) $nextLine = `substring $nextLine 1 ($sizeLine-1)`;
		$counter++;
		}
	fclose $fileId;
	return $libraryContents;
	}
global proc withIndexGetString(int $inc) {
	//  takes an index  and looks up the library file
	//  looks up current lib node if exists
	//  compares both are same - does sensible things
	//  returns string
	optionVar -iv "lastIndex" $inc;

	int $value[] = `intFieldGrp -q -value indexNo_intFieldGrp`;
	int $index = $value[0];
	
	string $libraryContents[] = `readCurrentLibraryContents`;
	
	$index = $index+$inc;
	int $max = size($libraryContents)-1;
	$index = min($index,$max);
	if ($index<0) $index = 0;

	optionVar -iv "lastIndex" $index;

	string $mocapLibraryFile = `libraryName`;
	string $currentFileName = `getFileBit($libraryContents[$index])`;
	int $max = size($libraryContents);

	textFieldGrp -e -tx $currentFileName str_textFieldGrp;
	
	selectCommand;

	int $noFrames = system(("gawk '/^[0-9].*/' "+$currentFileName+ " | wc -l"));
	textFieldGrp -e -tx $noFrames noFrames_intFieldGrp;

	
	string $rightWeapons = system(("head -60 " + $currentFileName + " | grep \"^R_\""));
	string $rightWeapon[];
	tokenizeList($rightWeapons, $rightWeapon);
	textFieldGrp -e -tx $rightWeapon[0] rightWeapon_textFieldGrp;

	string $leftWeapons = system(("head -60 " + $currentFileName + " | grep \"^L_\""));
	string $leftWeapon[];
	tokenizeList($leftWeapons, $leftWeapon);
	textFieldGrp -e -tx $leftWeapon[0] leftWeapon_textFieldGrp;

	print ($index + "\t"+$rightWeapon[0]+"\t" +$leftWeapon[0] + "\t" +$noFrames+"\t" +  $currentFileName);
	intFieldGrp -e -v1 $index indexNo_intFieldGrp;

	// get transition info
	textScrollList -e -ra transitionList;
	string $transitionFrame[]= getTransitionFrames($currentFileName);
	string $transitionRange[]= getTransitionRange($currentFileName);

	int $numTransitions = size($transitionFrame);
	for ($i=0;$i<$numTransitions;$i++) {
		print ("\t" + $transitionFrame[$i] + ":" +$transitionRange[$i]+ "\t");
		textScrollList -e -w 100 -h 80 -append ($transitionFrame[$i] + ":" +$transitionRange[$i]) transitionList;
		}
	print("\n");
	}

global proc expandString() {
	// takes a string which might be part of the name and tries to uniquely find the index number it matches

	string $libraryContents[] = `readCurrentLibraryContents`;
	string $searchString = `textFieldGrp -q -tx str_textFieldGrp`;
	optionVar -sv "searchString" $searchString;
	string $searchResults[];
	print ("Attempting to find a match for ....." + $searchString + "\n");
	int $i = 0;
	//clear $searchResults;
	string $lastFound;
	for ($indexEntry in $libraryContents) {
		if (`gmatch $indexEntry ("*" + $searchString + "*")`) {
			print($searchString +" index "+ $indexEntry + "\n");
			$searchResults[$i] = $indexEntry;
			$i++;
			$lastFound = $indexEntry;
			}
		}
	if ($i>1) {
		string $message = ("Found  "+$i + " hit ++ or -- to go thru them");
		int $index = `getIndexBit($lastFound)`;
		textFieldGrp -e -tx $message str_textFieldGrp;
		intFieldGrp -e -v1 $index indexNo_intFieldGrp;
		}
	if ($i==1) {
		string $message = `getFileBit($lastFound)`;
		int $index = `getIndexBit($lastFound)`;
		print("\tindex is " + $index+ "\n");
		textFieldGrp -e -tx $message str_textFieldGrp;
		intFieldGrp -e -v1 $index indexNo_intFieldGrp;
		$searchResults[0] = $index;
		}
	if ($i<1) textFieldGrp -e -tx "none found - can use wildcards * ?" str_textFieldGrp;
	optionVar -ca "searchResults";
	for ($each in $searchResults) optionVar -sva "searchResults" $each;
	optionVar -iv "searchIndex" 1;
	}

global proc throughList(int $mode) {
	if (`optionVar -exists "searchResults"`) {
		switch ($mode){
			case 0:
				if (!`optionVar -exists "searchIndex"`) $ind = 1;
				else $ind = int(`optionVar -q "searchIndex"`);
				if ($ind<=0) $ind=1;

				string $searchResults[] = `optionVar -q "searchResults"`;
				$list = int(`optionVar -as "searchResults"`);

				int $loopIndex = fmod($ind,$list);
				string $searchString = `optionVar -q "searchString"`;

				//print ("list = " + $searchResults[$loopIndex] + "\n");
				string $message = ($searchString + $loopIndex+ ":"+`getFileBit($searchResults[$loopIndex])`);
				int $index = `getIndexBit($searchResults[$loopIndex])`;
				textFieldGrp -e -tx $message str_textFieldGrp;
				intFieldGrp -e -v1 $index indexNo_intFieldGrp;
				$ind++;
				optionVar -iv "searchIndex" $ind;
				break;
			case 1:
				if (!`optionVar -exists "searchIndex"`) $ind = 1;
				else $ind = int(`optionVar -q "searchIndex"`);
				if ($ind<=0) $ind=`optionVar -as "searchResults"`;

				string $searchResults[] = `optionVar -q "searchResults"`;
				$list = int(`optionVar -as "searchResults"`);

				int $loopIndex = fmod($ind,$list);
				string $searchString = `optionVar -q "searchString"`;

				string $message = ($searchString + $loopIndex+":"+ `getFileBit($searchResults[$loopIndex])`);
				int $index = `getIndexBit($searchResults[$loopIndex])`;
				textFieldGrp -e -tx $message str_textFieldGrp;
				intFieldGrp -e -v1 $index indexNo_intFieldGrp;
				$ind--;
				optionVar -iv "searchIndex" $ind;
				break;
			}
		}
	else print ("no search results found\n");
	}
global proc loadOldNameToNew(){
	//  loads the string in old to the new then you can edit it
	string $oldName = `textFieldGrp -q -tx str_textFieldGrp`;
	textFieldGrp -e -tx $oldName newName_textFieldGrp;
	}

global proc renameFile(){
	//  check file exists
	//  rename the file
	//  if successful update the masterIndexFile
	//  ask user if they want to load the new data onto any library nodes in the scene
	string $newName = `textFieldGrp -q -tx newName_textFieldGrp`;
	string $oldName = `textFieldGrp -q -tx str_textFieldGrp`;
	if ($oldName == $newName) {
		print ("\t HEY - your names are the same still??? .... chicken!\n\n");
	} else {

		if (!`filetest -f $oldName`) {
			print("\n\tFor some reason the the original file was not found\n");
			print("\t\tlooking for "+$oldName + "\n\n");
			}
		if (!`sysFile -rename $newName $oldName`) {
			print("\n\tFor some reason the the original file was not able to be renamed - check permissions\n");
		} else {
			// rename was successful so modify the index file
			$libraryFile=`libraryName`;
			$fileId=`fopen $libraryFile "r"`;

			string $libraryContents[];
			int $i=0;
    			string $nextLine = `fgetline $fileId`;
			print("\n\n");
			string $oldLine;
			int $hitIndex;
    			while ( size( $nextLine ) > 0 ) {
				$libraryContents[$i]=$nextLine;
				if (`gmatch $libraryContents[$i] ("*"+$oldName+"*")`) {
					int $hit = $i;
					$oldLine =$libraryContents[$i];
					$hitIndex = $i;
				}
    				$nextLine = `fgetline $fileId`;
				$i++;
    			}
			fclose $fileId;

			string $newLine = ($hitIndex + " " +$newName);
			print ("\t\tI am replacing ....\n\t\toldLine =\t"+$oldLine+"newLine =\t"+$newLine+"\n\n");
			$libraryContents[$hitIndex]=($newLine+"\n");
			// write out the a new file
				// make a safety copy using date to seconds as suffix
				string $date=system("date +%a%B%d%k%M%S");
				string $libFileName[] = getTokens($libraryFile,"/");
				$last=$libFileName[size($libFileName)-1];
				sysFile -copy (`aniPath` + "/archiveLibraries/" + $last+$date) $libraryFile;
				print ("\n\tArchiving the current library" + $libraryFile + " to " + `aniPath` + "/archiveLibraries/" + $last+$date + "\n");
			sysFile -delete `libraryName`;
			string $tempFileName=(`libraryName`);
			$fileIdNew=`fopen $tempFileName "w"`;

			for ($eachLine in $libraryContents) fprint $fileIdNew ($eachLine);
			print ("\tUpdated the file "+$tempFileName+" with your changes\n");
    			fclose $fileIdNew;
		}
	}
}

global proc troyIndexManager() {
	// Check if window exists already
	if (`window -q -ex indexMngWin`) deleteUI indexMngWin;

	window -t "Index Manager" -w 700 -h 275 indexMngWin;
	formLayout indexMngWin_layout;

	float $btnWidth = 150;
	float $txtWidth = 575;

	// Create UI elements
	// Use : -c "procedure_name" : to add commands to buttons
	intFieldGrp -l 	"Index # : " -cw2 90 40 				indexNo_intFieldGrp;
	button -l 	"Get String" -w $btnWidth -c "withIndexGetString(0)" 	getStr_button;
	button -l 	"++" -w  25 -c "withIndexGetString(1)" 			incIndex_button;
	button -l 	"--" -w  25 -c "withIndexGetString(-1)" 		decIndex_button;
	button -l 	"PUT" -w 40 -c "loadIndexOntoSelectedAgents" 		loadToAgents;
	textFieldGrp -l "Frames : "  -ed 0 -cw2 70 60 				noFrames_intFieldGrp;
	textFieldGrp -l "RWpn : " -ed 0 -cw2 70 60 				rightWeapon_textFieldGrp;
	textFieldGrp -l "LWpn : " -ed 0 -cw2 70 60 				leftWeapon_textFieldGrp;
	text -l 	"Transitions" 						scrollListHeading;
	textScrollList  -nr 4 -w 100 -h 80 -allowMultiSelection false
				-dcc "doubleClickCommand"
				-sc "selectCommand"
										transitionList;
	textFieldGrp -l 	"Completed Frame: " -cw2 110 40 		transitionCF;
	textFieldGrp -l 	"Range: " -cw2 110 40 				transitionR;
	button -l 	"Update Transition" -w $btnWidth  -c "updateTransition(0)" 	updateTransition;
	button -l 	"Add Transition" -w $btnWidth  -c "updateTransition(1)" 	addTransition;
	button -l 	"Delete Transition" -w $btnWidth  -c "updateTransition(2)" 	deleteTransition;

	textFieldGrp -l "String : " -cw2 150 $txtWidth 				str_textFieldGrp;
	button -l 	"Search String [|*.]" -w $btnWidth -c"expandString" 	expStr_button;
	button -l 	"++" -w 25  	-c"throughList(0)"			incInList_button;
	button -l 	"--" -w 25  	-c"throughList(1)"			decInList_button;
	button -l 	"PUT" -w 40 -c "loadIndexOntoSelectedAgents" 		loadToAgents2;
	textFieldGrp -l "New Name : " -cw2 150 $txtWidth 			newName_textFieldGrp;
	button -l 	"Load Old Name" -w $btnWidth -c "loadOldNameToNew" 	ldOldName_button;
	button -l 	"Rename" -w $btnWidth -c "renameFile" 			rename_button;
	button -l 	"Close Window" -w $btnWidth -c "deleteUI indexMngWin" 	closeButton;

// Sort out layout of UI elements
formLayout -e
	-attachForm 		indexNo_intFieldGrp "top" 25
	-attachForm 		indexNo_intFieldGrp "left" 5
	
	-attachControl 		scrollListHeading "left" 0 	indexNo_intFieldGrp
	-attachOppositeControl 	scrollListHeading "top" 35 	indexNo_intFieldGrp
	-attachControl 		transitionList "left" 0 	indexNo_intFieldGrp
	-attachOppositeControl 	transitionList "top" 25 	scrollListHeading
	-attachControl 		getStr_button "left" 25 	indexNo_intFieldGrp
	-attachOppositeControl 	getStr_button "top" 0 		indexNo_intFieldGrp

	-attachControl 		incIndex_button "left" 15 	getStr_button
	-attachOppositeControl 	incIndex_button "top" 0 	getStr_button

	-attachControl 		decIndex_button "left" 10 	incIndex_button
	-attachOppositeControl 	decIndex_button "top" 0 	getStr_button

	-attachControl 		loadToAgents "left" 10 		decIndex_button
	-attachOppositeControl 	loadToAgents "top" 0 		getStr_button

	-attachControl 		noFrames_intFieldGrp "left" 20 	transitionList
	-attachOppositeControl 	noFrames_intFieldGrp "top" 0 	transitionList

	-attachControl 		rightWeapon_textFieldGrp "left" 20 	transitionList
	-attachOppositeControl 	rightWeapon_textFieldGrp "top" 30 	noFrames_intFieldGrp

	-attachControl 		leftWeapon_textFieldGrp "left" 20 	transitionList
	-attachOppositeControl 	leftWeapon_textFieldGrp "top" 30 	rightWeapon_textFieldGrp

	-attachControl 		transitionCF "left" 70 		noFrames_intFieldGrp
	-attachOppositeControl 	transitionCF "top" 0 		indexNo_intFieldGrp

	-attachControl 		transitionR "left" 70 		noFrames_intFieldGrp
	-attachOppositeControl 	transitionR "top" 30 		transitionCF

	-attachControl 		updateTransition "left" 70 	noFrames_intFieldGrp
	-attachOppositeControl 	updateTransition "top" 30 	transitionR

	-attachControl 		addTransition "left" 70 	noFrames_intFieldGrp
	-attachOppositeControl 	addTransition "top" 30 		updateTransition

	-attachControl 		deleteTransition "left" 70 	noFrames_intFieldGrp
	-attachOppositeControl 	deleteTransition "top" 30 	addTransition

	-attachControl 		str_textFieldGrp "top" 25 	transitionList


	-attachForm 		str_textFieldGrp "left" 5
	-attachControl 		expStr_button "top" 10 		str_textFieldGrp
	-attachOppositeControl 	expStr_button "left" 150 	str_textFieldGrp

	-attachControl 		incInList_button "left" 10 	expStr_button
	-attachOppositeControl 	incInList_button "top" 0 	expStr_button

	-attachControl 		decInList_button "left" 10 	incInList_button
	-attachOppositeControl 	decInList_button "top" 0 	incInList_button
		
	-attachControl 		loadToAgents2 "left" 10 	decInList_button
	-attachOppositeControl 	loadToAgents2 "top" 0 		incInList_button


	-attachControl 		newName_textFieldGrp "top" 25 	expStr_button

	-attachForm 		newName_textFieldGrp "left" 5
	-attachControl 		ldOldName_button "top" 10 	newName_textFieldGrp
	-attachOppositeControl 	ldOldName_button "left" 150 	newName_textFieldGrp
	-attachControl 		rename_button "left" 50 	ldOldName_button
	-attachOppositeControl 	rename_button "top" 0 		ldOldName_button

	-attachForm 		closeButton "left" 380
	-attachControl 		closeButton "top" 25 		rename_button


indexMngWin_layout;
int $last =`optionVar -q "lastIndex"`;
withIndexGetString($last);
showWindow indexMngWin;
}
