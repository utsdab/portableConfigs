//----------------------------------------------------------------------------
// Copyright © 2010, Daniel Pook-Kolb
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   - Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//   - Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
//   - Neither the name of the author nor the names of its contributors may be
//     used to endorse or promote products derived from this software without
//     specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//----------------------------------------------------------------------------
//
//
//--------------------------------------------------------------------------//
//  DPK_paintDeform.mel
//
//  Author:			Daniel Pook-Kolb
//					daniel@dpk.stargrav.com
//
//  Version:		1.1.3
//  Last Change:	May 23, 2010
//
//  Description:	This script allows you to smooth the deltas of vertex
//					positions between two polygonal objects by painting with
//					artisan. The result is that the local structure of
//					vertices will be reconstructed. This is useful when
//					modeling targets for blendShapes or BCS dataPoint
//					geometry.
//					The script can also be used to copy absolute vertex
//					positions, like painting a blendShape (but without any
//					additional nodes).
//
//  Usage:			Type "DPK_paintDeform;" in the command line, or create a
//					shelf button with this command. A new window will open
//					with some controls to configure the operation. Press the
//					"Enter Tool" button to enter artisan and start painting
//					the selected object.
//
//					For more information see the readme.txt
//
//  Return:			none
//
//  Files Needed:
//					DPK_arrayTools.mel
//					DPK_findInAllNamespaces.mel
//					DPK_generalHotkeys.mel
//					DPK_paintDeformHotkeys.mel
//					DPK_paintDeformMM.mel
//					DPK_paintDeformMM_addObjects.mel
//					DPK_registerHotkeys.mel
//
//--------------------------------------------------------------------------//


//------------------------------
//------------------------------
//
//  Includes and Global Variables {{{1
//
//------------------------------
//------------------------------

//------------------------------
// Global Variables {{{2

// This stores the objects that are currently being painted. It is updated at
// the beginning of each stroke and cleared after a stroke.
global string $DPKg_paintDeformNames[];

// This is the target object which is used to claculate the deltas we'll be
// smoothing/copying.
global string $DPKg_paintDeformTarget;

// This stores the operation. Currently supported values are:
// 1: Smooth Deltas
// 2: Copy
global int    $DPKg_paintDeformOp;


//------------------------------
// Includes {{{2

DPK_arrayTools;


// }}}1


//------------------------------
//------------------------------
//
//  File Scope Constants {{{1
//
//  Define some local "dummy" procedures which just return a simple value.
//  They can be used as constant variables which are global to this script.
//
//------------------------------
//------------------------------

//------------------------------
// Define the procs. {{{2


//------------------------------
// Returns the current version.
// Please synchronize with the version above.
//------------------------------
proc string DPK_L_version()      { return "1.1.3"; }


//------------------------------
// Set this variable to false for release.
// If we're developing, we want to delete any stored prefs about our windows.
// Default: false
//------------------------------
proc int    DPK_L_isDeveloping() { return false; }


//------------------------------
// This is used as the window name throughout the script.
// Default: DPK_paintDeform_win
//------------------------------
proc string DPK_L_windowName()   { return "DPK_paintDeform_win"; }
// }}}2


// }}}1


//------------------------------
//------------------------------
//
//  Option Variables {{{1
//
//  These procedures create, edit, and query the option variables, used by
//  this script.
//
//------------------------------
//------------------------------

//------------------------------
// DPK_L_setIntVar {{{2
//
// Sets the given optionVar to the specified value.
//------------------------------
proc DPK_L_setIntVar( string $var, int $value )
//------------------------------
{
//--//
// Set the optionVar to $value.
optionVar -intValue (DPK_L_windowName()+"_"+$var) $value;
//--//
}
//---- end "DPK_L_setIntVar" ----// }}}2


//------------------------------
// DPK_L_setFloatVar {{{2
//
// Sets the given optionVar to the specified float value.
//------------------------------
proc DPK_L_setFloatVar( string $var, float $value )
//------------------------------
{
//--//
// Set the optionVar to $value.
optionVar -floatValue (DPK_L_windowName()+"_"+$var) $value;
//--//
}
//---- end "DPK_L_setFloatVar" ----// }}}2


//------------------------------
// DPK_L_setStringVar {{{2
//
// Sets the given optionVar to the specified string value.
//------------------------------
proc DPK_L_setStringVar( string $var, string $value )
//------------------------------
{
//--//
// Set the optionVar to $value.
optionVar -stringValue (DPK_L_windowName()+"_"+$var) $value;
//--//
}
//---- end "DPK_L_setStringVar" ----// }}}2


//------------------------------
// DPK_L_getIntVar {{{2
//
// Returns the value of the specified optionVar. If the optionVar doesn't
// exist, the specified $default is returned instead.
//------------------------------
proc int DPK_L_getIntVar( string $var, int $default )
//------------------------------
{
//--//
// Get the full optionVar's name.
$var = (DPK_L_windowName()+"_"+$var);

// Check, whether the optionVar exists.
if( !`optionVar -exists $var` ) {
	// The optionVar doesn't exist, so we return the default.
	return $default;
}

// The optionVar exists, so we return its value.
return `optionVar -query $var`;
//--//
}
//---- end "DPK_L_getIntVar" ----// }}}2


//------------------------------
// DPK_L_getFloatVar {{{2
//
// Returns the value of the specified optionVar. If the optionVar doesn't
// exist, the specified $default is returned instead.
//------------------------------
proc float DPK_L_getFloatVar( string $var, float $default )
//------------------------------
{
//--//
// Get the full optionVar's name.
$var = (DPK_L_windowName()+"_"+$var);

// Check, whether the optionVar exists.
if( !`optionVar -exists $var` ) {
	// The optionVar doesn't exist, so we return the default.
	return $default;
}

// The optionVar exists, so we return its value.
return `optionVar -query $var`;
//--//
}
//---- end "DPK_L_getFloatVar" ----// }}}2


//------------------------------
// DPK_L_getStringVar {{{2
//
// Returns the value of the specified optionVar. If the optionVar doesn't
// exist, the specified $default is returned instead.
//------------------------------
proc string DPK_L_getStringVar( string $var, string $default )
//------------------------------
{
//--//
// Get the full optionVar's name.
$var = (DPK_L_windowName()+"_"+$var);

// Check, whether the optionVar exists.
if( !`optionVar -exists $var` ) {
	// The optionVar doesn't exist, so we return the default.
	return $default;
}

// The optionVar exists, so we return its value.
return `optionVar -query $var`;
//--//
}
//---- end "DPK_L_getStringVar" ----// }}}2


//------------------------------
// DPK_L_getOption {{{2
//
// Returns the value of the specified option. If it has been set using one of
// the DPK_L_setVar procs, this value will be returned. Otherwise, a default
// value will be the return.
//------------------------------
proc string DPK_L_getOption( string $option )
//------------------------------
{
//--//
switch( $option ) {
	case "targObj":
		return DPK_L_getStringVar( $option, "" );
	case "op":
		return DPK_L_getIntVar(    $option, 1 );

	default:
		warning "Wrong argument on call to \"DPK_L_getOption\".";
		return  "";
}
//--//
}
//---- end "DPK_L_getOption" ----// }}}2


//------------------------------
// DPK_L_clearAllOptionVars {{{2
//------------------------------
proc DPK_L_clearAllOptionVars()
//------------------------------
{
//--//
string $varPrefix = (DPK_L_windowName()+"_");

// Remove all optionVars.
optionVar -remove ($varPrefix+"targObj");
optionVar -remove ($varPrefix+"op");
//--//
}
//---- end "DPK_L_clearAllOptionVars" ----// }}}2


// }}}1


//------------------------------
//------------------------------
//
//  Local Procedures {{{1
//
//------------------------------
//------------------------------

//------------------------------
// DPK_L_convertVersionString {{{2
//
// Converts a string like "1.0.1 x64" into the float "1.01".
//------------------------------
proc float DPK_L_convertVersionString( string $verStr )
//------------------------------
{
//--//
// First, remove any substring after a space (contains e.g. "x64").
$verStr = match( "^[0-9\.]*", $verStr );

// Split the string up at the dots.
string $toks[];
tokenize $verStr "." $toks;

// Reset the version string to the first number. The remaining numbers will be
// added after a dot (if there are any).
$verStr = $toks[0];
if( size($toks) > 1 ) {
	$verStr += ".";
}

// Iterate through the remaining numbers and add them to the $verStr.
int $x;
for( $x = 1; $x < size($toks); ++$x ) {
	$verStr += $toks[$x];
}

// Convert the string into a float and return it.
float $version = $verStr;
return $version;
//--//
}
//---- end "DPK_L_convertVersionString" ----// }}}2


//------------------------------
// _has2011 {{{2
//------------------------------
proc int _has2011()
//------------------------------
{
	return ( DPK_L_convertVersionString(`about -v`) >= 2011 );
}
//---- end "_has2011" ----// }}}2


//------------------------------
// DPK_L_isPoly {{{2
//
// This proc checks whether the given $obj is a polygonal object and returns
// true if it is, false otherwise.
//------------------------------
proc int DPK_L_isPoly( string $obj )
//------------------------------
{
//--//
// Check whether this object is a poly shape.
if( size(`ls -type "mesh" $obj`) ) {
	return true;
}

// $obj is not a poly shape. But maybe it is a transform with a poly shape
// beneath it. Get its shape children.
string $allShapes[] = `listRelatives -pa -c -type "mesh" $obj`;

// Iterate through them and get those that are not intermediate objects.
int $x, $shapes;
for( $x = 0; $x < size($allShapes); ++$x ) {
	// Check whether this is an intermediate object.
	if( !`getAttr ($allShapes[$x]+".intermediateObject")` ) {
		// No it is not, so we can store that we've found a shape.
		++$shapes;
	}
}

if( 1 == $shapes ) {
	// We've found exactly one valid shape.
	return true;
} else if( 1 < $shapes ) {
	// This will not work with multiple shapes under one transform.
	error "Multi shape objects not yet supported.";
}

// We didn't find any shapes.
return false;
//--//
}
//---- end "DPK_L_isPoly" ----// }}}2


//------------------------------
// DPK_L_getSelectedPoly {{{2
//------------------------------
proc string DPK_L_getSelectedPoly()
//------------------------------
{
//--//
// Get the currently selected objects.
string $sels[] = `ls -sl`;

// Iterate through them and get a polygonal one.
int $x;
string $obj;
for( $x = 0; $x < size($sels); ++$x ) {
	if( DPK_L_isPoly($sels[$x]) ) {
		// The $x'th selected object is a poly object. If we already have an
		// object, the user has selected more than one.
		if( size($obj) ) {
			error "More than one poly object selected.";
		}

		// Store the found poly object.
		$obj = $sels[$x];
	}
}

return $obj;
//--//
}
//---- end "DPK_L_getSelectedPoly" ----// }}}2


//------------------------------
// DPK_L_getNearestVerts {{{2
//------------------------------
proc int[] DPK_L_getNearestVerts( string $obj, int $vtx )
//------------------------------
{
//--//
// Store the current selection.
string $sels[] = `ls -sl`;

// Select the given vertex.
select -r ($obj+".vtx["+$vtx+"]");

// Select the surrounding faces.
select -r `polyListComponentConversion -fv -tf`;

// Select the vertices of these faces.
select -r `polyListComponentConversion -ff -tv`;

// Get the selected vertices.
string $vertStrings[] = `filterExpand -ex 1 -sm 31`;

// Iterate through them and collect their indices.
string $toks[2];
int $x, $verts[], $size, $inc = 0;
for( $x = 0; $x < size($vertStrings); ++$x ) {
	// Get the integer index of this vertex. To do this, we tokenize the
	// $vertStrings element at []. The last element will be the index.
	$size = `tokenize $vertStrings[$x] "[]" $toks`;

	// If it is not our $vtx, add the vertex to the return array.
	if( $vtx != $toks[ $size - 1 ] ) {
		$verts[$inc++] = $toks[ $size - 1 ];
	}
}

// Restore the previous selection.
select -r $sels;

// Return the verts.
return $verts;
//--//
}
//---- end "DPK_L_getNearestVerts" ----// }}}2


//------------------------------
// DPK_L_getAvgPos {{{2
//------------------------------
proc float[] DPK_L_getAvgPos( string $obj, int $verts[] )
//------------------------------
{
//--//
// Iterate through the given vertices and calculate their interpolated
// positions.
float $pos[3], $p[3];
int $x;
for( $x = 0; $x < size($verts); ++$x ) {
	// Get the pos of this vert.
	$p = `xform -q -os -t ($obj+".vtx["+$verts[$x]+"]")`;

	// Add it to $pos.
	$pos[0] = $pos[0] + ($p[0] / size($verts));
	$pos[1] = $pos[1] + ($p[1] / size($verts));
	$pos[2] = $pos[2] + ($p[2] / size($verts));
}

return $pos;
//--//
}
//---- end "DPK_L_getAvgPos" ----// }}}2


//------------------------------
// DPK_L_smoothDeltas {{{2
//------------------------------
proc float[] DPK_L_smoothDeltas( string $obj,
								 string $targObj,
								 int    $vtx,
								 float  $weight )
//------------------------------
{
//--//
// Get the surrounding verts.
int $verts[] = DPK_L_getNearestVerts( $obj, $vtx );

// Get the interpolated pos of the current and target shape.
float $pos[]     = `DPK_L_getAvgPos $obj     $verts`;
float $targPos[] = `DPK_L_getAvgPos $targObj $verts`;

// Calculate the delta between this and the target pos.
float $delta[];
$delta[0] = $pos[0] - $targPos[0];
$delta[1] = $pos[1] - $targPos[1];
$delta[2] = $pos[2] - $targPos[2];

// Add this delta to the original position of the vertex.
$pos = `xform -q -os -t ($targObj+".vtx["+$vtx+"]")`;
$pos[0] += $delta[0];
$pos[1] += $delta[1];
$pos[2] += $delta[2];

// Calculate the new position by multiplying the difference between its
// current and new position with the $weight. Get its current position.
float $currPos[3] = `xform -q -os -t ($obj+".vtx["+$vtx+"]")`;

// Add the delta multiplied with the $weight.
$currPos[0] += $weight * ($pos[0] - $currPos[0]);
$currPos[1] += $weight * ($pos[1] - $currPos[1]);
$currPos[2] += $weight * ($pos[2] - $currPos[2]);

// Return the resulting position.
return $currPos;
//--//
}
//---- end "DPK_L_smoothDeltas" ----// }}}2


//------------------------------
// DPK_L_copy {{{2
//------------------------------
proc float[] DPK_L_copy( string $obj,
						 string $targObj,
						 int    $vtx,
						 float  $weight )
//------------------------------
{
//--//
// Get the position of this vertex.
float $currPos[3] = `xform -q -os -t ($obj+".vtx["+$vtx+"]")`;

// Get the position of the same vertex on the target object.
float $targPos[3] = `xform -q -os -t ($targObj+".vtx["+$vtx+"]")`;

// Multiply the difference with the $weight.
$currPos[0] += $weight * ($targPos[0] - $currPos[0]);
$currPos[1] += $weight * ($targPos[1] - $currPos[1]);
$currPos[2] += $weight * ($targPos[2] - $currPos[2]);

// Return the resulting position.
return $currPos;
//--//
}
//---- end "DPK_L_copy" ----// }}}2


// }}}1


//------------------------------
//------------------------------
//
//  Tool Procs {{{1
//
//------------------------------
//------------------------------

////////////////////////////////
// DPK_paintDeform_ic {{{2
////////////////////////////////
global proc string DPK_paintDeform_ic( string $surfaceName )
////////////////////////////////
{
//--//
global string $DPKg_paintDeformNames[];
global string $DPKg_paintDeformTarget;

// When we don't have a valid target object, we don't paint (id will be -1).
if( !objExists($DPKg_paintDeformTarget) ) {
	if( !size($DPKg_paintDeformTarget) ) {
		warning "No target object specified.";
	} else {
		warning ("Target object '"+$DPKg_paintDeformTarget+"' doesn't "+
				"exist.");
	}
	return "";
}

// Make sure the $surfaceName is a polygonal object.
if( 1 != size(`ls $surfaceName`) ) {
	warning ("Artisan doesn't work with non-unique object names, but more "
			+"than objects match the name: '"+$surfaceName+"'");
	return "";
}
if( !DPK_L_isPoly($surfaceName) ) {
	warning ("Painted object '"+$surfaceName+"' is not polygonal and will "+
			"be ignored.");
	return "";
}

// Find the next free index in the $DPKg_paintDeformNames array.
int $index = 0;
while( size($DPKg_paintDeformNames[$index]) ) {
	++$index;
}

// Store the name in the array.
$DPKg_paintDeformNames[$index] = $surfaceName;

// Return the flag string.
return ("-id "+$index);
//--//
}
//---- end "DPK_paintDeform_ic" ----// }}}2


////////////////////////////////
// DPK_paintDeform_fc {{{2
////////////////////////////////
global proc DPK_paintDeform_fc( int $id )
////////////////////////////////
{
//--//
global string $DPKg_paintDeformNames[];

// Delete the name of the object with the given $id.
if( -1 != $id ) {
	$DPKg_paintDeformNames[$id] = "";
}
//--//
}
//---- end "DPK_paintDeform_fc" ----// }}}2


////////////////////////////////
// DPK_paintDeform_svc {{{2
////////////////////////////////
global proc DPK_paintDeform_svc( int $id, int $vtx, float $weight )
////////////////////////////////
{
//--//
// Define global variables.
global string $DPKg_paintDeformNames[];
global string $DPKg_paintDeformTarget;
global int    $DPKg_paintDeformOp;

// We don't do anything when $id isn't valid.
if( -1 == $id ) {
	return;
}

// Get the new position using the current operation.
float $pos[3];
if( $DPKg_paintDeformOp == 1 ) {
	$pos = DPK_L_smoothDeltas(  $DPKg_paintDeformNames[$id],
								$DPKg_paintDeformTarget,
								$vtx,
								$weight );
} else {
	$pos = DPK_L_copy(  $DPKg_paintDeformNames[$id],
						$DPKg_paintDeformTarget,
						$vtx,
						$weight );
}


// Move the vert there.
xform
	-os
	-t $pos[0] $pos[1] $pos[2]
	($DPKg_paintDeformNames[$id]+".vtx["+$vtx+"]");
//--//
}
//---- end "DPK_paintDeform_svc" ----// }}}2


////////////////////////////////
// DPK_paintDeform_tsc {{{2
////////////////////////////////
global proc DPK_paintDeform_tsc( string $toolContextName )
////////////////////////////////
{
//--//
artUserPaintCtx -edit
	-tsc "DPK_paintDeform_tsc"
	-tcc ""
	-gac ""
	-ic  "DPK_paintDeform_ic"
	-fc  "DPK_paintDeform_fc"
	-svc "DPK_paintDeform_svc"
	-gvc ""
	-gsc ""
	$toolContextName;
//--//
}
//---- end "DPK_paintDeform_tsc" ----// }}}2


// }}}1


//------------------------------
//------------------------------
//
//  UI {{{1
//
//------------------------------
//------------------------------

//------------------------------
// DPK_L_buildPopup_choose {{{2
//------------------------------
proc DPK_L_buildPopup_choose( string $popup )
//------------------------------
{
//--//
string $win = DPK_L_windowName();

// Delete all menu itmes of the popup menu.
popupMenu -e -dai $popup;

// Make the popup the current parent for the next menuItems.
setParent -menu $popup;

// Make sure the MM script is sourced.
DPK_paintDeformMM 0 0 0 0;

// Create the new menu items.
eval "DPK_paintDeformMM_call {\"rebuildMenuItems\"}";
//--//
}
//---- end "DPK_L_buildPopup_choose" ----// }}}2


//------------------------------
// DPK_L_enableControls {{{2
//------------------------------
proc DPK_L_enableControls()
//------------------------------
{
//--//
string $win = DPK_L_windowName();

// Get the current targObj.
string $targObj = DPK_L_getOption("targObj");

// When it exists, we can enable the paint button.
setParent $win;
if( objExists($targObj) ) {
	button -edit -en true  "toolB";
} else {
	button -edit -en false "toolB";
}
//--//
}
//---- end "DPK_L_enableControls" ----// }}}2


//------------------------------
// DPK_L_updateUI_settings {{{2
//------------------------------
proc DPK_L_updateUI_settings()
//------------------------------
{
//--//
global string $DPKg_paintDeformTarget;
global int    $DPKg_paintDeformOp;
string $win = DPK_L_windowName();

// Get the current settings.
string $targObj = DPK_L_getOption("targObj");
int    $op      = DPK_L_getOption("op");

// Set the global variables to these settings.
$DPKg_paintDeformTarget = $targObj;
$DPKg_paintDeformOp     = $op;

// Set the ui controls.
setParent $win;
if( objExists($targObj) ) {
	textFieldButtonGrp -edit -tx $targObj "targTFBG";
} else {
	textFieldButtonGrp -edit -tx "<none>" "targTFBG";
}

radioButtonGrp -edit -sl $op "opRBG";

// Enable/Disable the paint button.
DPK_L_enableControls;
//--//
}
//---- end "DPK_L_updateUI_settings" ----// }}}2


//------------------------------
// DPK_L_buildUI {{{2
//
// This procedure creates the window and its controls and returns it.
//------------------------------
proc string DPK_L_buildUI()
//------------------------------
{
//--//
// Preparations {{{3
// First we get the window name.
string $win = DPK_L_windowName();

// We shall delete it if it exists.
if( `window -ex $win` ) { deleteUI -wnd $win; }

// If we're developing, we want to delete any stored prefs about our window.
if( `DPK_L_isDeveloping` && `windowPref -exists $win` ) {
	windowPref -remove $win;
}


// Now we can create the window. {{{3
// We'll use a version string for the window title.
string $ver = `DPK_L_version`;
if( !_has2011() && (`about -li` || `about -ir`) ) {
	// We're running linux or irix. On linux, the '-rtf' mechanism doesn't
	// seem to work with this UI, so we define a preferred size at window
	// creation.
	window  -t ("DPK_paintDeform    v"+$ver)
			-tlc 150 500
			-rtf false
			-wh  300 110
			-menuBar true
			$win;
} else {
	// This UI works with '-rtf' on windows.
	window  -t ("DPK_paintDeform    v"+$ver)
			-tlc 150 500
			-rtf true
			-menuBar true
			$win;
}


// Define the UI template(s). {{{3
// Make sure the template doesn't exist.
string $uiTemplate = ($win+"_uiTemplate");
if( `uiTemplate -exists $uiTemplate` ) {
	deleteUI -uiTemplate $uiTemplate;
}

// Create the template.
uiTemplate $uiTemplate;


// Define templates for the different types of UI controls and layouts. <
// We'll start with the layouts.
formLayout -defineTemplate $uiTemplate -nd 100;

columnLayout -defineTemplate $uiTemplate
	-adj true
	-cal "center"
	-cat "both" 0
	-rs  2;

// Now the templates for the other UI controls.
button -defineTemplate $uiTemplate
	-width  80
	-height 25
	-align "center";

textFieldButtonGrp -defineTemplate $uiTemplate
	-ad3 2
	-cw3 80      50     50
	-ct3 "right" "both" "both"
	-co3 4       0      0
	-cl3 "right" "left" "center";

radioButtonGrp -defineTemplate $uiTemplate
	-cw3 80 150 150
	-ct3 "right" "left" "left"
	-co3 4 0 0
	-cw4 80 30 30 30
	-ct4 "right" "left" "left" "left"
	-co4 4 0 0 0;


// Set the created template to be the current UI template. <
setUITemplate -pst $uiTemplate;


// Add the layouts. {{{3
// The main formLayout will position the bottom line controls and the
// columnLayout.
string $mainFL = `formLayout`;

// This layout will just be the parent for the choose popup menu.
string $chooseFL = `formLayout`;

// The columnLayout will put all the other controls into a single column.
string $mainCL = `columnLayout -parent $mainFL`;


// Add the UI controls. {{{3
setParent $mainFL;
button -ann "Start painting" -l "Enter Tool" "toolB";
button "Close";

// The sep1 separator separates ;) this bottom line from the rest of the UI.
separator "sep1";

// Add the settings controls into the columnLayout.
setParent $mainCL;
textFieldButtonGrp -ed 0 -l "Target Object" -bl "Choose" "targTFBG";
radioButtonGrp -l "Operation" -nrb 2 -l1 "Smooth Deltas" -l2 "Copy" "opRBG";


// Menus {{{3
// A popup menu for quickly choosing target objects.
popupMenu -p $chooseFL
	-mm  true
	-b   3
	-aob false
	-pmc ("DPK_paintDeform_call "+
			"{\"buildPopup_choose\", \""+$win+"_choose3_PM\"}")
	($win+"_choose3_PM");
popupMenu -p $chooseFL
	-mm  true
	-b   1
	-aob false
	-pmc ("DPK_paintDeform_call "+
			"{\"buildPopup_choose\", \""+$win+"_choose1_PM\"}")
	($win+"_choose1_PM");

// Create the help menu.
menu -label "Help" -tearOff false;

	// Create the menuItems.
	menuItem -label "DPK Homepage"
			-ann "Visit the DPK homepage in the internet"
			-c "showHelp -absolute \"http://dpk.stargrav.com\"";
	menuItem -label "Online Help"
			-ann "Visit the online docs on my homepage"
			-c ("showHelp -absolute \"http://dpk.stargrav.com/"+
					"bcs/docs/data/lv1-paint.html\"");
	menuItem -divider true;
	menuItem -label "About..."
			-ann "Display version info about this script"
			-c "DPK_paintDeform_call {\"about\"}";


// Reset the current UI template. {{{3
setUITemplate -ppt;


// Set up the callbacks. {{{3
setParent $mainFL;
button -edit -c ("deleteUI -window \""+$win+"\"") "Close";
button -edit -c "DPK_paintDeform_call {\"enterTool\"}" "toolB";

setParent $mainCL;
textFieldButtonGrp -edit
	-bc "DPK_paintDeform_call {\"chooseTarg\"}"
	"targTFBG";
radioButtonGrp -edit
	-on1 "DPK_paintDeform_call {\"op\", \"smoothDeltas\"}"
	-on2 "DPK_paintDeform_call {\"op\", \"copy\"}"
	"opRBG";


// Do the layout. {{{3
if( !`about -li` && !`about -ir`
		&& DPK_L_convertVersionString(`about -v`) < 2011 ) {
	// We're not on a *NIX system, so we do what works on windows. Sizing the
	// window really small before doing the layout. This has the effect that
	// the window is resized during the layout and thus becomes just as big as
	// required to show all controls.
	window -edit -wh 10 10 $win;
}

formLayout -e
    -af		"Close"		"bottom"	4
    -af		"Close"		"right"		4

    -ac		"sep1"		"bottom"	4		"Close"
    -af		"sep1"		"left"		0
    -af		"sep1"		"right"		0

    -af		"toolB"		"bottom"	4
    -af		"toolB"		"left"		4

	-af		$mainCL		"top"		0
	-af		$mainCL		"left"		4
	-ac		$mainCL		"bottom"	4		"sep1"
	-af		$mainCL		"right"		4

	-aoc	$chooseFL	"top"		0		"Close"
	-af		$chooseFL	"bottom"	0
	-ac		$chooseFL	"left"		0		"toolB"
	-ac		$chooseFL	"right"		0		"Close"
$mainFL;

// Update the UI and fill the lists. {{{3
// Update the UI settings controls so that they display the current options.
DPK_L_updateUI_settings;


return $win;
//--//
}
//---- end "DPK_L_buildUI" ----// }}}2


//------------------------------
// DPK_L_enterTool {{{2
//------------------------------
proc DPK_L_enterTool()
//------------------------------
{
//--//
// Get the panel with focus.
string $panel = `getPanel -wf`;

// Switch to artisan into the paintScriptsTool and configure it.
ScriptPaintToolOptions "artUserPaintToolScript" 3;
DPK_paintDeform_tsc "artUserPaintContext";

// Reset focus to the modeling panel.
if( size($panel) && "modelPanel" == `getPanel -to $panel` ) {
	evalDeferred ("setFocus \""+$panel+"\";");
}
//--//
}
//---- end "DPK_L_enterTool" ----// }}}2


//------------------------------
// DPK_L_setTarg {{{2
//------------------------------
proc DPK_L_setTarg( string $obj )
//------------------------------
{
//--//
global string $DPKg_paintDeformTarget;
string $win = DPK_L_windowName();

// Set the optionVar and the global variable to the object.
DPK_L_setStringVar "targObj" $obj;
$DPKg_paintDeformTarget = $obj;

// Enter the object into the TFBG.
setParent $win;
if( size($obj) ) {
	textFieldButtonGrp -edit -tx $obj "targTFBG";
} else {
	textFieldButtonGrp -edit -tx "<none>" "targTFBG";
}

// Enable/Disable the paint button.
DPK_L_enableControls;
//--//
}
//---- end "DPK_L_setTarg" ----// }}}2


//------------------------------
// DPK_L_chooseTarg {{{2
//------------------------------
proc DPK_L_chooseTarg()
//------------------------------
{
//--//
// Get the currently selected polygon object.
string $obj = DPK_L_getSelectedPoly();

// Set it as current target object.
DPK_L_setTarg $obj;
//--//
}
//---- end "DPK_L_chooseTarg" ----// }}}2


//------------------------------
// DPK_L_operationChanged {{{2
//------------------------------
proc DPK_L_operationChanged( string $operation )
//------------------------------
{
//--//
// Set the operation optionVar and global int.
global int $DPKg_paintDeformOp;
switch( $operation ) {
	case "smoothDeltas":
		$DPKg_paintDeformOp = 1;
		DPK_L_setIntVar "op" 1;
		break;
	case "copy":
		$DPKg_paintDeformOp = 2;
		DPK_L_setIntVar "op" 2;
		break;
}
//--//
}
//---- end "DPK_L_operationChanged" ----// }}}2


//------------------------------
// DPK_L_about {{{2
//------------------------------
proc DPK_L_about ()
//------------------------------
{
//--//
string $ver = `DPK_L_version`;

// Create a confirm dialog with version info etc..
confirmDialog
	-title "DPK_paintDeform"
	-m ("DPK_paintDeform.mel      v"+$ver+"\n\n\n"+
		"Author:  Daniel Pook-Kolb\n"+
		"Email:  daniel@dpk.stargrav.com\n\n\n"+
		"Copyright 2010, Daniel Pook-Kolb\n")
	-ma "left"
	-b  "Close"
	-db "Close";
//--//
}
//---- end "DPK_L_about" ----// }}}2


// }}}1


//------------------------------
//------------------------------
//
//  Main Procs {{{1
//
//------------------------------
//------------------------------

////////////////////////////////
// DPK_paintDeform_call {{{2
//
// This is the "callback" procedure.
//
// It is called by the UI controls with one string array. The first element
// defines the task that should be performed. The other elements are optional
// and can be used as arguments to the called procs.
//
// This construct helps to minimize the use of global procs when you have many
// buttons...
////////////////////////////////
global proc DPK_paintDeform_call( string $args[] )
////////////////////////////////
{
//--//
// The first element of the $args array defines the task. We use a "switch"
// construct here because there may be many different tasks.
switch( $args[0] ) {
	case "buildPopup_choose":
		DPK_L_buildPopup_choose $args[1];
		break;

	case "chooseTarg":
		DPK_L_chooseTarg;
		break;
	case "setTarg":
		DPK_L_setTarg $args[1];
		break;
	case "op":
		DPK_L_operationChanged $args[1];
		break;
	case "enterTool":
		DPK_L_enterTool;
		break;

	case "about":
		DPK_L_about;
		break;

	// Issue a warning if the call wasn't implemented. {{{3
	default:
		warning ("Not yet implemented: "+$args[0]);
		break;
	// }}}3
}
//--//
}
//---- end "DPK_paintDeform_call" ----// }}}2


////////////////////////////////
//------------------------------
// DPK_paintDeform {{{2
//
// This is the main procedure. It really doesn't do more than calling the proc
// that creates the UI and showing the resulting window.
//------------------------------
////////////////////////////////
global proc DPK_paintDeform()
////////////////////////////////
{
//--//
// Build and show the UI.
showWindow `DPK_L_buildUI`;
//--//
}
//---- end "DPK_paintDeform" ----// }}}2


// }}}1


//------------------------------
// Configure Vim {{{3
//
// If you're wondering why there are places with three curly braces ("{" or
// "}") with a number in comments, these are used by vim to do automatic
// folding (hiding lines).
//
// If you don't know what vim is, check out:
//    http://www.vim.org
//
// These settings will configure vim to display this file correctly.
//    vim:set ts=4 tw=78 fdm=marker fdl=1 fdc=3:
