//
// camera control menu
//
// Created by Hamish McKenzie hamish@macaronikazoo.com
// Created : 19 December 2002
//
// Description:
// simply creates a camera marking menu.  a single press of the button
// the script is assigned to will perform a look through selected on
// a selected object, while holding it down (and clicking) brings up a
// marking menu, allowing you to look through any previously created
// camera.  This script also cooperates with the zooSetMenu v2.5 script
// with updating its UI etc...
//
// Usage:
//  assign this function to a key press:
//	zooCam;
//
//  assign this function to the release;
//	zooCamKillUI;
//
// NOTE: if the hotkey you want to assign this script to contains
// either ctrl, alt or shift, then modify the "popupMenu" line below
// to reflect which key is used (ie if you're using alt-w then
// change it to -alt 1).
//


zooArrays_str;


global proc zooCam() {
	global int $zooIsClicked;
	string $panel = `getPanel -up`;

	$zooIsClicked = 0;
	if( `popupMenu -ex tempMM` ) deleteUI tempMM;
	if( !`control -ex $panel` ) $panel = "viewPanes";
	popupMenu -ctl 0 -alt 0 -sh 0 -mm 1 -b 1 -aob 1 -p $panel -pmc zooCamUI tempMM;
	}


global proc zooCamUI() {
	global int $zooIsClicked;
	string $cameras[] = `zooListCameras`;

	$zooIsClicked = 1;
	menu -e -dai tempMM;
	setParent -m tempMM;

	string $panel = `getPanel -up`;
	string $curCam = `zooGetPanelCam $panel`;
	string $curCamShapes[] = `listRelatives -s -pa $curCam`;
	string $curCamShape = $curCamShapes[0];
	string $defaultC[] = { "persp", "top", "front", "side" };
	string $defaultPos[] = { "N", "W", "S", "E" };
	int $useForEazel = `optionVar -ex zooCamSetEazel`? `optionVar -q zooCamSetEazel`: 0;

	$cameras = `zooSubtractArray_str $cameras $defaultC`;
	if( `optionVar -ex zooSetMenuCameraUserList` ) optionVar -rm zooSetMenuCameraUserList;

	for( $n=0; $n<`size $defaultC`; $n++ ) {
		int $isCurrent = $defaultC[$n] == $curCam ? 1:0;
		menuItem -cb $isCurrent -l $defaultC[$n] -c( "zooLookThrough "+ $defaultC[$n] +" "+ $panel +";" ) -rp $defaultPos[$n];
		}

	for( $cam in $cameras ) {
		int $isCurrent = $cam == $curCam ? 1:0;
		menuItem -cb $isCurrent -l $cam -c( "zooLookThrough "+ $cam +" "+ $panel +";" );
		}

	if( `size $cameras` ) menuItem -d 1;
	menuItem -l "create new camera" -c( "{string $cam[] = `camera`; zooLookThrough $cam[0] "+ $panel +";}" );
	menuItem -l "dupe current camera" -c( "{string $dupeCam[] = `duplicate -rc (zooGetPanelCam(\""+ $panel +"\"))`; zooLookThrough $dupeCam[0] "+ $panel +";}" );
	menuItem -l "far clip x10" -c( "setAttr "+ $curCamShape +".farClipPlane (`getAttr "+ $curCamShape +".farClipPlane`*10);" );
	/*menuItem -d 1;
	menuItem -l "hide eazel" -c( "{zooGreaseMonkeyUtils; string $eazel = `zooGetEazel 0`; setAttr ( $eazel +\".v\" ) 0;}" );
	menuItem -l "show eazel" -c( "{zooGreaseMonkeyUtils; string $eazel = `zooGetEazel 0`; setAttr ( $eazel +\".v\" ) 1;}" );
	menuItem -d 1;
	menuItem -l "instance eazel for this camera" -c( "zooInstanceEazel "+ $curCam +";" );
	menuItem -l "use this camera for eazel" -c( "zooGreaseMonkeyUtils; zooMonkeySee "+ $curCam +";" );
	menuItem -cb $useForEazel -l "always use lookthru for eazel" -c( "if( #1 ) optionVar -iv zooCamSetEazel 1; else optionVar -rm zooCamSetEazel;" );*/
	}


global proc zooLookThrough(string $camera, string $panel) {
    // Store the old camera to prefs so we can toggle
    optionVar -sv zooCamToggle $camera;

    lookThroughModelPanel $camera $panel;
    zooDoExtraLookthru $camera $panel;
}

//this proc can be used to make the script do "other stuff" when a camera is looked through
//for example, the selecto stuff, the line of action stuff, etc...  can all be simply added
//to this simple little proc
global proc zooDoExtraLookthru( string $camera, string $panel ) {
	//zooSetLookat $camera;
	int $useForEazel = `optionVar -ex zooCamSetEazel`? `optionVar -q zooCamSetEazel`: 0;
	if( $useForEazel ) {
		zooGreaseMonkeyUtils;
		if( objExists(`zooGetEazel 0`)) zooMonkeySee $camera;
		}
	}


//returns the name of the camera the current model panel is looking through.  this always returns a transform node, unlike the lookThru -q command
global proc string[] zooListCameras() {
	string $cameraShapes[] = `ls -type camera`;
	string $cameraTransforms[] = {};

	for( $cam in $cameraShapes ) {
		string $parent[] = `listRelatives -pa -p $cam`;
		$cameraTransforms[( `size $cameraTransforms` )] = $parent[0];
		}

	return $cameraTransforms;
	}


//returns a list of all camera transform nodes.  unlike the listCameras command, this always returns transform nodes.
global proc string zooGetPanelCam( string $panel ) {
	if( `getPanel -to $panel` != "modelPanel" ) return "";

	string $camera = `modelPanel -q -cam $panel`;
	if( `nodeType $camera` == "camera" ) {
		string $parent[] = `listRelatives -p $camera`;
		return $parent[0];
		}
	else return $camera;
	}


//this proc should be used as the press release command
global proc zooCamKillUI() {
	global int $zooIsClicked;

	if( `popupMenu -ex tempMM` ) {
		deleteUI tempMM;
		if( $zooIsClicked ) $zooIsClicked = 0;
		else {
			string $panel = `getPanel -up`;
			string $toggleCam = `optionVar -ex zooCamToggle`? `optionVar -q zooCamToggle`: "";
			if( `objExists $toggleCam` ) {
				string $curCam = `zooGetPanelCam $panel`;

				if( $curCam != $toggleCam ) {
					zooLookThrough $toggleCam $panel;
					}
				}

			//otherwise we just want to look through selected
			else lookThroughSelected 0 `getPanel -underPointer`;
			$zooIsClicked = 0;
			}
		}
	}


//zoo.end
