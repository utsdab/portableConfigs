//----------------------------------------------------------------------------------------------
//
//	mirror set driven keyframe for influence objects
//
//	SCRIPT:			icMirrorSDK.mel
//
//	AUTHOR:			Ingo Clemens
//	DATE:			Mar 04, 2015
//					created: May 15, 2013
//
//	VERSIONS:
//					1.1 - Mar 04, 2015
//					1.0 - May 15, 2013
//
//----------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
//
//	USE AND MODIFY AT YOUR OWN RISK!!
//
//----------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------
//
// main mirror procedure
//
//----------------------------------------------------------------------------------------------

global proc icMSDKexecute()
{
	int $root = `checkBoxGrp -q -v1 symmetryCenter`;
	string $axis = `textFieldGrp -q -tx symmetryAxis`;
	$axis = `toupper($axis)`;
	string $left = `textFieldGrp -q -tx leftPrefix`;
	string $right = `textFieldGrp -q -tx rightPrefix`;
	
	if ($left == "" || $right == "")
		error "Please define the prefixes for both sides";
		
	if ($axis == "" && $root == 1)
		error "Please define the symmetry axis";
	
	string $jnt[] = `ls -sl -type joint`;
	if (size($jnt) == 0)
		return;
	
	int $counter;
	
	for ($sel in $jnt)
	{
		// get a list of all animated attributes and their driving attributes
		string $conn[] = `listConnections -p 1 -c 1 -type "animCurve" $sel`;
	
		for ($c = 0; $c < size($conn); $c += 2)
		{
			// the driven attribute is the first of the pair
			string $attr = $conn[$c];
			// the driver is the second of the given pair
			string $curveOutput = $conn[$c + 1];
			// separate the driver and the driving attribute name
			string $curve[];
			tokenize $curveOutput "." $curve;
			
			// check if the original SDK curve should be set to infinity
			if (`checkBoxGrp -q -v1 infinityLeft` == 1)
			{
				setAttr ($curve[0] + ".preInfinity") 1;
				setAttr ($curve[0] + ".postInfinity") 1;
			}
			
			// get the driver for the SDK attribute
			string $driver[] = `setDrivenKeyframe -q -dr $attr`;
			
			// replace the prefixes
			$driver[0] = `substitute $left $driver[0] $right`;
			$attr = `substitute $left $attr $right`;
		
			// get the number of keys for the SDK curve
			int $index[] = `getAttr -mi ($curve[0] + ".ktv")`;
		
			for ($i in $index)
			{
				// get the key/value pair for each entry
				float $val[] = `getAttr ($curve[0] + ".ktv[" + $i + "]")`;
			
				// if the joint is located at the root only the given axis needs to be inverted
				// for all other joints all values need to be inverted
				if ($root == 1 && `substring $attr (size($attr)) (size($attr))` == $axis)
					$val[1] *= -1;
				else if ($root == 0)
					$val[1] *= -1;
				if (`gmatch $attr "*scale*"`)
					$val[1] *= -1;
			
				string $cmd = "setDrivenKeyframe -dv " + $val[0] + " -v " + $val[1] + " -itt spline -ott spline -cd " + $driver[0] + " " + $attr;
				eval($cmd);
			
				// check if the new SDK curve should be set to infinity
				if (`checkBoxGrp -q -v1 infinityRight` == 1)
				{
					string $curveNode[];
					tokenize $attr "." $curveNode;
					setAttr ($curveNode[0] + "_" + $curveNode[1] + ".preInfinity") 1;
					setAttr ($curveNode[0] + "_" + $curveNode[1] + ".postInfinity") 1;
				}
			}
		}
		
		$counter ++;
	}
	
	print ("// Result: " + $counter + "\n");
}

//----------------------------------------------------------------------------------------------
//
// window creating procedure
//
//----------------------------------------------------------------------------------------------

global proc icMSDKwindow( string $win )
{
	window -t "Mirror SDK" $win;

	//create the form
	string $form = `formLayout "parentForm"`;

	//create the frames in the form
		string $objectsFrame = `frameLayout -l "Options" -li 3
										-mw 3 -mh 3 -bs "etchedIn" objectsFrame`;
	setParent $form;

	//create the buttons
	string $bExecute = `button -l "Mirror Set Driven Keyframe" -c "icMSDKexecute" executeButton`;

	//position the elements
	formLayout -e
		-af $objectsFrame "top" 3
		-ac $objectsFrame "bottom" 3 $bExecute
		-af $objectsFrame "left" 3
		-af $objectsFrame "right" 3

		-an $bExecute "top"
		-af $bExecute "bottom" 3
		-af $bExecute "left" 3
		-af $bExecute "right" 3

		$form;

	//create the elements for the uiFrame section
	setParent $objectsFrame;

	columnLayout objectsColumn;
		columnLayout;
			separator -h 5;
			textFieldGrp -l "Left Prefix" -tx "L_" -ct2 "right" "both" -co2 5 0 leftPrefix;
			textFieldGrp -l "Right Prefix" -tx "R_" -ct2 "right" "both" -co2 5 0 rightPrefix;
			separator -h 10;
			checkBoxGrp -ncb 1 -l "Symmetry Center" -ct2 "right" "both" -co2 5 0 -v1 0 symmetryCenter;
			textFieldGrp -l "Symmetry Axis" -tx "x" -ct2 "right" "both" -co2 5 0 symmetryAxis;
			separator -h 10;
			checkBoxGrp -ncb 1 -l "Linear Infinity Left Side" -ct2 "right" "both" -co2 5 0 -v1 1 infinityLeft;
			checkBoxGrp -ncb 1 -l "Linear Infinity Right Side" -ct2 "right" "both" -co2 5 0 -v1 1 infinityRight;
			separator -h 5;
		setParent $objectsFrame;
}

//----------------------------------------------------------------------------------------------
//
// initializing procedure
//
//----------------------------------------------------------------------------------------------

global proc icMirrorSDK()
{
	//declare a new window name
	string $win = "icMirrorSDKUI";

	//is the window already open?
	if (`window -exists $win`)
	{
		deleteUI $win;
	}

	//create the window
	icMSDKwindow ( $win );

	//make the window visible
	showWindow $win;
}